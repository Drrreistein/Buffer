/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-02-02 03:29:16.026329
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION == 0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b)                                                                                                                     \
    {                                                                                                                                        \
        if (!(b))                                                                                                                            \
        {                                                                                                                                    \
            std::stringstream ss;                                                                                                            \
            ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " << __PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; \
            throw std::runtime_error(ss.str());                                                                                              \
        }                                                                                                                                    \
    }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI ((IkReal)6.28318530717959)
#define IKPI ((IkReal)3.14159265358979)
#define IKPI_2 ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C"
{
    void dgetrf_(const int *m, const int *n, double *a, const int *lda, int *ipiv, int *info);
    void zgetrf_(const int *m, const int *n, std::complex<double> *a, const int *lda, int *ipiv, int *info);
    void dgetri_(const int *n, const double *a, const int *lda, int *ipiv, double *work, const int *lwork, int *info);
    void dgesv_(const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi, double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

    inline float IKabs(float f)
    {
        return fabsf(f);
    }
    inline double IKabs(double f) { return fabs(f); }

    inline float IKsqr(float f) { return f * f; }
    inline double IKsqr(double f) { return f * f; }

    inline float IKlog(float f) { return logf(f); }
    inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif

    inline float IKasin(float f)
    {
        IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH); // any more error implies something is wrong with the solver
        if (f <= -1)
            return float(-IKPI_2);
        else if (f >= 1)
            return float(IKPI_2);
        return asinf(f);
    }
    inline double IKasin(double f)
    {
        IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH); // any more error implies something is wrong with the solver
        if (f <= -1)
            return -IKPI_2;
        else if (f >= 1)
            return IKPI_2;
        return asin(f);
    }

    // return positive value in [0,y)
    inline float IKfmod(float x, float y)
    {
        while (x < 0)
        {
            x += y;
        }
        return fmodf(x, y);
    }

    // return positive value in [0,y)
    inline double IKfmod(double x, double y)
    {
        while (x < 0)
        {
            x += y;
        }
        return fmod(x, y);
    }

    inline float IKacos(float f)
    {
        IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH); // any more error implies something is wrong with the solver
        if (f <= -1)
            return float(IKPI);
        else if (f >= 1)
            return float(0);
        return acosf(f);
    }
    inline double IKacos(double f)
    {
        IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH); // any more error implies something is wrong with the solver
        if (f <= -1)
            return IKPI;
        else if (f >= 1)
            return 0;
        return acos(f);
    }
    inline float IKsin(float f) { return sinf(f); }
    inline double IKsin(double f) { return sin(f); }
    inline float IKcos(float f) { return cosf(f); }
    inline double IKcos(double f) { return cos(f); }
    inline float IKtan(float f) { return tanf(f); }
    inline double IKtan(double f) { return tan(f); }
    inline float IKsqrt(float f)
    {
        if (f <= 0.0f)
            return 0.0f;
        return sqrtf(f);
    }
    inline double IKsqrt(double f)
    {
        if (f <= 0.0)
            return 0.0;
        return sqrt(f);
    }
    inline float IKatan2Simple(float fy, float fx)
    {
        return atan2f(fy, fx);
    }
    inline float IKatan2(float fy, float fx)
    {
        if (isnan(fy))
        {
            IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
            return float(IKPI_2);
        }
        else if (isnan(fx))
        {
            return 0;
        }
        return atan2f(fy, fx);
    }
    inline double IKatan2Simple(double fy, double fx)
    {
        return atan2(fy, fx);
    }
    inline double IKatan2(double fy, double fx)
    {
        if (isnan(fy))
        {
            IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
            return IKPI_2;
        }
        else if (isnan(fx))
        {
            return 0;
        }
        return atan2(fy, fx);
    }

    template <typename T>
    struct CheckValue
    {
        T value;
        bool valid;
    };

    template <typename T>
    inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
    {
        CheckValue<T> ret;
        ret.valid = false;
        ret.value = 0;
        if (!isnan(fy) && !isnan(fx))
        {
            if (IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH)
            {
                ret.value = IKatan2Simple(fy, fx);
                ret.valid = true;
            }
        }
        return ret;
    }

    inline float IKsign(float f)
    {
        if (f > 0)
        {
            return float(1);
        }
        else if (f < 0)
        {
            return float(-1);
        }
        return 0;
    }

    inline double IKsign(double f)
    {
        if (f > 0)
        {
            return 1.0;
        }
        else if (f < 0)
        {
            return -1.0;
        }
        return 0;
    }

    template <typename T>
    inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
    {
        CheckValue<T> ret;
        ret.valid = true;
        if (n == 0)
        {
            ret.value = 1.0;
            return ret;
        }
        else if (n == 1)
        {
            ret.value = f;
            return ret;
        }
        else if (n < 0)
        {
            if (f == 0)
            {
                ret.valid = false;
                ret.value = (T)1.0e30;
                return ret;
            }
            if (n == -1)
            {
                ret.value = T(1.0) / f;
                return ret;
            }
        }

        int num = n > 0 ? n : -n;
        if (num == 2)
        {
            ret.value = f * f;
        }
        else if (num == 3)
        {
            ret.value = f * f * f;
        }
        else
        {
            ret.value = 1.0;
            while (num > 0)
            {
                if (num & 1)
                {
                    ret.value *= f;
                }
                num >>= 1;
                f *= f;
            }
        }

        if (n < 0)
        {
            ret.value = T(1.0) / ret.value;
        }
        return ret;
    }

    /// solves the forward kinematics equations.
    /// \param pfree is an array specifying the free joints of the chain.
    IKFAST_API void ComputeFk(const IkReal *j, IkReal *eetrans, IkReal *eerot)
    {
        IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48;
        x0 = IKcos(j[0]);
        x1 = IKcos(j[3]);
        x2 = IKcos(j[2]);
        x3 = IKsin(j[1]);
        x4 = IKsin(j[0]);
        x5 = IKsin(j[3]);
        x6 = IKcos(j[1]);
        x7 = IKsin(j[2]);
        x8 = IKsin(j[5]);
        x9 = IKcos(j[5]);
        x10 = IKcos(j[4]);
        x11 = IKsin(j[4]);
        x12 = ((0.15) * x1);
        x13 = ((0.16) * x6);
        x14 = ((0.15) * x3);
        x15 = ((1.0) * x5);
        x16 = ((0.54) * x6);
        x17 = ((1.0) * x3);
        x18 = ((0.16) * x5);
        x19 = ((1.0) * x0);
        x20 = ((0.16) * x1);
        x21 = ((1.0) * x4);
        x22 = (x0 * x2);
        x23 = (x0 * x3);
        x24 = (x2 * x4);
        x25 = (x3 * x7);
        x26 = (x2 * x6);
        x27 = (x1 * x11);
        x28 = (x6 * x7);
        x29 = (x2 * x3);
        x30 = (x1 * x21);
        x31 = (x17 * x2);
        x32 = ((1.0) * x26);
        x33 = (x28 * x4);
        x34 = (x19 * x28);
        x35 = (x21 * x28);
        x36 = (x25 + x26);
        x37 = ((((-1.0) * x34)) + ((x22 * x3)));
        x38 = ((((-1.0) * x35)) + ((x24 * x3)));
        x39 = ((((-1.0) * x17 * x22)) + x34);
        x40 = ((((-1.0) * x17 * x24)) + x35);
        x41 = (x1 * x37);
        x42 = (x1 * x38);
        x43 = (x40 * x5);
        x44 = (x41 + (((-1.0) * x15 * x4)));
        x45 = (((x0 * x5)) + x42);
        x46 = (((x11 * (((((-1.0) * x28)) + x31)))) + ((x1 * x10 * x36)));
        x47 = (((x10 * x44)) + ((x11 * (((((-1.0) * x19 * x26)) + (((-1.0) * x0 * x17 * x7)))))));
        x48 = (((x10 * x45)) + ((x11 * (((((-1.0) * x21 * x26)) + (((-1.0) * x17 * x4 * x7)))))));
        eerot[0] = (((x47 * x9)) + ((x8 * (((((-1.0) * x30)) + ((x39 * x5)))))));
        eerot[1] = (((x47 * x8)) + ((x9 * ((x30 + (((-1.0) * x15 * x39)))))));
        eerot[2] = (((x11 * x44)) + ((x10 * ((((x22 * x6)) + ((x23 * x7)))))));
        IkReal x49 = (x23 * x7);
        eetrans[0] = ((((0.71) * x23)) + ((x10 * (((((0.16) * x49)) + ((x13 * x22)))))) + ((x16 * x22)) + ((x11 * ((((x20 * x37)) + (((-1.0) * x18 * x4)))))) + ((x5 * ((((x14 * x22)) + (((-0.15) * x0 * x28)))))) + (((0.54) * x49)) + ((x12 * x4)));
        eerot[3] = (((x48 * x9)) + ((x8 * ((((x0 * x1)) + x43)))));
        eerot[4] = (((x9 * (((((-1.0) * x15 * x40)) + (((-1.0) * x1 * x19)))))) + ((x48 * x8)));
        eerot[5] = (((x10 * ((((x25 * x4)) + ((x24 * x6)))))) + ((x11 * x45)));
        IkReal x50 = (x25 * x4);
        eetrans[1] = (((x10 * (((((0.16) * x50)) + ((x13 * x24)))))) + (((-1.0) * x0 * x12)) + (((0.71) * x3 * x4)) + ((x5 * (((((-0.15) * x33)) + ((x14 * x24)))))) + (((0.54) * x50)) + ((x16 * x24)) + ((x11 * ((((x20 * x38)) + ((x0 * x18)))))));
        eerot[6] = (((x5 * x8 * (((((-1.0) * x32)) + (((-1.0) * x17 * x7)))))) + ((x46 * x9)));
        eerot[7] = (((x36 * x5 * x9)) + ((x46 * x8)));
        eerot[8] = (((x27 * x36)) + ((x10 * (((((-1.0) * x31)) + x28)))));
        eetrans[2] = ((0.245) + ((x27 * (((((0.16) * x25)) + ((x13 * x2)))))) + ((x10 * (((((-0.16) * x29)) + ((x13 * x7)))))) + (((-0.54) * x29)) + ((x5 * ((((x14 * x7)) + (((0.15) * x26)))))) + ((x16 * x7)) + (((0.71) * x6)));
    }

    IKFAST_API int GetNumFreeParameters() { return 0; }
    IKFAST_API int *GetFreeParameters() { return NULL; }
    IKFAST_API int GetNumJoints() { return 6; }

    IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

    IKFAST_API int GetIkType() { return 0x67000001; }

    class IKSolver
    {
    public:
        IkReal j0, cj0, sj0, htj0, j0mul, j1, cj1, sj1, htj1, j1mul, j2, cj2, sj2, htj2, j2mul, j3, cj3, sj3, htj3, j3mul, j4, cj4, sj4, htj4, j4mul, j5, cj5, sj5, htj5, j5mul, new_r00, r00, rxp0_0, new_r01, r01, rxp0_1, new_r02, r02, rxp0_2, new_r10, r10, rxp1_0, new_r11, r11, rxp1_1, new_r12, r12, rxp1_2, new_r20, r20, rxp2_0, new_r21, r21, rxp2_1, new_r22, r22, rxp2_2, new_px, px, npx, new_py, py, npy, new_pz, pz, npz, pp;
        unsigned char _ij0[2], _nj0, _ij1[2], _nj1, _ij2[2], _nj2, _ij3[2], _nj3, _ij4[2], _nj4, _ij5[2], _nj5;

        IkReal j100, cj100, sj100;
        unsigned char _ij100[2], _nj100;
        bool ComputeIk(const IkReal *eetrans, const IkReal *eerot, const IkReal *pfree, IkSolutionListBase<IkReal> &solutions)
        {
            j0 = numeric_limits<IkReal>::quiet_NaN();
            _ij0[0] = -1;
            _ij0[1] = -1;
            _nj0 = -1;
            j1 = numeric_limits<IkReal>::quiet_NaN();
            _ij1[0] = -1;
            _ij1[1] = -1;
            _nj1 = -1;
            j2 = numeric_limits<IkReal>::quiet_NaN();
            _ij2[0] = -1;
            _ij2[1] = -1;
            _nj2 = -1;
            j3 = numeric_limits<IkReal>::quiet_NaN();
            _ij3[0] = -1;
            _ij3[1] = -1;
            _nj3 = -1;
            j4 = numeric_limits<IkReal>::quiet_NaN();
            _ij4[0] = -1;
            _ij4[1] = -1;
            _nj4 = -1;
            j5 = numeric_limits<IkReal>::quiet_NaN();
            _ij5[0] = -1;
            _ij5[1] = -1;
            _nj5 = -1;
            for (int dummyiter = 0; dummyiter < 1; ++dummyiter)
            {
                solutions.Clear();
                r00 = eerot[0 * 3 + 0];
                r01 = eerot[0 * 3 + 1];
                r02 = eerot[0 * 3 + 2];
                r10 = eerot[1 * 3 + 0];
                r11 = eerot[1 * 3 + 1];
                r12 = eerot[1 * 3 + 2];
                r20 = eerot[2 * 3 + 0];
                r21 = eerot[2 * 3 + 1];
                r22 = eerot[2 * 3 + 2];
                px = eetrans[0];
                py = eetrans[1];
                pz = eetrans[2];

                new_r00 = r00;
                new_r01 = ((-1.0) * r01);
                new_r02 = ((-1.0) * r02);
                new_px = (px + (((-0.16) * r02)));
                new_r10 = r10;
                new_r11 = ((-1.0) * r11);
                new_r12 = ((-1.0) * r12);
                new_py = ((((-0.16) * r12)) + py);
                new_r20 = r20;
                new_r21 = ((-1.0) * r21);
                new_r22 = ((-1.0) * r22);
                new_pz = ((-0.245) + (((-0.16) * r22)) + pz);
                r00 = new_r00;
                r01 = new_r01;
                r02 = new_r02;
                r10 = new_r10;
                r11 = new_r11;
                r12 = new_r12;
                r20 = new_r20;
                r21 = new_r21;
                r22 = new_r22;
                px = new_px;
                py = new_py;
                pz = new_pz;
                IkReal x51 = ((1.0) * px);
                IkReal x52 = ((1.0) * pz);
                IkReal x53 = ((1.0) * py);
                pp = ((px * px) + (py * py) + (pz * pz));
                npx = (((px * r00)) + ((py * r10)) + ((pz * r20)));
                npy = (((px * r01)) + ((py * r11)) + ((pz * r21)));
                npz = (((px * r02)) + ((py * r12)) + ((pz * r22)));
                rxp0_0 = ((((-1.0) * r20 * x53)) + ((pz * r10)));
                rxp0_1 = (((px * r20)) + (((-1.0) * r00 * x52)));
                rxp0_2 = ((((-1.0) * r10 * x51)) + ((py * r00)));
                rxp1_0 = ((((-1.0) * r21 * x53)) + ((pz * r11)));
                rxp1_1 = (((px * r21)) + (((-1.0) * r01 * x52)));
                rxp1_2 = ((((-1.0) * r11 * x51)) + ((py * r01)));
                rxp2_0 = (((pz * r12)) + (((-1.0) * r22 * x53)));
                rxp2_1 = (((px * r22)) + (((-1.0) * r02 * x52)));
                rxp2_2 = ((((-1.0) * r12 * x51)) + ((py * r02)));
                IkReal op[8 + 1], zeror[8];
                int numroots;
                IkReal x54 = ((27.0) * npz);
                IkReal x55 = ((25.0) * pp);
                IkReal x56 = ((7.5) * npy);
                IkReal x57 = ((0.3) * r22);
                IkReal x58 = ((2.0) * rxp0_2);
                IkReal x59 = ((0.15) * r20);
                IkReal x60 = ((1.0) * rxp2_2);
                IkReal x61 = (x57 + (((-1.0) * x58)));
                IkReal x62 = (x59 + (((-1.0) * x60)));
                IkReal x63 = ((-4.75) + x55);
                IkReal x64 = (x58 + x57);
                IkReal x65 = ((((-1.0) * x60)) + (((-1.0) * x59)));
                IkReal x66 = (x54 + x56);
                IkReal x67 = (x54 + x63 + (((-1.0) * x56)));
                IkReal x68 = (x56 + x63 + (((-1.0) * x54)));
                IkReal x69 = (x63 + (((-1.0) * x66)));
                IkReal x70 = (x63 + x66);
                IkReal gconst0 = x70;
                IkReal gconst1 = x67;
                IkReal gconst2 = x70;
                IkReal gconst3 = x67;
                IkReal gconst4 = x64;
                IkReal gconst5 = x61;
                IkReal gconst6 = x64;
                IkReal gconst7 = x61;
                IkReal gconst8 = x62;
                IkReal gconst9 = x65;
                IkReal gconst10 = x68;
                IkReal gconst11 = x69;
                IkReal gconst12 = x62;
                IkReal gconst13 = x65;
                IkReal gconst14 = x68;
                IkReal gconst15 = x69;
                IkReal x71 = npx * npx;
                IkReal x72 = r21 * r21;
                IkReal x73 = rxp2_2 * rxp2_2;
                IkReal x74 = r20 * r20;
                IkReal x75 = (gconst14 * npx);
                IkReal x76 = ((1.0) * gconst2);
                IkReal x77 = ((108.0) * npx);
                IkReal x78 = ((60.0) * rxp1_2);
                IkReal x79 = (gconst9 * npx);
                IkReal x80 = (gconst12 * npy);
                IkReal x81 = ((4.5) * r21);
                IkReal x82 = (gconst11 * gconst14);
                IkReal x83 = ((54.0) * gconst13);
                IkReal x84 = (gconst10 * gconst9);
                IkReal x85 = ((1.0) * gconst14);
                IkReal x86 = (gconst0 * rxp2_2);
                IkReal x87 = ((16.2) * r20);
                IkReal x88 = (gconst1 * r20);
                IkReal x89 = (npy * r21);
                IkReal x90 = ((1.0) * gconst15);
                IkReal x91 = (gconst6 * rxp2_2);
                IkReal x92 = ((54.0) * npx);
                IkReal x93 = (gconst3 * gconst6);
                IkReal x94 = ((9.0) * rxp1_2);
                IkReal x95 = (npx * npy);
                IkReal x96 = (gconst11 * gconst12);
                IkReal x97 = (gconst12 * gconst15);
                IkReal x98 = ((0.15) * gconst2);
                IkReal x99 = (gconst1 * gconst2);
                IkReal x100 = (gconst3 * gconst4);
                IkReal x101 = (gconst2 * rxp2_2);
                IkReal x102 = ((0.675) * r21);
                IkReal x103 = ((1.0) * gconst3);
                IkReal x104 = (gconst1 * npx);
                IkReal x105 = (gconst3 * rxp2_2);
                IkReal x106 = (gconst2 * npx);
                IkReal x107 = (gconst10 * gconst5);
                IkReal x108 = (gconst11 * npx);
                IkReal x109 = (gconst2 * r20);
                IkReal x110 = (gconst1 * rxp2_2);
                IkReal x111 = (gconst0 * r20);
                IkReal x112 = ((4.86) * x72);
                IkReal x113 = (gconst0 * x73);
                IkReal x114 = (rxp2_2 * x104);
                IkReal x115 = ((2.4) * r21 * rxp1_2);
                IkReal x116 = ((225.0) * x71);
                IkReal x117 = (gconst8 * x96);
                IkReal x118 = (r20 * x106);
                IkReal x119 = ((0.09) * x72);
                IkReal x120 = (gconst1 * x73);
                IkReal x121 = ((0.15) * gconst3 * x111);
                IkReal x122 = ((0.0225) * gconst2 * x74);
                IkReal x123 = ((243.0) * r21 * x71);
                IkReal x124 = ((33.75) * r20 * x71);
                IkReal x125 = ((0.0225) * gconst3 * x74);
                op[0] = ((((-1.0) * npx * x81 * x96)) + ((gconst13 * gconst8 * x82)) + (((-1.0) * x119 * x82)) + (((-1.0) * gconst9 * x75 * x81)) + (((-1.0) * x117 * x90)) + (((-1.0) * gconst12 * gconst9 * x116)) + (((-1.0) * gconst13 * x84 * x85)) + ((x84 * x97)));
                op[1] = ((((-1.0) * gconst12 * gconst5 * x116)) + (((-1.0) * gconst10 * x79 * x83)) + (((-1.0) * gconst5 * x75 * x81)) + (((-1.0) * x115 * x82)) + (((32.4) * gconst11 * r21 * x80)) + (((-1.0) * gconst6 * x108 * x81)) + ((x117 * x92)) + ((x112 * x75)) + ((x107 * x97)) + (((-1.0) * gconst6 * gconst9 * x116)) + (((-1.0) * npx * x78 * x96)) + ((gconst12 * x123)) + (((32.4) * gconst14 * gconst9 * x89)) + ((gconst8 * x108 * x83)) + (((-1.0) * gconst11 * gconst6 * gconst8 * x90)) + ((gconst8 * x92 * x97)) + (((-54.0) * gconst10 * gconst12 * x79)) + (((54.0) * x79 * x97)) + (((-1.0) * x108 * x112)) + (((-1.0) * gconst9 * x75 * x83)) + (((-1.0) * gconst8 * x75 * x83)) + (((-1.0) * gconst4 * x90 * x96)) + ((gconst15 * gconst6 * x84)) + (((-1.0) * gconst7 * x84 * x85)) + (((3240.0) * x79 * x80)) + (((-1.0) * gconst9 * x123)) + ((gconst7 * gconst8 * x82)) + ((gconst13 * gconst4 * x82)) + (((-1.0) * gconst13 * x107 * x85)) + (((-1.0) * gconst9 * x75 * x78)));
                op[2] = ((((-4.5) * gconst2 * gconst9 * npx * r21)) + ((gconst10 * gconst15 * gconst9 * rxp2_2)) + ((gconst11 * gconst14 * gconst4 * gconst7)) + ((gconst11 * gconst13 * gconst14 * rxp2_2)) + (((-1.0) * gconst1 * gconst12 * gconst15 * gconst8)) + (((-3240.0) * gconst9 * rxp1_2 * (npx * npx))) + (((243.0) * gconst6 * r21 * (npx * npx))) + (((3240.0) * gconst12 * rxp1_2 * (npx * npx))) + (((-0.675) * gconst14 * npx * r20 * r21)) + (((-129.6) * gconst11 * npx * r21 * rxp1_2)) + (((3240.0) * gconst6 * gconst9 * npx * npy)) + (((262.44) * (npx * npx) * (r21 * r21))) + (((-3366.0) * gconst12 * gconst9 * (npx * npx))) + (((-54.0) * gconst10 * gconst13 * gconst5 * npx)) + (((-2916.0) * gconst12 * gconst8 * (npx * npx))) + (((54.0) * gconst11 * gconst6 * gconst8 * npx)) + (((54.0) * gconst11 * gconst12 * gconst4 * npx)) + ((gconst11 * gconst14 * gconst8 * rxp2_2)) + (((-16.0) * gconst11 * gconst14 * (rxp1_2 * rxp1_2))) + (((54.0) * gconst12 * gconst15 * gconst4 * npx)) + ((gconst0 * gconst12 * gconst15 * gconst9)) + (((-2916.0) * gconst13 * gconst9 * (npx * npx))) + ((gconst11 * gconst13 * gconst2 * gconst8)) + (((-0.09) * gconst11 * gconst2 * (r21 * r21))) + (((-0.15) * gconst11 * gconst13 * gconst14 * r20)) + ((gconst1 * gconst13 * gconst14 * gconst8)) + (((-33.75) * gconst12 * r20 * (npx * npx))) + (((-2916.0) * gconst13 * gconst8 * (npx * npx))) + (((0.675) * gconst11 * npx * r20 * r21)) + (((432.0) * gconst11 * gconst12 * npy * rxp1_2)) + (((0.15) * gconst11 * gconst15 * gconst8 * r20)) + (((-54.0) * gconst10 * gconst7 * gconst9 * npx)) + (((32.4) * gconst14 * gconst5 * npy * r21)) + (((-225.0) * gconst9 * rxp2_2 * (npx * npx))) + (((54.0) * gconst11 * gconst7 * gconst8 * npx)) + (((-225.0) * gconst12 * rxp2_2 * (npx * npx))) + (((-4.5) * gconst11 * npx * r21 * rxp2_2)) + (((54.0) * gconst15 * gconst6 * gconst9 * npx)) + (((-0.09) * gconst1 * gconst14 * (r21 * r21))) + (((-0.15) * gconst10 * gconst13 * gconst14 * r20)) + (((-54.0) * gconst14 * gconst7 * gconst8 * npx)) + (((-0.15) * gconst10 * gconst14 * gconst9 * r20)) + ((gconst10 * gconst12 * gconst3 * gconst9)) + ((gconst10 * gconst15 * gconst5 * gconst6)) + (((-225.0) * gconst5 * gconst6 * (npx * npx))) + (((-54.0) * gconst10 * gconst12 * gconst5 * npx)) + (((-1.0) * gconst10 * gconst14 * gconst9 * rxp2_2)) + (((-1749.6) * gconst12 * npx * npy * r21)) + (((-54.0) * gconst14 * gconst7 * gconst9 * npx)) + (((-1.0) * gconst11 * gconst12 * gconst15 * rxp2_2)) + (((129.6) * gconst14 * npx * r21 * rxp1_2)) + ((gconst10 * gconst12 * gconst15 * rxp2_2)) + (((0.15) * gconst11 * gconst14 * gconst8 * r20)) + (((-1.0) * gconst10 * gconst13 * gconst14 * rxp2_2)) + (((54.0) * gconst11 * gconst13 * gconst4 * npx)) + (((-54.0) * gconst10 * gconst6 * gconst9 * npx)) + (((-1.0) * gconst10 * gconst13 * gconst2 * gconst9)) + (((-4.5) * gconst1 * gconst12 * npx * r21)) + (((33.75) * gconst9 * r20 * (npx * npx))) + (((0.15) * gconst10 * gconst12 * gconst15 * r20)) + (((0.18) * gconst11 * gconst14 * (r21 * r21))) + (((-54.0) * gconst13 * gconst14 * gconst5 * npx)) + (((-11664.0) * gconst12 * gconst9 * (npy * npy))) + (((-1.0) * gconst10 * gconst14 * gconst5 * gconst7)) + (((432.0) * gconst14 * gconst9 * npy * rxp1_2)) + (((-1.0) * gconst11 * gconst12 * gconst3 * gconst8)) + (((1749.6) * gconst9 * npx * npy * r21)) + (((-1.0) * gconst11 * gconst15 * gconst8 * rxp2_2)) + (((32.4) * gconst11 * gconst6 * npy * r21)) + (((54.0) * gconst12 * gconst15 * gconst5 * npx)) + (((-4.5) * gconst14 * npx * r21 * rxp2_2)) + (((0.15) * gconst11 * gconst12 * gconst15 * r20)) + (((3240.0) * gconst12 * gconst5 * npx * npy)) + (((-60.0) * gconst14 * gconst5 * npx * rxp1_2)) + (((-54.0) * gconst13 * gconst14 * gconst4 * npx)) + (((-243.0) * gconst5 * r21 * (npx * npx))) + (((-1.0) * gconst0 * gconst13 * gconst14 * gconst9)) + (((-0.15) * gconst10 * gconst15 * gconst9 * r20)) + (((54.0) * gconst15 * gconst6 * gconst8 * npx)) + (((-60.0) * gconst11 * gconst6 * npx * rxp1_2)) + (((-1.0) * gconst11 * gconst15 * gconst4 * gconst6)));
                op[3] = ((((-54.0) * gconst14 * gconst9 * npx * rxp2_2)) + (((-11664.0) * gconst12 * gconst5 * (npy * npy))) + (((-2916.0) * gconst13 * gconst4 * (npx * npx))) + (((1749.6) * gconst5 * npx * npy * r21)) + (((6998.4) * r21 * rxp1_2 * (npx * npx))) + (((3240.0) * gconst5 * gconst6 * npx * npy)) + (((-1.0) * gconst0 * gconst14 * gconst7 * gconst9)) + (((-1.0) * gconst10 * gconst14 * gconst5 * rxp2_2)) + (((-108.0) * gconst13 * gconst14 * npx * rxp2_2)) + (((-1.0) * gconst11 * gconst15 * gconst6 * rxp2_2)) + (((54.0) * gconst11 * gconst4 * gconst6 * npx)) + (((-1.0) * gconst1 * gconst12 * gconst15 * gconst4)) + (((-8.1) * gconst11 * gconst12 * npx * r20)) + (((-4.86) * gconst1 * npx * (r21 * r21))) + (((-54.0) * gconst14 * gconst5 * gconst7 * npx)) + (((23328.0) * gconst9 * npx * npy * rxp1_2)) + ((gconst11 * gconst14 * gconst7 * rxp2_2)) + ((gconst10 * gconst3 * gconst6 * gconst9)) + (((-486.0) * gconst9 * npx * npy * r20)) + (((0.15) * gconst11 * gconst15 * gconst4 * r20)) + (((-1.0) * gconst11 * gconst3 * gconst6 * gconst8)) + (((-8.1) * gconst11 * gconst13 * npx * r20)) + (((-54.0) * gconst0 * gconst12 * gconst9 * npx)) + (((-3240.0) * gconst5 * rxp1_2 * (npx * npx))) + (((0.15) * gconst10 * gconst15 * gconst6 * r20)) + (((432.0) * gconst11 * gconst6 * npy * rxp1_2)) + (((108.0) * gconst12 * gconst15 * npx * rxp2_2)) + (((-54.0) * gconst13 * gconst2 * gconst9 * npx)) + ((gconst10 * gconst15 * gconst5 * rxp2_2)) + (((-32.4) * gconst11 * gconst12 * npy * r21)) + (((0.15) * gconst11 * gconst15 * gconst6 * r20)) + (((4.86) * gconst14 * npy * r20 * r21)) + (((-108.0) * gconst10 * gconst9 * npx * rxp2_2)) + (((-4.86) * gconst11 * npy * r20 * r21)) + (((-2916.0) * gconst6 * gconst8 * (npx * npx))) + ((gconst0 * gconst12 * gconst15 * gconst5)) + (((-3366.0) * gconst12 * gconst5 * (npx * npx))) + (((32.4) * gconst11 * npy * r21 * rxp2_2)) + ((gconst11 * gconst13 * gconst2 * gconst4)) + (((-1.0) * gconst10 * gconst2 * gconst7 * gconst9)) + (((-9.0) * gconst14 * npx * r20 * rxp1_2)) + (((54.0) * gconst15 * gconst9 * npx * rxp2_2)) + (((-8.1) * gconst10 * gconst13 * npx * r20)) + (((-1.0) * gconst10 * gconst14 * gconst7 * rxp2_2)) + ((gconst1 * gconst13 * gconst14 * gconst4)) + (((-23328.0) * gconst12 * npx * npy * rxp1_2)) + (((3240.0) * gconst12 * gconst9 * npx * npy)) + (((-2916.0) * gconst7 * gconst9 * (npx * npx))) + (((54.0) * gconst15 * gconst4 * gconst6 * npx)) + (((33.75) * gconst5 * r20 * (npx * npx))) + (((54.0) * gconst1 * gconst12 * gconst8 * npx)) + ((gconst0 * gconst15 * gconst6 * gconst9)) + (((-0.15) * gconst10 * gconst14 * gconst5 * r20)) + (((-54.0) * gconst10 * gconst5 * gconst6 * npx)) + (((-225.0) * gconst5 * rxp2_2 * (npx * npx))) + (((9.0) * gconst11 * npx * r20 * rxp1_2)) + (((-1.0) * gconst1 * gconst15 * gconst6 * gconst8)) + (((-60.0) * gconst2 * gconst9 * npx * rxp1_2)) + (((54.0) * gconst11 * gconst4 * gconst7 * npx)) + (((-72.9) * r20 * r21 * (npx * npx))) + (((864.0) * gconst14 * npx * (rxp1_2 * rxp1_2))) + (((54.0) * gconst15 * gconst5 * gconst6 * npx)) + (((-0.15) * gconst10 * gconst14 * gconst7 * r20)) + (((-2916.0) * gconst7 * gconst8 * (npx * npx))) + (((-2.4) * gconst11 * gconst2 * r21 * rxp1_2)) + ((gconst11 * gconst14 * gconst4 * rxp2_2)) + (((-32.4) * gconst14 * gconst9 * npy * r21)) + (((-225.0) * gconst6 * rxp2_2 * (npx * npx))) + (((0.15) * gconst11 * gconst14 * gconst4 * r20)) + (((432.0) * gconst14 * gconst5 * npy * rxp1_2)) + (((-60.0) * gconst14 * gconst9 * npx * rxp1_2)) + (((-2916.0) * gconst12 * gconst4 * (npx * npx))) + (((-8.1) * gconst10 * gconst12 * npx * r20)) + (((-2916.0) * gconst13 * gconst5 * (npx * npx))) + (((-8.1) * gconst15 * gconst9 * npx * r20)) + ((gconst10 * gconst12 * gconst3 * gconst5)) + (((-60.0) * gconst11 * npx * rxp1_2 * rxp2_2)) + ((gconst10 * gconst15 * gconst6 * rxp2_2)) + (((-54.0) * gconst10 * gconst13 * npx * rxp2_2)) + (((-8.1) * gconst15 * gconst8 * npx * r20)) + (((108.0) * gconst11 * gconst8 * npx * rxp2_2)) + ((gconst11 * gconst2 * gconst7 * gconst8)) + (((-54.0) * gconst13 * gconst2 * gconst8 * npx)) + (((-0.15) * gconst11 * gconst14 * gconst7 * r20)) + (((-54.0) * gconst14 * gconst8 * npx * rxp2_2)) + (((2.4) * gconst11 * gconst14 * r21 * rxp1_2)) + (((-54.0) * gconst14 * gconst4 * gconst7 * npx)) + (((-0.15) * gconst10 * gconst15 * gconst5 * r20)) + (((3240.0) * gconst12 * npx * npy * rxp2_2)) + (((-3366.0) * gconst6 * gconst9 * (npx * npx))) + (((-60.0) * gconst1 * gconst12 * npx * rxp1_2)) + (((54.0) * gconst1 * gconst13 * gconst8 * npx)) + (((-1749.6) * gconst6 * npx * npy * r21)) + (((32.4) * gconst2 * gconst9 * npy * r21)) + (((-4.5) * gconst1 * gconst6 * npx * r21)) + (((-1.0) * gconst11 * gconst15 * gconst4 * rxp2_2)) + (((-60.0) * gconst14 * npx * rxp1_2 * rxp2_2)) + (((54.0) * gconst12 * gconst3 * gconst9 * npx)) + (((-1.0) * gconst10 * gconst13 * gconst2 * gconst5)) + (((32.4) * gconst14 * npy * r21 * rxp2_2)) + (((-60.0) * gconst11 * gconst12 * npx * rxp1_2)) + (((-8.1) * gconst14 * gconst8 * npx * r20)) + (((-9.72) * gconst14 * npx * (r21 * r21))) + (((-864.0) * gconst11 * npx * (rxp1_2 * rxp1_2))) + (((-54.0) * gconst0 * gconst13 * gconst9 * npx)) + (((4.86) * gconst2 * npx * (r21 * r21))) + (((-54.0) * gconst10 * gconst12 * npx * rxp2_2)) + (((-4.5) * gconst2 * gconst5 * npx * r21)) + (((-2.4) * gconst1 * gconst14 * r21 * rxp1_2)) + (((54.0) * gconst12 * gconst3 * gconst8 * npx)) + (((-1.0) * gconst11 * gconst12 * gconst3 * gconst4)) + (((-8.1) * gconst14 * gconst9 * npx * r20)) + (((32.4) * gconst1 * gconst12 * npy * r21)) + (((54.0) * gconst11 * gconst12 * npx * rxp2_2)) + (((-54.0) * gconst10 * gconst5 * gconst7 * npx)) + (((9.72) * gconst11 * npx * (r21 * r21))) + (((3240.0) * gconst9 * npx * npy * rxp2_2)) + (((486.0) * gconst12 * npx * npy * r20)) + (((-1.0) * gconst0 * gconst13 * gconst14 * gconst5)) + (((-11664.0) * gconst6 * gconst9 * (npy * npy))) + ((gconst1 * gconst14 * gconst7 * gconst8)) + (((3240.0) * gconst6 * rxp1_2 * (npx * npx))) + (((54.0) * gconst15 * gconst8 * npx * rxp2_2)) + (((54.0) * gconst11 * gconst13 * npx * rxp2_2)) + (((-33.75) * gconst6 * r20 * (npx * npx))));
                op[4] = ((((3240.0) * gconst6 * npx * npy * rxp2_2)) + (((1749.6) * gconst9 * r20 * (npy * npy))) + (((432.0) * gconst1 * gconst12 * npy * rxp1_2)) + (((-0.15) * gconst10 * gconst13 * gconst2 * r20)) + (((-0.0225) * gconst10 * gconst14 * (r20 * r20))) + (((-60.0) * gconst2 * gconst5 * npx * rxp1_2)) + ((gconst0 * gconst15 * gconst9 * rxp2_2)) + (((-972.0) * r20 * rxp1_2 * (npx * npx))) + (((-8.1) * gconst11 * gconst6 * npx * r20)) + (((54.0) * gconst1 * gconst13 * gconst4 * npx)) + (((-4.5) * gconst1 * npx * r21 * rxp2_2)) + ((gconst1 * gconst14 * gconst8 * rxp2_2)) + (((-1.0) * gconst0 * gconst14 * gconst9 * rxp2_2)) + (((32.4) * gconst2 * gconst5 * npy * r21)) + (((432.0) * gconst2 * gconst9 * npy * rxp1_2)) + (((-1.0) * gconst10 * gconst2 * gconst9 * rxp2_2)) + (((54.0) * gconst11 * gconst6 * npx * rxp2_2)) + (((-1.0) * gconst10 * gconst2 * gconst5 * gconst7)) + (((32.4) * gconst1 * gconst6 * npy * r21)) + (((-1.0) * gconst1 * gconst12 * gconst3 * gconst8)) + (((-3240.0) * gconst9 * rxp1_2 * (npx * npx))) + (((-2916.0) * gconst4 * gconst7 * (npx * npx))) + (((-8.1) * gconst14 * gconst5 * npx * r20)) + (((108.0) * gconst11 * gconst4 * npx * rxp2_2)) + (((3240.0) * gconst12 * rxp1_2 * (npx * npx))) + (((64.8) * gconst14 * npy * r20 * rxp1_2)) + (((3240.0) * gconst6 * gconst9 * npx * npy)) + (((-54.0) * gconst13 * gconst2 * gconst4 * npx)) + (((-54.0) * gconst2 * gconst7 * gconst8 * npx)) + (((54.0) * gconst1 * gconst12 * gconst4 * npx)) + (((0.15) * gconst0 * gconst12 * gconst15 * r20)) + (((-0.0225) * gconst11 * gconst15 * (r20 * r20))) + ((gconst11 * gconst14 * (rxp2_2 * rxp2_2))) + ((gconst1 * gconst14 * gconst4 * gconst7)) + (((-1.0) * gconst11 * gconst12 * gconst3 * rxp2_2)) + (((-54.0) * gconst10 * gconst6 * npx * rxp2_2)) + (((-1.0) * gconst10 * gconst13 * gconst2 * rxp2_2)) + (((-129.6) * gconst1 * npx * r21 * rxp1_2)) + (((-64.8) * gconst11 * npy * r20 * rxp1_2)) + (((-8.1) * gconst10 * gconst6 * npx * r20)) + (((0.15) * gconst10 * gconst12 * gconst3 * r20)) + ((gconst1 * gconst13 * gconst2 * gconst8)) + (((0.675) * gconst1 * npx * r20 * r21)) + (((-0.0225) * gconst11 * gconst14 * (r20 * r20))) + (((0.15) * gconst11 * gconst2 * gconst8 * r20)) + (((-2916.0) * gconst4 * gconst6 * (npx * npx))) + (((-0.15) * gconst10 * gconst3 * gconst9 * r20)) + (((4.5) * gconst11 * gconst12 * npx * r21)) + ((gconst11 * gconst2 * gconst4 * gconst7)) + (((-0.15) * gconst0 * gconst13 * gconst14 * r20)) + (((-54.0) * gconst0 * gconst6 * gconst9 * npx)) + (((-8.1) * gconst15 * gconst5 * npx * r20)) + (((46656.0) * (npx * npx) * (rxp1_2 * rxp1_2))) + (((129.6) * gconst11 * npx * r21 * rxp1_2)) + (((-8.1) * gconst11 * gconst7 * npx * r20)) + (((-11664.0) * gconst9 * rxp2_2 * (npy * npy))) + (((-0.09) * gconst11 * gconst14 * (r21 * r21))) + ((gconst10 * gconst15 * (rxp2_2 * rxp2_2))) + (((-8.1) * gconst15 * gconst4 * npx * r20)) + (((-11664.0) * gconst5 * gconst6 * (npy * npy))) + ((gconst10 * gconst12 * gconst3 * rxp2_2)) + (((-54.0) * gconst0 * gconst13 * gconst5 * npx)) + (((108.0) * gconst15 * gconst6 * npx * rxp2_2)) + (((-67.5) * gconst12 * r20 * (npx * npx))) + (((-1749.6) * gconst9 * npx * npy * r21)) + (((0.3) * gconst11 * gconst15 * r20 * rxp2_2)) + (((-1.0) * gconst1 * gconst15 * gconst4 * gconst6)) + (((129.6) * gconst2 * npx * r21 * rxp1_2)) + (((0.18) * gconst1 * gconst14 * (r21 * r21))) + ((gconst10 * gconst3 * gconst5 * gconst6)) + (((-54.0) * gconst2 * gconst7 * gconst9 * npx)) + (((-108.0) * gconst10 * gconst5 * npx * rxp2_2)) + ((gconst0 * gconst12 * gconst15 * rxp2_2)) + (((-3366.0) * gconst5 * gconst6 * (npx * npx))) + (((0.15) * gconst11 * gconst12 * gconst3 * r20)) + (((524.88) * npx * npy * r20 * r21)) + (((-0.15) * gconst10 * gconst2 * gconst9 * r20)) + (((-1.0) * gconst11 * gconst3 * gconst8 * rxp2_2)) + (((-54.0) * gconst10 * gconst7 * npx * rxp2_2)) + (((-225.0) * (npx * npx) * (rxp2_2 * rxp2_2))) + (((-54.0) * gconst14 * gconst5 * npx * rxp2_2)) + (((5.0625) * (npx * npx) * (r20 * r20))) + (((3240.0) * gconst5 * npx * npy * rxp2_2)) + (((-1.0) * gconst1 * gconst12 * gconst15 * rxp2_2)) + (((54.0) * gconst15 * gconst5 * npx * rxp2_2)) + (((54.0) * gconst3 * gconst6 * gconst9 * npx)) + (((-4.5) * gconst2 * npx * r21 * rxp2_2)) + (((-8.1) * gconst14 * gconst4 * npx * r20)) + (((-6282.0) * gconst12 * rxp2_2 * (npx * npx))) + (((-129.6) * gconst14 * npx * r21 * rxp1_2)) + (((-32.4) * gconst14 * gconst5 * npy * r21)) + (((-54.0) * gconst0 * gconst12 * gconst5 * npx)) + (((54.0) * gconst12 * gconst3 * gconst4 * npx)) + (((0.15) * gconst1 * gconst14 * gconst8 * r20)) + (((-32.4) * gconst11 * gconst6 * npy * r21)) + (((-0.09) * gconst1 * gconst2 * (r21 * r21))) + (((-1.0) * gconst11 * gconst15 * (rxp2_2 * rxp2_2))) + (((-486.0) * gconst5 * npx * npy * r20)) + (((-0.15) * gconst0 * gconst14 * gconst9 * r20)) + (((-8.1) * gconst10 * gconst7 * npx * r20)) + ((gconst11 * gconst2 * gconst8 * rxp2_2)) + (((-1.0) * gconst11 * gconst3 * gconst4 * gconst6)) + (((54.0) * gconst3 * gconst6 * gconst8 * npx)) + (((-225.0) * gconst12 * gconst9 * (npx * npx))) + (((-0.3) * gconst10 * gconst14 * r20 * rxp2_2)) + (((-524.88) * (npx * npx) * (r21 * r21))) + (((-60.0) * gconst1 * gconst6 * npx * rxp1_2)) + (((54.0) * gconst12 * gconst3 * gconst5 * npx)) + (((432.0) * gconst14 * npy * rxp1_2 * rxp2_2)) + (((-5832.0) * gconst13 * rxp2_2 * (npx * npx))) + (((486.0) * gconst6 * npx * npy * r20)) + (((-0.15) * gconst1 * gconst13 * gconst14 * r20)) + (((-1749.6) * gconst12 * r20 * (npy * npy))) + (((54.0) * gconst11 * gconst7 * npx * rxp2_2)) + (((0.15) * gconst1 * gconst12 * gconst15 * r20)) + ((gconst1 * gconst13 * gconst14 * rxp2_2)) + ((gconst0 * gconst12 * gconst3 * gconst9)) + (((0.18) * gconst11 * gconst2 * (r21 * r21))) + (((0.15) * gconst1 * gconst15 * gconst8 * r20)) + (((54.0) * gconst1 * gconst7 * gconst8 * npx)) + (((-1.0) * gconst0 * gconst13 * gconst2 * gconst9)) + (((67.5) * gconst9 * r20 * (npx * npx))) + (((-1.0) * gconst0 * gconst13 * gconst14 * rxp2_2)) + (((-5832.0) * gconst8 * rxp2_2 * (npx * npx))) + (((-0.15) * gconst11 * gconst13 * gconst2 * r20)) + (((-6282.0) * gconst9 * rxp2_2 * (npx * npx))) + (((-54.0) * gconst0 * gconst7 * gconst9 * npx)) + (((-23328.0) * gconst6 * npx * npy * rxp1_2)) + (((-54.0) * gconst14 * gconst4 * npx * rxp2_2)) + (((-11664.0) * gconst12 * rxp2_2 * (npy * npy))) + (((-0.15) * gconst0 * gconst15 * gconst9 * r20)) + (((-0.0225) * gconst10 * gconst15 * (r20 * r20))) + (((-1.0) * gconst1 * gconst15 * gconst8 * rxp2_2)) + (((0.15) * gconst11 * gconst3 * gconst8 * r20)) + (((-54.0) * gconst13 * gconst2 * gconst5 * npx)) + (((-1.0) * gconst0 * gconst14 * gconst5 * gconst7)) + (((3240.0) * gconst12 * gconst5 * npx * npy)) + (((-60.0) * gconst14 * gconst5 * npx * rxp1_2)) + (((-16.0) * gconst1 * gconst14 * (rxp1_2 * rxp1_2))) + (((432.0) * gconst11 * npy * rxp1_2 * rxp2_2)) + ((gconst11 * gconst13 * gconst2 * rxp2_2)) + (((-108.0) * gconst14 * gconst7 * npx * rxp2_2)) + (((54.0) * gconst1 * gconst6 * gconst8 * npx)) + (((54.0) * gconst15 * gconst4 * npx * rxp2_2)) + (((-0.675) * gconst2 * npx * r20 * r21)) + ((gconst0 * gconst15 * gconst5 * gconst6)) + (((-2916.0) * gconst5 * gconst7 * (npx * npx))) + (((-1.0) * gconst10 * gconst14 * (rxp2_2 * rxp2_2))) + (((23328.0) * gconst5 * npx * npy * rxp1_2)) + (((-16.0) * gconst11 * gconst2 * (rxp1_2 * rxp1_2))) + (((-60.0) * gconst11 * gconst6 * npx * rxp1_2)) + (((1749.6) * gconst12 * npx * npy * r21)) + ((gconst10 * gconst3 * gconst9 * rxp2_2)) + (((4.5) * gconst14 * gconst9 * npx * r21)));
                op[5] = ((((-6282.0) * gconst6 * rxp2_2 * (npx * npx))) + (((-5832.0) * gconst7 * rxp2_2 * (npx * npx))) + (((-8.1) * gconst3 * gconst9 * npx * r20)) + (((9.0) * gconst1 * npx * r20 * rxp1_2)) + ((gconst11 * gconst2 * gconst7 * rxp2_2)) + (((1749.6) * gconst5 * r20 * (npy * npy))) + (((3240.0) * gconst5 * gconst6 * npx * npy)) + (((54.0) * gconst3 * gconst4 * gconst6 * npx)) + (((-1.0) * gconst1 * gconst3 * gconst6 * gconst8)) + (((-32.4) * gconst11 * npy * r21 * rxp2_2)) + (((-0.15) * gconst10 * gconst2 * gconst7 * r20)) + (((-1749.6) * gconst5 * npx * npy * r21)) + (((-11664.0) * gconst5 * rxp2_2 * (npy * npy))) + (((0.15) * gconst1 * gconst14 * gconst4 * r20)) + (((432.0) * gconst1 * gconst6 * npy * rxp1_2)) + (((-9.72) * gconst2 * npx * (r21 * r21))) + (((-0.15) * gconst0 * gconst14 * gconst7 * r20)) + (((-1.0) * gconst1 * gconst15 * gconst4 * rxp2_2)) + (((-108.0) * gconst14 * npx * (rxp2_2 * rxp2_2))) + (((0.15) * gconst10 * gconst3 * gconst6 * r20)) + (((-1.0) * gconst1 * gconst12 * gconst3 * gconst4)) + (((-8.1) * gconst0 * gconst13 * npx * r20)) + (((-486.0) * gconst9 * npx * npy * r20)) + (((-9.0) * gconst2 * npx * r20 * rxp1_2)) + (((32.4) * gconst1 * npy * r21 * rxp2_2)) + (((864.0) * gconst2 * npx * (rxp1_2 * rxp1_2))) + (((-3240.0) * gconst5 * rxp1_2 * (npx * npx))) + (((-54.0) * gconst0 * gconst13 * npx * rxp2_2)) + (((-1.0) * gconst11 * gconst3 * gconst6 * rxp2_2)) + (((54.0) * gconst1 * gconst4 * gconst6 * npx)) + (((-0.15) * gconst1 * gconst14 * gconst7 * r20)) + (((54.0) * gconst3 * gconst8 * npx * rxp2_2)) + (((-8.1) * gconst3 * gconst8 * npx * r20)) + (((-8.1) * gconst1 * gconst12 * npx * r20)) + (((108.0) * gconst11 * npx * (rxp2_2 * rxp2_2))) + (((-32.4) * gconst1 * gconst12 * npy * r21)) + (((54.0) * gconst1 * gconst13 * npx * rxp2_2)) + (((-5832.0) * gconst4 * rxp2_2 * (npx * npx))) + ((gconst1 * gconst13 * gconst2 * gconst4)) + (((0.15) * gconst11 * gconst3 * gconst6 * r20)) + (((2.4) * gconst11 * gconst2 * r21 * rxp1_2)) + (((-16.2) * gconst14 * npx * r20 * rxp2_2)) + ((gconst1 * gconst14 * gconst4 * rxp2_2)) + ((gconst10 * gconst3 * gconst6 * rxp2_2)) + (((-11664.0) * gconst6 * rxp2_2 * (npy * npy))) + (((-1.0) * gconst11 * gconst3 * gconst4 * rxp2_2)) + (((4.86) * gconst14 * npx * (r21 * r21))) + (((2.4) * gconst1 * gconst14 * r21 * rxp1_2)) + (((-225.0) * gconst6 * gconst9 * (npx * npx))) + (((432.0) * gconst2 * gconst5 * npy * rxp1_2)) + (((108.0) * gconst15 * npx * (rxp2_2 * rxp2_2))) + (((-6998.4) * r21 * rxp1_2 * (npx * npx))) + (((-9.0) * gconst14 * npx * r20 * rxp1_2)) + ((gconst0 * gconst3 * gconst6 * gconst9)) + ((gconst1 * gconst14 * gconst7 * rxp2_2)) + (((-54.0) * gconst0 * gconst5 * gconst7 * npx)) + (((-108.0) * gconst0 * gconst9 * npx * rxp2_2)) + (((-1749.6) * gconst6 * r20 * (npy * npy))) + (((-54.0) * gconst2 * gconst9 * npx * rxp2_2)) + (((67.5) * gconst5 * r20 * (npx * npx))) + (((-1.0) * gconst10 * gconst2 * gconst7 * rxp2_2)) + (((4.5) * gconst14 * gconst5 * npx * r21)) + (((9.72) * gconst1 * npx * (r21 * r21))) + (((9.0) * gconst11 * npx * r20 * rxp1_2)) + (((0.15) * gconst1 * gconst15 * gconst6 * r20)) + (((-16.2) * gconst10 * npx * r20 * rxp2_2)) + (((-60.0) * gconst2 * gconst9 * npx * rxp1_2)) + ((gconst1 * gconst2 * gconst7 * gconst8)) + (((-0.15) * gconst11 * gconst2 * gconst7 * r20)) + (((-1.0) * gconst1 * gconst15 * gconst6 * rxp2_2)) + (((-243.0) * gconst12 * r21 * (npx * npx))) + (((-1.0) * gconst10 * gconst2 * gconst5 * rxp2_2)) + (((54.0) * gconst1 * gconst12 * npx * rxp2_2)) + (((-8.1) * gconst0 * gconst12 * npx * r20)) + (((-54.0) * gconst2 * gconst8 * npx * rxp2_2)) + (((54.0) * gconst3 * gconst5 * gconst6 * npx)) + (((-0.15) * gconst10 * gconst2 * gconst5 * r20)) + (((-108.0) * gconst10 * npx * (rxp2_2 * rxp2_2))) + (((-54.0) * gconst0 * gconst12 * npx * rxp2_2)) + (((54.0) * gconst1 * gconst4 * gconst7 * npx)) + (((4.5) * gconst11 * gconst6 * npx * r21)) + (((-225.0) * gconst12 * gconst5 * (npx * npx))) + (((-60.0) * gconst11 * npx * rxp1_2 * rxp2_2)) + (((-864.0) * gconst1 * npx * (rxp1_2 * rxp1_2))) + (((54.0) * gconst3 * gconst9 * npx * rxp2_2)) + (((0.15) * gconst11 * gconst2 * gconst4 * r20)) + ((gconst11 * gconst2 * gconst4 * rxp2_2)) + (((-4.86) * gconst11 * npx * (r21 * r21))) + (((-0.15) * gconst0 * gconst14 * gconst5 * r20)) + (((-32.4) * gconst14 * npy * r21 * rxp2_2)) + (((-108.0) * gconst13 * gconst2 * npx * rxp2_2)) + (((32.4) * gconst2 * npy * r21 * rxp2_2)) + (((-0.15) * gconst0 * gconst15 * gconst5 * r20)) + (((-54.0) * gconst2 * gconst4 * gconst7 * npx)) + (((-1.0) * gconst0 * gconst14 * gconst7 * rxp2_2)) + (((3240.0) * gconst12 * npx * npy * rxp2_2)) + (((-6282.0) * gconst5 * rxp2_2 * (npx * npx))) + (((-60.0) * gconst1 * gconst12 * npx * rxp1_2)) + (((-8.1) * gconst2 * gconst8 * npx * r20)) + (((-8.1) * gconst2 * gconst9 * npx * r20)) + (((-16.2) * gconst11 * npx * r20 * rxp2_2)) + (((-60.0) * gconst14 * npx * rxp1_2 * rxp2_2)) + (((-54.0) * gconst0 * gconst5 * gconst6 * npx)) + (((-4.86) * gconst14 * npy * r20 * r21)) + (((243.0) * gconst9 * r21 * (npx * npx))) + ((gconst0 * gconst12 * gconst3 * gconst5)) + (((-1.0) * gconst0 * gconst13 * gconst2 * gconst5)) + (((-54.0) * gconst2 * gconst5 * gconst7 * npx)) + ((gconst0 * gconst15 * gconst6 * rxp2_2)) + (((6998.4) * npx * npy * r20 * rxp1_2)) + (((-0.15) * gconst10 * gconst3 * gconst5 * r20)) + (((-72.9) * npx * npy * (r20 * r20))) + (((3240.0) * npx * npy * (rxp2_2 * rxp2_2))) + (((0.15) * gconst11 * gconst3 * gconst4 * r20)) + (((-1.0) * gconst0 * gconst14 * gconst5 * rxp2_2)) + (((-60.0) * gconst1 * npx * rxp1_2 * rxp2_2)) + (((-1.0) * gconst0 * gconst2 * gconst7 * gconst9)) + (((3240.0) * gconst9 * npx * npy * rxp2_2)) + (((486.0) * gconst12 * npx * npy * r20)) + (((-32.4) * gconst2 * gconst9 * npy * r21)) + (((-60.0) * gconst2 * npx * rxp1_2 * rxp2_2)) + (((-8.1) * gconst1 * gconst13 * npx * r20)) + (((108.0) * gconst1 * gconst8 * npx * rxp2_2)) + (((0.15) * gconst1 * gconst15 * gconst4 * r20)) + (((3240.0) * gconst6 * rxp1_2 * (npx * npx))) + (((-4.86) * gconst1 * npy * r20 * r21)) + ((gconst0 * gconst15 * gconst5 * rxp2_2)) + (((-2.4) * gconst1 * gconst2 * r21 * rxp1_2)) + (((4.86) * gconst2 * npy * r20 * r21)) + (((4.86) * gconst11 * npy * r20 * r21)) + (((1749.6) * gconst6 * npx * npy * r21)) + (((0.15) * gconst0 * gconst15 * gconst6 * r20)) + (((108.0) * gconst12 * gconst3 * npx * rxp2_2)) + ((gconst10 * gconst3 * gconst5 * rxp2_2)) + (((-67.5) * gconst6 * r20 * (npx * npx))) + (((-16.2) * gconst15 * npx * r20 * rxp2_2)));
                op[6] = ((((-54.0) * gconst2 * gconst4 * npx * rxp2_2)) + (((3240.0) * gconst6 * npx * npy * rxp2_2)) + ((gconst0 * gconst12 * gconst3 * rxp2_2)) + ((gconst1 * gconst2 * gconst4 * gconst7)) + (((243.0) * gconst5 * r21 * (npx * npx))) + (((-60.0) * gconst2 * gconst5 * npx * rxp1_2)) + (((-972.0) * r20 * rxp1_2 * (npx * npx))) + (((-8.1) * gconst2 * gconst4 * npx * r20)) + (((432.0) * gconst1 * npy * rxp1_2 * rxp2_2)) + (((-8.1) * gconst2 * gconst5 * npx * r20)) + (((-0.0225) * gconst0 * gconst14 * (r20 * r20))) + (((0.15) * gconst1 * gconst3 * gconst8 * r20)) + (((-0.0225) * gconst10 * gconst2 * (r20 * r20))) + (((-1.0) * gconst10 * gconst2 * (rxp2_2 * rxp2_2))) + ((gconst1 * gconst2 * gconst8 * rxp2_2)) + (((262.44) * (npx * npx) * (r21 * r21))) + (((-8.1) * gconst3 * gconst5 * npx * r20)) + (((-0.0225) * gconst0 * gconst15 * (r20 * r20))) + (((129.6) * gconst1 * npx * r21 * rxp1_2)) + (((-0.3) * gconst0 * gconst14 * r20 * rxp2_2)) + ((gconst0 * gconst3 * gconst5 * gconst6)) + (((54.0) * gconst3 * gconst4 * npx * rxp2_2)) + (((-1.0) * gconst0 * gconst14 * (rxp2_2 * rxp2_2))) + (((-0.3) * gconst10 * gconst2 * r20 * rxp2_2)) + (((0.15) * gconst1 * gconst12 * gconst3 * r20)) + ((gconst1 * gconst14 * (rxp2_2 * rxp2_2))) + (((-1.0) * gconst1 * gconst3 * gconst4 * gconst6)) + (((0.3) * gconst11 * gconst3 * r20 * rxp2_2)) + (((-0.09) * gconst11 * gconst2 * (r21 * r21))) + (((-8.1) * gconst0 * gconst7 * npx * r20)) + ((gconst0 * gconst3 * gconst9 * rxp2_2)) + (((-33.75) * gconst12 * r20 * (npx * npx))) + (((-54.0) * gconst2 * gconst5 * npx * rxp2_2)) + (((-11664.0) * (npy * npy) * (rxp2_2 * rxp2_2))) + (((-1.0) * gconst11 * gconst3 * (rxp2_2 * rxp2_2))) + ((gconst1 * gconst13 * gconst2 * rxp2_2)) + (((-1.0) * gconst0 * gconst13 * gconst2 * rxp2_2)) + (((4.5) * gconst1 * gconst12 * npx * r21)) + (((-54.0) * gconst0 * gconst6 * npx * rxp2_2)) + (((4.5) * gconst2 * gconst9 * npx * r21)) + (((-0.675) * gconst11 * npx * r20 * r21)) + (((-225.0) * gconst9 * rxp2_2 * (npx * npx))) + (((-108.0) * gconst0 * gconst5 * npx * rxp2_2)) + ((gconst10 * gconst3 * (rxp2_2 * rxp2_2))) + (((432.0) * gconst2 * npy * rxp1_2 * rxp2_2)) + (((54.0) * gconst1 * gconst7 * npx * rxp2_2)) + (((54.0) * gconst3 * gconst5 * npx * rxp2_2)) + (((-16.0) * gconst1 * gconst2 * (rxp1_2 * rxp1_2))) + (((-225.0) * gconst12 * rxp2_2 * (npx * npx))) + (((0.15) * gconst1 * gconst2 * gconst8 * r20)) + (((-0.09) * gconst1 * gconst14 * (r21 * r21))) + (((-1.0) * gconst1 * gconst3 * gconst8 * rxp2_2)) + (((3240.0) * gconst5 * npx * npy * rxp2_2)) + (((-0.15) * gconst1 * gconst13 * gconst2 * r20)) + (((-0.0225) * gconst1 * gconst15 * (r20 * r20))) + (((10.125) * (npx * npx) * (r20 * r20))) + (((0.18) * gconst1 * gconst2 * (r21 * r21))) + (((-225.0) * gconst5 * gconst6 * (npx * npx))) + (((54.0) * gconst1 * gconst6 * npx * rxp2_2)) + (((-486.0) * gconst5 * npx * npy * r20)) + (((-0.15) * gconst0 * gconst13 * gconst2 * r20)) + (((-0.15) * gconst0 * gconst3 * gconst9 * r20)) + (((0.15) * gconst0 * gconst12 * gconst3 * r20)) + (((-60.0) * gconst1 * gconst6 * npx * rxp1_2)) + (((262.44) * (npy * npy) * (r20 * r20))) + (((-243.0) * gconst6 * r21 * (npx * npx))) + (((-1.0) * gconst0 * gconst2 * gconst5 * gconst7)) + (((486.0) * gconst6 * npx * npy * r20)) + (((-524.88) * npx * npy * r20 * r21)) + (((-12114.0) * (npx * npx) * (rxp2_2 * rxp2_2))) + (((-1.0) * gconst0 * gconst2 * gconst9 * rxp2_2)) + ((gconst0 * gconst15 * (rxp2_2 * rxp2_2))) + (((-129.6) * gconst2 * npx * r21 * rxp1_2)) + (((-0.15) * gconst0 * gconst2 * gconst9 * r20)) + (((64.8) * gconst2 * npy * r20 * rxp1_2)) + (((-0.0225) * gconst11 * gconst2 * (r20 * r20))) + (((4.5) * gconst14 * npx * r21 * rxp2_2)) + (((-54.0) * gconst0 * gconst7 * npx * rxp2_2)) + (((33.75) * gconst9 * r20 * (npx * npx))) + (((-0.0225) * gconst1 * gconst14 * (r20 * r20))) + (((-8.1) * gconst1 * gconst6 * npx * r20)) + (((-0.0225) * gconst11 * gconst3 * (r20 * r20))) + (((-32.4) * gconst1 * gconst6 * npy * r21)) + (((108.0) * gconst3 * gconst6 * npx * rxp2_2)) + (((-0.0225) * gconst10 * gconst3 * (r20 * r20))) + ((gconst11 * gconst2 * (rxp2_2 * rxp2_2))) + (((-108.0) * gconst2 * gconst7 * npx * rxp2_2)) + (((0.3) * gconst1 * gconst15 * r20 * rxp2_2)) + (((-1.0) * gconst1 * gconst12 * gconst3 * rxp2_2)) + (((4.5) * gconst11 * npx * r21 * rxp2_2)) + (((-1.0) * gconst1 * gconst15 * (rxp2_2 * rxp2_2))) + (((-8.1) * gconst1 * gconst7 * npx * r20)) + (((108.0) * gconst1 * gconst4 * npx * rxp2_2)) + (((-8.1) * gconst3 * gconst4 * npx * r20)) + (((-32.4) * gconst2 * gconst5 * npy * r21)) + (((0.675) * gconst14 * npx * r20 * r21)) + (((-64.8) * gconst1 * npy * r20 * rxp1_2)) + (((-8.1) * gconst0 * gconst6 * npx * r20)));
                op[7] = ((((4.86) * x88 * x89)) + ((gconst4 * x88 * x98)) + (((-1.0) * npx * x86 * x87)) + (((-1.0) * gconst5 * x111 * x98)) + (((0.15) * x111 * x93)) + (((-32.4) * x110 * x89)) + (((-1.0) * x113 * x77)) + ((gconst6 * x104 * x81)) + (((-4.86) * x109 * x89)) + ((gconst7 * rxp2_2 * x99)) + (((-1.0) * gconst6 * x124)) + ((x106 * x112)) + ((gconst5 * x106 * x81)) + ((x86 * x93)) + ((gconst3 * gconst5 * x86)) + ((gconst5 * x124)) + (((-1.0) * x118 * x94)) + (((-1.0) * gconst5 * rxp2_2 * x116)) + ((x120 * x77)) + (((-1.0) * npx * x101 * x87)) + (((3240.0) * x73 * x95)) + (((-1.0) * gconst2 * x73 * x77)) + (((-1.0) * gconst7 * x76 * x86)) + (((0.15) * x88 * x93)) + ((npx * x88 * x94)) + (((-1.0) * x116 * x91)) + (((-1.0) * gconst7 * x88 * x98)) + (((-1.0) * x100 * x110)) + ((x115 * x99)) + (((-72.9) * x74 * x95)) + (((-32.4) * x101 * x89)) + (((-1.0) * x114 * x78)) + (((-1.0) * gconst1 * x103 * x91)) + (((72.9) * r20 * r21 * x71)) + (((-1.0) * npx * x101 * x78)) + (((-1.0) * gconst5 * x121)) + ((gconst3 * x73 * x77)) + ((gconst4 * rxp2_2 * x99)) + (((-1.0) * gconst5 * x76 * x86)) + (((-1.0) * npx * x105 * x87)) + (((-1.0) * x114 * x87)) + (((-1.0) * x104 * x112)) + (((0.15) * x100 * x88)) + (((-1.0) * gconst7 * x111 * x98)));
                op[8] = ((((-1.0) * gconst0 * x122)) + (((-1.0) * gconst0 * x125)) + (((-1.0) * x113 * x76)) + (((5.0625) * x71 * x74)) + (((-1.0) * gconst1 * x125)) + (((-1.0) * x119 * x99)) + ((x102 * x118)) + ((x73 * x99)) + ((x114 * x81)) + (((-0.0225) * x74 * x99)) + ((npx * x101 * x81)) + (((-1.0) * npx * x102 * x88)) + (((0.3) * x105 * x88)) + (((-0.3) * x109 * x86)) + ((gconst3 * x113)) + (((-1.0) * x103 * x120)) + (((-1.0) * x116 * x73)));
                polyroots8(op, zeror, numroots);
                IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
                int numsolutions = 0;
                for (int ij4 = 0; ij4 < numroots; ++ij4)
                {
                    IkReal htj4 = zeror[ij4];
                    tempj4array[0] = ((2.0) * (atan(htj4)));
                    for (int kj4 = 0; kj4 < 1; ++kj4)
                    {
                        j4array[numsolutions] = tempj4array[kj4];
                        if (j4array[numsolutions] > IKPI)
                        {
                            j4array[numsolutions] -= IK2PI;
                        }
                        else if (j4array[numsolutions] < -IKPI)
                        {
                            j4array[numsolutions] += IK2PI;
                        }
                        sj4array[numsolutions] = IKsin(j4array[numsolutions]);
                        cj4array[numsolutions] = IKcos(j4array[numsolutions]);
                        numsolutions++;
                    }
                }
                bool j4valid[8] = {true, true, true, true, true, true, true, true};
                _nj4 = 8;
                for (int ij4 = 0; ij4 < numsolutions; ++ij4)
                {
                    if (!j4valid[ij4])
                    {
                        continue;
                    }
                    j4 = j4array[ij4];
                    cj4 = cj4array[ij4];
                    sj4 = sj4array[ij4];
                    htj4 = IKtan(j4 / 2);

                    _ij4[0] = ij4;
                    _ij4[1] = -1;
                    for (int iij4 = ij4 + 1; iij4 < numsolutions; ++iij4)
                    {
                        if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                        {
                            j4valid[iij4] = false;
                            _ij4[1] = iij4;
                            break;
                        }
                    }
                    {
                        IkReal j5eval[2];
                        IkReal x126 = cj4 * cj4;
                        IkReal x127 = (npx * rxp1_2);
                        IkReal x128 = (npx * r21);
                        IkReal x129 = (cj4 * pz);
                        IkReal x130 = (npy * r20);
                        IkReal x131 = (npy * rxp0_2);
                        IkReal x132 = (cj4 * npz * r22);
                        IkReal x133 = ((27.0) * x126);
                        IkReal x134 = ((4.05) * cj4 * sj4);
                        IkReal x135 = ((24.0) * x131);
                        IkReal x136 = (npy * rxp1_2 * sj4);
                        IkReal x137 = ((3.6) * cj4 * sj4);
                        IkReal x138 = (npx * rxp0_2 * sj4);
                        j5eval[0] = ((((6.66666666666667) * x138)) + (((6.66666666666667) * x136)) + x132 + (((-1.0) * x128 * x137)) + (((24.0) * x127)) + (((-1.0) * x135)) + ((x130 * x137)) + ((x126 * x135)) + (((-1.0) * x129)) + (((-24.0) * x126 * x127)));
                        j5eval[1] = IKsign(((((27.0) * x127)) + (((-1.0) * x128 * x134)) + (((-27.0) * x131)) + ((x131 * x133)) + ((x130 * x134)) + (((1.125) * x132)) + (((-1.0) * x127 * x133)) + (((-1.125) * x129)) + (((7.5) * x138)) + (((7.5) * x136))));
                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                        {
                            continue; // no branches [j5]
                        }
                        else
                        {
                            {
                                IkReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1] = {false};
                                _nj5 = 1;
                                IkReal x139 = cj4 * cj4;
                                IkReal x140 = (npx * sj4);
                                IkReal x141 = ((1.125) * r22);
                                IkReal x142 = ((4.05) * r22);
                                IkReal x143 = (rxp1_2 * sj4);
                                IkReal x144 = ((25.0) * pp);
                                IkReal x145 = (npy * sj4);
                                IkReal x146 = (cj4 * r21);
                                IkReal x147 = ((3.75) * pp);
                                IkReal x148 = ((7.5) * npy);
                                IkReal x149 = (cj4 * r20);
                                IkReal x150 = (cj4 * rxp2_2);
                                IkReal x151 = (rxp0_2 * sj4);
                                IkReal x152 = ((27.0) * x139);
                                IkReal x153 = ((27.0) * x150);
                                IkReal x154 = ((27.0) * cj4 * npz);
                                IkReal x155 = ((4.05) * npz * x139);
                                CheckValue<IkReal> x156 = IKatan2WithCheck(IkReal(((((4.75) * x151)) + ((x140 * x153)) + (((-0.7125) * x149)) + ((r20 * x155)) + (((-1.0) * x151 * x154)) + (((-1.0) * x144 * x151)) + ((x141 * x145)) + ((x147 * x149)) + ((npx * x142)) + (((-1.0) * npx * x139 * x142)) + ((x148 * x150)))), IkReal(((((-1.0) * npy * x139 * x142)) + ((npy * x142)) + (((4.75) * x143)) + (((-1.0) * x140 * x141)) + (((-1.0) * x143 * x144)) + (((-0.7125) * x146)) + (((-1.0) * x143 * x154)) + ((x145 * x153)) + (((-7.5) * npx * x150)) + ((r21 * x155)) + ((x146 * x147)))), IKFAST_ATAN2_MAGTHRESH);
                                if (!x156.valid)
                                {
                                    continue;
                                }
                                CheckValue<IkReal> x157 = IKPowWithIntegerCheck(IKsign((((npx * rxp1_2 * (((27.0) + (((-1.0) * x152)))))) + (((4.05) * x145 * x149)) + ((cj4 * npz * x141)) + (((7.5) * rxp0_2 * x140)) + (((-1.125) * cj4 * pz)) + (((-4.05) * x140 * x146)) + ((npy * rxp0_2 * (((-27.0) + x152)))) + ((x143 * x148)))), -1);
                                if (!x157.valid)
                                {
                                    continue;
                                }
                                j5array[0] = ((-1.5707963267949) + (x156.value) + (((1.5707963267949) * (x157.value))));
                                sj5array[0] = IKsin(j5array[0]);
                                cj5array[0] = IKcos(j5array[0]);
                                if (j5array[0] > IKPI)
                                {
                                    j5array[0] -= IK2PI;
                                }
                                else if (j5array[0] < -IKPI)
                                {
                                    j5array[0] += IK2PI;
                                }
                                j5valid[0] = true;
                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                {
                                    if (!j5valid[ij5])
                                    {
                                        continue;
                                    }
                                    _ij5[0] = ij5;
                                    _ij5[1] = -1;
                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                    {
                                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                        {
                                            j5valid[iij5] = false;
                                            _ij5[1] = iij5;
                                            break;
                                        }
                                    }
                                    j5 = j5array[ij5];
                                    cj5 = cj5array[ij5];
                                    sj5 = sj5array[ij5];
                                    {
                                        IkReal evalcond[2];
                                        IkReal x158 = IKsin(j5);
                                        IkReal x159 = IKcos(j5);
                                        IkReal x160 = ((0.15) * cj4);
                                        IkReal x161 = (sj4 * x159);
                                        IkReal x162 = (sj4 * x158);
                                        evalcond[0] = (((rxp0_2 * x161)) + (((-1.0) * rxp1_2 * x162)) + (((0.15) * r22 * sj4)) + (((-1.0) * r20 * x159 * x160)) + ((cj4 * rxp2_2)) + ((r21 * x158 * x160)));
                                        evalcond[1] = ((-4.75) + (((-27.0) * npy * x162)) + (((27.0) * cj4 * npz)) + (((27.0) * npx * x161)) + (((25.0) * pp)) + (((7.5) * npx * x158)) + (((7.5) * npy * x159)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                        {
                                            continue;
                                        }
                                    }

                                    {
                                        IkReal j0eval[1];
                                        j0eval[0] = (((cj5 * r11)) + ((r10 * sj5)) + (((6.66666666666667) * py)));
                                        if (IKabs(j0eval[0]) < 0.0000010000000000)
                                        {
                                            {
                                                IkReal j0eval[1];
                                                j0eval[0] = (((cj5 * r10 * sj4)) + (((-1.0) * r11 * sj4 * sj5)) + ((cj4 * r12)));
                                                if (IKabs(j0eval[0]) < 0.0000010000000000)
                                                {
                                                    {
                                                        IkReal j0eval[1];
                                                        IkReal x163 = ((6.66666666666667) * sj4);
                                                        j0eval[0] = ((((6.66666666666667) * cj4 * rxp2_0)) + ((cj5 * rxp0_0 * x163)) + (((-1.0) * cj4 * cj5 * r00)) + ((r02 * sj4)) + (((-1.0) * rxp1_0 * sj5 * x163)) + ((cj4 * r01 * sj5)));
                                                        if (IKabs(j0eval[0]) < 0.0000010000000000)
                                                        {
                                                            {
                                                                IkReal evalcond[1];
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                    IkReal x164 = ((6.66666666666667) * py);
                                                                    IkReal x165 = ((1.0) + (((-1.0) * (r12 * r12))));
                                                                    if ((x165) < -0.00001)
                                                                        continue;
                                                                    IkReal x166 = IKabs(IKsqrt(x165));
                                                                    IkReal x172 = x165;
                                                                    if (IKabs(x172) == 0)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    IkReal x167 = pow(x172, -0.5);
                                                                    IkReal x168 = (r11 * x167);
                                                                    IkReal x169 = (r10 * x167);
                                                                    CheckValue<IkReal> x173 = IKPowWithIntegerCheck(x166, -1);
                                                                    if (!x173.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    IkReal x170 = x173.value;
                                                                    if ((((1.0) + (((-44.4444444444444) * (py * py) * (x170 * x170))))) < -0.00001)
                                                                        continue;
                                                                    IkReal x171 = IKsqrt(((1.0) + (((-44.4444444444444) * (py * py) * (x170 * x170)))));
                                                                    CheckValue<IkReal> x174 = IKatan2WithCheck(IkReal(r11), IkReal(r10), IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x174.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if ((((r11 * r11) + (r10 * r10))) < -0.00001)
                                                                        continue;
                                                                    CheckValue<IkReal> x175 = IKPowWithIntegerCheck(IKabs(IKsqrt(((r11 * r11) + (r10 * r10)))), -1);
                                                                    if (!x175.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if (((x164 * (x175.value))) < -1 - IKFAST_SINCOS_THRESH || ((x164 * (x175.value))) > 1 + IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                    IkReal gconst32 = ((((-1.0) * (x174.value))) + (((-1.0) * (IKasin((x164 * (x175.value)))))));
                                                                    IkReal gconst33 = ((((-1.0) * x164 * x169 * x170)) + (((-1.0) * x168 * x171)));
                                                                    IkReal gconst34 = (((x169 * x171)) + (((-1.0) * x164 * x168 * x170)));
                                                                    CheckValue<IkReal> x176 = IKatan2WithCheck(IkReal(r11), IkReal(r10), IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x176.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if ((((r11 * r11) + (r10 * r10))) < -0.00001)
                                                                        continue;
                                                                    CheckValue<IkReal> x177 = IKPowWithIntegerCheck(IKabs(IKsqrt(((r11 * r11) + (r10 * r10)))), -1);
                                                                    if (!x177.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if ((((6.66666666666667) * py * (x177.value))) < -1 - IKFAST_SINCOS_THRESH || (((6.66666666666667) * py * (x177.value))) > 1 + IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((x176.value) + (IKasin(((6.66666666666667) * py * (x177.value)))) + j5)))), 6.28318530717959)));
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                    {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                            IkReal j0array[2], cj0array[2], sj0array[2];
                                                                            bool j0valid[2] = {false};
                                                                            _nj0 = 2;
                                                                            IkReal x178 = gconst33 * gconst33;
                                                                            IkReal x179 = gconst34 * gconst34;
                                                                            IkReal x180 = (gconst33 * r10);
                                                                            IkReal x181 = ((1.2) * py);
                                                                            IkReal x182 = (gconst33 * r00);
                                                                            IkReal x183 = ((1.2) * px);
                                                                            IkReal x184 = (gconst34 * r01);
                                                                            IkReal x185 = (gconst34 * r11);
                                                                            IkReal x186 = ((0.09) * x178);
                                                                            IkReal x187 = ((0.09) * x179);
                                                                            CheckValue<IkReal> x195 = IKPowWithIntegerCheck(((((0.15) * x185)) + (((0.15) * x180)) + py), -1);
                                                                            if (!x195.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal x188 = x195.value;
                                                                            IkReal x189 = (px * x188);
                                                                            IkReal x190 = ((0.15) * x188);
                                                                            IkReal x191 = (x184 * x190);
                                                                            IkReal x192 = (x182 * x190);
                                                                            IkReal x193 = (x192 + x191 + x189);
                                                                            if ((((((4.0) * (py * py))) + ((x180 * x181)) + ((x186 * (r00 * r00))) + ((x187 * (r01 * r01))) + (((4.0) * (px * px))) + (((0.18) * x182 * x184)) + (((0.18) * x180 * x185)) + ((x186 * (r10 * r10))) + ((x187 * (r11 * r11))) + ((x183 * x184)) + ((x182 * x183)) + ((x181 * x185)))) < -0.00001)
                                                                                continue;
                                                                            IkReal x194 = ((0.5) * x188 * (IKsqrt(((((4.0) * (py * py))) + ((x180 * x181)) + ((x186 * (r00 * r00))) + ((x187 * (r01 * r01))) + (((4.0) * (px * px))) + (((0.18) * x182 * x184)) + (((0.18) * x180 * x185)) + ((x186 * (r10 * r10))) + ((x187 * (r11 * r11))) + ((x183 * x184)) + ((x182 * x183)) + ((x181 * x185))))));
                                                                            j0array[0] = ((2.0) * (atan(((((-1.0) * x193)) + x194))));
                                                                            sj0array[0] = IKsin(j0array[0]);
                                                                            cj0array[0] = IKcos(j0array[0]);
                                                                            j0array[1] = ((-2.0) * (atan((x193 + x194))));
                                                                            sj0array[1] = IKsin(j0array[1]);
                                                                            cj0array[1] = IKcos(j0array[1]);
                                                                            if (j0array[0] > IKPI)
                                                                            {
                                                                                j0array[0] -= IK2PI;
                                                                            }
                                                                            else if (j0array[0] < -IKPI)
                                                                            {
                                                                                j0array[0] += IK2PI;
                                                                            }
                                                                            j0valid[0] = true;
                                                                            if (j0array[1] > IKPI)
                                                                            {
                                                                                j0array[1] -= IK2PI;
                                                                            }
                                                                            else if (j0array[1] < -IKPI)
                                                                            {
                                                                                j0array[1] += IK2PI;
                                                                            }
                                                                            j0valid[1] = true;
                                                                            for (int ij0 = 0; ij0 < 2; ++ij0)
                                                                            {
                                                                                if (!j0valid[ij0])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij0[0] = ij0;
                                                                                _ij0[1] = -1;
                                                                                for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
                                                                                {
                                                                                    if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j0valid[iij0] = false;
                                                                                        _ij0[1] = iij0;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j0 = j0array[ij0];
                                                                                cj0 = cj0array[ij0];
                                                                                sj0 = sj0array[ij0];

                                                                                innerfn(solutions);
                                                                            }
                                                                        }
                                                                    }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        IkReal x2853 = ((6.66666666666667) * py);
                                                                        IkReal x2854 = ((1.0) + (((-1.0) * (r12 * r12))));
                                                                        if ((x2854) < -0.00001)
                                                                            continue;
                                                                        IkReal x2855 = IKabs(IKsqrt(x2854));
                                                                        IkReal x2862 = x2854;
                                                                        if (IKabs(x2862) == 0)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal x2856 = pow(x2862, -0.5);
                                                                        IkReal x2857 = (r11 * x2856);
                                                                        IkReal x2858 = (r10 * x2856);
                                                                        CheckValue<IkReal> x2863 = IKPowWithIntegerCheck(x2855, -1);
                                                                        if (!x2863.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal x2859 = x2863.value;
                                                                        if ((((1.0) + (((-44.4444444444444) * (py * py) * (x2859 * x2859))))) < -0.00001)
                                                                            continue;
                                                                        IkReal x2860 = IKsqrt(((1.0) + (((-44.4444444444444) * (py * py) * (x2859 * x2859)))));
                                                                        IkReal x2861 = ((1.0) * x2860);
                                                                        CheckValue<IkReal> x2864 = IKatan2WithCheck(IkReal(r11), IkReal(r10), IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x2864.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        if ((((r11 * r11) + (r10 * r10))) < -0.00001)
                                                                            continue;
                                                                        CheckValue<IkReal> x2865 = IKPowWithIntegerCheck(IKabs(IKsqrt(((r11 * r11) + (r10 * r10)))), -1);
                                                                        if (!x2865.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        if (((x2853 * (x2865.value))) < -1 - IKFAST_SINCOS_THRESH || ((x2853 * (x2865.value))) > 1 + IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                        IkReal gconst35 = ((3.14159265358979) + (((-1.0) * (x2864.value))) + (IKasin((x2853 * (x2865.value)))));
                                                                        IkReal gconst36 = ((((-1.0) * x2853 * x2858 * x2859)) + ((x2857 * x2861)));
                                                                        IkReal gconst37 = ((((-1.0) * x2853 * x2857 * x2859)) + (((-1.0) * x2858 * x2861)));
                                                                        CheckValue<IkReal> x2866 = IKatan2WithCheck(IkReal(r11), IkReal(r10), IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x2866.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        if ((((r11 * r11) + (r10 * r10))) < -0.00001)
                                                                            continue;
                                                                        CheckValue<IkReal> x2867 = IKPowWithIntegerCheck(IKabs(IKsqrt(((r11 * r11) + (r10 * r10)))), -1);
                                                                        if (!x2867.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        if ((((6.66666666666667) * py * (x2867.value))) < -1 - IKFAST_SINCOS_THRESH || (((6.66666666666667) * py * (x2867.value))) > 1 + IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + (x2866.value) + (((-1.0) * (IKasin(((6.66666666666667) * py * (x2867.value)))))) + j5)))), 6.28318530717959)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                                IkReal j0array[2], cj0array[2], sj0array[2];
                                                                                bool j0valid[2] = {false};
                                                                                _nj0 = 2;
                                                                                IkReal x2868 = gconst36 * gconst36;
                                                                                IkReal x2869 = gconst37 * gconst37;
                                                                                IkReal x2870 = (gconst36 * r10);
                                                                                IkReal x2871 = (gconst36 * r00);
                                                                                IkReal x2872 = ((0.18) * gconst37);
                                                                                IkReal x2873 = ((1.2) * py);
                                                                                IkReal x2874 = ((1.2) * px);
                                                                                IkReal x2875 = (gconst37 * r11);
                                                                                IkReal x2876 = (gconst37 * r01);
                                                                                IkReal x2877 = ((0.09) * x2869);
                                                                                IkReal x2878 = ((0.09) * x2868);
                                                                                CheckValue<IkReal> x2886 = IKPowWithIntegerCheck(((((0.15) * x2870)) + (((0.15) * x2875)) + py), -1);
                                                                                if (!x2886.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x2879 = x2886.value;
                                                                                IkReal x2880 = (px * x2879);
                                                                                IkReal x2881 = ((0.15) * x2879);
                                                                                IkReal x2882 = (x2876 * x2881);
                                                                                IkReal x2883 = (x2871 * x2881);
                                                                                IkReal x2884 = (x2882 + x2883 + x2880);
                                                                                if ((((((4.0) * (py * py))) + ((x2870 * x2873)) + ((x2873 * x2875)) + ((x2874 * x2876)) + ((x2878 * (r00 * r00))) + (((4.0) * (px * px))) + ((x2871 * x2874)) + ((r01 * x2871 * x2872)) + ((x2877 * (r11 * r11))) + ((r11 * x2870 * x2872)) + ((x2878 * (r10 * r10))) + ((x2877 * (r01 * r01))))) < -0.00001)
                                                                                    continue;
                                                                                IkReal x2885 = ((0.5) * x2879 * (IKsqrt(((((4.0) * (py * py))) + ((x2870 * x2873)) + ((x2873 * x2875)) + ((x2874 * x2876)) + ((x2878 * (r00 * r00))) + (((4.0) * (px * px))) + ((x2871 * x2874)) + ((r01 * x2871 * x2872)) + ((x2877 * (r11 * r11))) + ((r11 * x2870 * x2872)) + ((x2878 * (r10 * r10))) + ((x2877 * (r01 * r01)))))));
                                                                                j0array[0] = ((-2.0) * (atan(((((-1.0) * x2885)) + x2884))));
                                                                                sj0array[0] = IKsin(j0array[0]);
                                                                                cj0array[0] = IKcos(j0array[0]);
                                                                                j0array[1] = ((-2.0) * (atan((x2884 + x2885))));
                                                                                sj0array[1] = IKsin(j0array[1]);
                                                                                cj0array[1] = IKcos(j0array[1]);
                                                                                if (j0array[0] > IKPI)
                                                                                {
                                                                                    j0array[0] -= IK2PI;
                                                                                }
                                                                                else if (j0array[0] < -IKPI)
                                                                                {
                                                                                    j0array[0] += IK2PI;
                                                                                }
                                                                                j0valid[0] = true;
                                                                                if (j0array[1] > IKPI)
                                                                                {
                                                                                    j0array[1] -= IK2PI;
                                                                                }
                                                                                else if (j0array[1] < -IKPI)
                                                                                {
                                                                                    j0array[1] += IK2PI;
                                                                                }
                                                                                j0valid[1] = true;
                                                                                for (int ij0 = 0; ij0 < 2; ++ij0)
                                                                                {
                                                                                    if (!j0valid[ij0])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij0[0] = ij0;
                                                                                    _ij0[1] = -1;
                                                                                    for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
                                                                                    {
                                                                                        if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j0valid[iij0] = false;
                                                                                            _ij0[1] = iij0;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j0 = j0array[ij0];
                                                                                    cj0 = cj0array[ij0];
                                                                                    sj0 = sj0array[ij0];

                                                                                    innerfn(solutions);
                                                                                }
                                                                            }
                                                                        }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            if (1)
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                continue; // branch miss [j0]
                                                                            }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j0array[2], cj0array[2], sj0array[2];
                                                                bool j0valid[2] = {false};
                                                                _nj0 = 2;
                                                                CheckValue<IkReal> x2887 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2887.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x2888 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2888.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x2889 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2889.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                if ((((((4.0) * (cj5 * cj5) * (rxp0_1 * rxp0_1))) + (((-8.0) * cj4 * rxp1_1 * rxp2_1 * sj4 * sj5)) + (((-1.2) * cj4 * r10 * rxp0_1 * sj4 * (cj5 * cj5))) + (((4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp1_1 * rxp1_1))) + (((1.2) * cj4 * cj5 * r10 * rxp1_1 * sj4 * sj5)) + (((4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp1_0 * rxp1_0))) + (((-1.2) * cj5 * r12 * rxp0_1 * (cj4 * cj4))) + (((4.0) * (rxp1_0 * rxp1_0))) + (((1.2) * r01 * rxp2_0 * sj5 * (cj4 * cj4))) + (((0.09) * (r12 * r12))) + (((1.2) * cj4 * cj5 * r11 * rxp0_1 * sj4 * sj5)) + (((1.2) * cj4 * r02 * rxp2_0 * sj4)) + (((-8.0) * cj4 * rxp1_0 * rxp2_0 * sj4 * sj5)) + (((4.0) * (cj4 * cj4) * (rxp2_1 * rxp2_1))) + (((8.0) * cj5 * rxp0_0 * rxp1_0 * sj5 * (cj4 * cj4))) + (((1.2) * cj5 * r12 * rxp0_1)) + (((0.09) * (cj4 * cj4) * (r11 * r11))) + (((-8.0) * cj5 * rxp0_1 * rxp1_1 * sj5)) + (((-0.18) * cj5 * r10 * r11 * sj5 * (cj4 * cj4))) + (((-4.0) * (cj5 * cj5) * (rxp1_0 * rxp1_0))) + (((-0.09) * (cj4 * cj4) * (r02 * r02))) + (((-0.09) * (cj4 * cj4) * (cj5 * cj5) * (r01 * r01))) + (((-4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp0_1 * rxp0_1))) + (((1.2) * r02 * rxp1_0 * sj5 * (cj4 * cj4))) + (((1.2) * cj4 * r11 * rxp1_1 * sj4 * (cj5 * cj5))) + (((0.09) * (cj4 * cj4) * (r01 * r01))) + (((1.2) * cj4 * r01 * rxp1_0 * sj4 * (cj5 * cj5))) + (((1.2) * cj5 * r02 * rxp0_0)) + (((-0.09) * (cj4 * cj4) * (cj5 * cj5) * (r11 * r11))) + (((-1.2) * cj4 * r01 * rxp1_0 * sj4)) + (((0.18) * cj4 * r01 * r02 * sj4 * sj5)) + (((-4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp0_0 * rxp0_0))) + (((0.09) * (r02 * r02))) + (((-1.2) * cj5 * r10 * rxp2_1 * (cj4 * cj4))) + (((-0.18) * cj4 * cj5 * r00 * r02 * sj4)) + (((0.18) * cj4 * r11 * r12 * sj4 * sj5)) + (((-1.2) * r12 * rxp1_1 * sj5)) + (((-1.2) * cj4 * r11 * rxp1_1 * sj4)) + (((1.2) * cj4 * r12 * rxp2_1 * sj4)) + (((1.2) * cj4 * cj5 * r00 * rxp1_0 * sj4 * sj5)) + (((1.2) * r12 * rxp1_1 * sj5 * (cj4 * cj4))) + (((1.2) * r11 * rxp2_1 * sj5 * (cj4 * cj4))) + (((-0.18) * cj5 * r00 * r01 * sj5 * (cj4 * cj4))) + (((-8.0) * cj5 * rxp0_0 * rxp1_0 * sj5)) + (((-1.2) * cj5 * r02 * rxp0_0 * (cj4 * cj4))) + (((-0.18) * cj4 * cj5 * r10 * r12 * sj4)) + (((-1.2) * cj5 * r00 * rxp2_0 * (cj4 * cj4))) + (((1.2) * cj4 * cj5 * r01 * rxp0_0 * sj4 * sj5)) + (((4.0) * (rxp1_1 * rxp1_1))) + (((0.09) * (cj4 * cj4) * (cj5 * cj5) * (r00 * r00))) + (((8.0) * cj5 * rxp0_1 * rxp1_1 * sj5 * (cj4 * cj4))) + (((-4.0) * (cj4 * cj4) * (rxp1_0 * rxp1_0))) + (((-4.0) * (cj5 * cj5) * (rxp1_1 * rxp1_1))) + (((-1.2) * r02 * rxp1_0 * sj5)) + (((-0.09) * (cj4 * cj4) * (r12 * r12))) + (((-4.0) * (cj4 * cj4) * (rxp1_1 * rxp1_1))) + (((0.09) * (cj4 * cj4) * (cj5 * cj5) * (r10 * r10))) + (((4.0) * (cj4 * cj4) * (rxp2_0 * rxp2_0))) + (((-1.2) * cj4 * r00 * rxp0_0 * sj4 * (cj5 * cj5))) + (((8.0) * cj4 * cj5 * rxp0_1 * rxp2_1 * sj4)) + (((8.0) * cj4 * cj5 * rxp0_0 * rxp2_0 * sj4)) + (((4.0) * (cj5 * cj5) * (rxp0_0 * rxp0_0))))) < -0.00001)
                                                                    continue;
                                                                CheckValue<IkReal> x2890 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2890.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x2891 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2891.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x2892 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2892.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x2893 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2893.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                j0array[0] = ((2.0) * (atan((((cj4 * rxp2_1 * (x2887.value))) + (((-1.0) * rxp1_1 * sj4 * sj5 * (x2888.value))) + (((0.5) * (x2889.value) * (IKsqrt(((((4.0) * (cj5 * cj5) * (rxp0_1 * rxp0_1))) + (((-8.0) * cj4 * rxp1_1 * rxp2_1 * sj4 * sj5)) + (((-1.2) * cj4 * r10 * rxp0_1 * sj4 * (cj5 * cj5))) + (((4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp1_1 * rxp1_1))) + (((1.2) * cj4 * cj5 * r10 * rxp1_1 * sj4 * sj5)) + (((4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp1_0 * rxp1_0))) + (((-1.2) * cj5 * r12 * rxp0_1 * (cj4 * cj4))) + (((4.0) * (rxp1_0 * rxp1_0))) + (((1.2) * r01 * rxp2_0 * sj5 * (cj4 * cj4))) + (((0.09) * (r12 * r12))) + (((1.2) * cj4 * cj5 * r11 * rxp0_1 * sj4 * sj5)) + (((1.2) * cj4 * r02 * rxp2_0 * sj4)) + (((-8.0) * cj4 * rxp1_0 * rxp2_0 * sj4 * sj5)) + (((4.0) * (cj4 * cj4) * (rxp2_1 * rxp2_1))) + (((8.0) * cj5 * rxp0_0 * rxp1_0 * sj5 * (cj4 * cj4))) + (((1.2) * cj5 * r12 * rxp0_1)) + (((0.09) * (cj4 * cj4) * (r11 * r11))) + (((-8.0) * cj5 * rxp0_1 * rxp1_1 * sj5)) + (((-0.18) * cj5 * r10 * r11 * sj5 * (cj4 * cj4))) + (((-4.0) * (cj5 * cj5) * (rxp1_0 * rxp1_0))) + (((-0.09) * (cj4 * cj4) * (r02 * r02))) + (((-0.09) * (cj4 * cj4) * (cj5 * cj5) * (r01 * r01))) + (((-4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp0_1 * rxp0_1))) + (((1.2) * r02 * rxp1_0 * sj5 * (cj4 * cj4))) + (((1.2) * cj4 * r11 * rxp1_1 * sj4 * (cj5 * cj5))) + (((0.09) * (cj4 * cj4) * (r01 * r01))) + (((1.2) * cj4 * r01 * rxp1_0 * sj4 * (cj5 * cj5))) + (((1.2) * cj5 * r02 * rxp0_0)) + (((-0.09) * (cj4 * cj4) * (cj5 * cj5) * (r11 * r11))) + (((-1.2) * cj4 * r01 * rxp1_0 * sj4)) + (((0.18) * cj4 * r01 * r02 * sj4 * sj5)) + (((-4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp0_0 * rxp0_0))) + (((0.09) * (r02 * r02))) + (((-1.2) * cj5 * r10 * rxp2_1 * (cj4 * cj4))) + (((-0.18) * cj4 * cj5 * r00 * r02 * sj4)) + (((0.18) * cj4 * r11 * r12 * sj4 * sj5)) + (((-1.2) * r12 * rxp1_1 * sj5)) + (((-1.2) * cj4 * r11 * rxp1_1 * sj4)) + (((1.2) * cj4 * r12 * rxp2_1 * sj4)) + (((1.2) * cj4 * cj5 * r00 * rxp1_0 * sj4 * sj5)) + (((1.2) * r12 * rxp1_1 * sj5 * (cj4 * cj4))) + (((1.2) * r11 * rxp2_1 * sj5 * (cj4 * cj4))) + (((-0.18) * cj5 * r00 * r01 * sj5 * (cj4 * cj4))) + (((-8.0) * cj5 * rxp0_0 * rxp1_0 * sj5)) + (((-1.2) * cj5 * r02 * rxp0_0 * (cj4 * cj4))) + (((-0.18) * cj4 * cj5 * r10 * r12 * sj4)) + (((-1.2) * cj5 * r00 * rxp2_0 * (cj4 * cj4))) + (((1.2) * cj4 * cj5 * r01 * rxp0_0 * sj4 * sj5)) + (((4.0) * (rxp1_1 * rxp1_1))) + (((0.09) * (cj4 * cj4) * (cj5 * cj5) * (r00 * r00))) + (((8.0) * cj5 * rxp0_1 * rxp1_1 * sj5 * (cj4 * cj4))) + (((-4.0) * (cj4 * cj4) * (rxp1_0 * rxp1_0))) + (((-4.0) * (cj5 * cj5) * (rxp1_1 * rxp1_1))) + (((-1.2) * r02 * rxp1_0 * sj5)) + (((-0.09) * (cj4 * cj4) * (r12 * r12))) + (((-4.0) * (cj4 * cj4) * (rxp1_1 * rxp1_1))) + (((0.09) * (cj4 * cj4) * (cj5 * cj5) * (r10 * r10))) + (((4.0) * (cj4 * cj4) * (rxp2_0 * rxp2_0))) + (((-1.2) * cj4 * r00 * rxp0_0 * sj4 * (cj5 * cj5))) + (((8.0) * cj4 * cj5 * rxp0_1 * rxp2_1 * sj4)) + (((8.0) * cj4 * cj5 * rxp0_0 * rxp2_0 * sj4)) + (((4.0) * (cj5 * cj5) * (rxp0_0 * rxp0_0)))))))) + (((0.15) * cj4 * r11 * sj5 * (x2890.value))) + ((cj5 * rxp0_1 * sj4 * (x2891.value))) + (((0.15) * r12 * sj4 * (x2892.value))) + (((-0.15) * cj4 * cj5 * r10 * (x2893.value)))))));
                                                                sj0array[0] = IKsin(j0array[0]);
                                                                cj0array[0] = IKcos(j0array[0]);
                                                                CheckValue<IkReal> x2894 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2894.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x2895 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2895.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x2896 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2896.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x2897 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2897.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                if ((((((4.0) * (cj5 * cj5) * (rxp0_1 * rxp0_1))) + (((-8.0) * cj4 * rxp1_1 * rxp2_1 * sj4 * sj5)) + (((-1.2) * cj4 * r10 * rxp0_1 * sj4 * (cj5 * cj5))) + (((4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp1_1 * rxp1_1))) + (((1.2) * cj4 * cj5 * r10 * rxp1_1 * sj4 * sj5)) + (((4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp1_0 * rxp1_0))) + (((-1.2) * cj5 * r12 * rxp0_1 * (cj4 * cj4))) + (((4.0) * (rxp1_0 * rxp1_0))) + (((1.2) * r01 * rxp2_0 * sj5 * (cj4 * cj4))) + (((0.09) * (r12 * r12))) + (((1.2) * cj4 * cj5 * r11 * rxp0_1 * sj4 * sj5)) + (((1.2) * cj4 * r02 * rxp2_0 * sj4)) + (((-8.0) * cj4 * rxp1_0 * rxp2_0 * sj4 * sj5)) + (((4.0) * (cj4 * cj4) * (rxp2_1 * rxp2_1))) + (((8.0) * cj5 * rxp0_0 * rxp1_0 * sj5 * (cj4 * cj4))) + (((1.2) * cj5 * r12 * rxp0_1)) + (((0.09) * (cj4 * cj4) * (r11 * r11))) + (((-8.0) * cj5 * rxp0_1 * rxp1_1 * sj5)) + (((-0.18) * cj5 * r10 * r11 * sj5 * (cj4 * cj4))) + (((-4.0) * (cj5 * cj5) * (rxp1_0 * rxp1_0))) + (((-0.09) * (cj4 * cj4) * (r02 * r02))) + (((-0.09) * (cj4 * cj4) * (cj5 * cj5) * (r01 * r01))) + (((-4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp0_1 * rxp0_1))) + (((1.2) * r02 * rxp1_0 * sj5 * (cj4 * cj4))) + (((1.2) * cj4 * r11 * rxp1_1 * sj4 * (cj5 * cj5))) + (((0.09) * (cj4 * cj4) * (r01 * r01))) + (((1.2) * cj4 * r01 * rxp1_0 * sj4 * (cj5 * cj5))) + (((1.2) * cj5 * r02 * rxp0_0)) + (((-0.09) * (cj4 * cj4) * (cj5 * cj5) * (r11 * r11))) + (((-1.2) * cj4 * r01 * rxp1_0 * sj4)) + (((0.18) * cj4 * r01 * r02 * sj4 * sj5)) + (((-4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp0_0 * rxp0_0))) + (((0.09) * (r02 * r02))) + (((-1.2) * cj5 * r10 * rxp2_1 * (cj4 * cj4))) + (((-0.18) * cj4 * cj5 * r00 * r02 * sj4)) + (((0.18) * cj4 * r11 * r12 * sj4 * sj5)) + (((-1.2) * r12 * rxp1_1 * sj5)) + (((-1.2) * cj4 * r11 * rxp1_1 * sj4)) + (((1.2) * cj4 * r12 * rxp2_1 * sj4)) + (((1.2) * cj4 * cj5 * r00 * rxp1_0 * sj4 * sj5)) + (((1.2) * r12 * rxp1_1 * sj5 * (cj4 * cj4))) + (((1.2) * r11 * rxp2_1 * sj5 * (cj4 * cj4))) + (((-0.18) * cj5 * r00 * r01 * sj5 * (cj4 * cj4))) + (((-8.0) * cj5 * rxp0_0 * rxp1_0 * sj5)) + (((-1.2) * cj5 * r02 * rxp0_0 * (cj4 * cj4))) + (((-0.18) * cj4 * cj5 * r10 * r12 * sj4)) + (((-1.2) * cj5 * r00 * rxp2_0 * (cj4 * cj4))) + (((1.2) * cj4 * cj5 * r01 * rxp0_0 * sj4 * sj5)) + (((4.0) * (rxp1_1 * rxp1_1))) + (((0.09) * (cj4 * cj4) * (cj5 * cj5) * (r00 * r00))) + (((8.0) * cj5 * rxp0_1 * rxp1_1 * sj5 * (cj4 * cj4))) + (((-4.0) * (cj4 * cj4) * (rxp1_0 * rxp1_0))) + (((-4.0) * (cj5 * cj5) * (rxp1_1 * rxp1_1))) + (((-1.2) * r02 * rxp1_0 * sj5)) + (((-0.09) * (cj4 * cj4) * (r12 * r12))) + (((-4.0) * (cj4 * cj4) * (rxp1_1 * rxp1_1))) + (((0.09) * (cj4 * cj4) * (cj5 * cj5) * (r10 * r10))) + (((4.0) * (cj4 * cj4) * (rxp2_0 * rxp2_0))) + (((-1.2) * cj4 * r00 * rxp0_0 * sj4 * (cj5 * cj5))) + (((8.0) * cj4 * cj5 * rxp0_1 * rxp2_1 * sj4)) + (((8.0) * cj4 * cj5 * rxp0_0 * rxp2_0 * sj4)) + (((4.0) * (cj5 * cj5) * (rxp0_0 * rxp0_0))))) < -0.00001)
                                                                    continue;
                                                                CheckValue<IkReal> x2898 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2898.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x2899 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2899.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x2900 = IKPowWithIntegerCheck(((((-0.15) * cj4 * cj5 * r00)) + (((0.15) * cj4 * r01 * sj5)) + (((-1.0) * rxp1_0 * sj4 * sj5)) + (((0.15) * r02 * sj4)) + ((cj5 * rxp0_0 * sj4)) + ((cj4 * rxp2_0))), -1);
                                                                if (!x2900.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                j0array[1] = ((2.0) * (atan((((cj4 * rxp2_1 * (x2894.value))) + (((-1.0) * rxp1_1 * sj4 * sj5 * (x2895.value))) + (((0.15) * cj4 * r11 * sj5 * (x2896.value))) + (((-0.5) * (x2897.value) * (IKsqrt(((((4.0) * (cj5 * cj5) * (rxp0_1 * rxp0_1))) + (((-8.0) * cj4 * rxp1_1 * rxp2_1 * sj4 * sj5)) + (((-1.2) * cj4 * r10 * rxp0_1 * sj4 * (cj5 * cj5))) + (((4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp1_1 * rxp1_1))) + (((1.2) * cj4 * cj5 * r10 * rxp1_1 * sj4 * sj5)) + (((4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp1_0 * rxp1_0))) + (((-1.2) * cj5 * r12 * rxp0_1 * (cj4 * cj4))) + (((4.0) * (rxp1_0 * rxp1_0))) + (((1.2) * r01 * rxp2_0 * sj5 * (cj4 * cj4))) + (((0.09) * (r12 * r12))) + (((1.2) * cj4 * cj5 * r11 * rxp0_1 * sj4 * sj5)) + (((1.2) * cj4 * r02 * rxp2_0 * sj4)) + (((-8.0) * cj4 * rxp1_0 * rxp2_0 * sj4 * sj5)) + (((4.0) * (cj4 * cj4) * (rxp2_1 * rxp2_1))) + (((8.0) * cj5 * rxp0_0 * rxp1_0 * sj5 * (cj4 * cj4))) + (((1.2) * cj5 * r12 * rxp0_1)) + (((0.09) * (cj4 * cj4) * (r11 * r11))) + (((-8.0) * cj5 * rxp0_1 * rxp1_1 * sj5)) + (((-0.18) * cj5 * r10 * r11 * sj5 * (cj4 * cj4))) + (((-4.0) * (cj5 * cj5) * (rxp1_0 * rxp1_0))) + (((-0.09) * (cj4 * cj4) * (r02 * r02))) + (((-0.09) * (cj4 * cj4) * (cj5 * cj5) * (r01 * r01))) + (((-4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp0_1 * rxp0_1))) + (((1.2) * r02 * rxp1_0 * sj5 * (cj4 * cj4))) + (((1.2) * cj4 * r11 * rxp1_1 * sj4 * (cj5 * cj5))) + (((0.09) * (cj4 * cj4) * (r01 * r01))) + (((1.2) * cj4 * r01 * rxp1_0 * sj4 * (cj5 * cj5))) + (((1.2) * cj5 * r02 * rxp0_0)) + (((-0.09) * (cj4 * cj4) * (cj5 * cj5) * (r11 * r11))) + (((-1.2) * cj4 * r01 * rxp1_0 * sj4)) + (((0.18) * cj4 * r01 * r02 * sj4 * sj5)) + (((-4.0) * (cj4 * cj4) * (cj5 * cj5) * (rxp0_0 * rxp0_0))) + (((0.09) * (r02 * r02))) + (((-1.2) * cj5 * r10 * rxp2_1 * (cj4 * cj4))) + (((-0.18) * cj4 * cj5 * r00 * r02 * sj4)) + (((0.18) * cj4 * r11 * r12 * sj4 * sj5)) + (((-1.2) * r12 * rxp1_1 * sj5)) + (((-1.2) * cj4 * r11 * rxp1_1 * sj4)) + (((1.2) * cj4 * r12 * rxp2_1 * sj4)) + (((1.2) * cj4 * cj5 * r00 * rxp1_0 * sj4 * sj5)) + (((1.2) * r12 * rxp1_1 * sj5 * (cj4 * cj4))) + (((1.2) * r11 * rxp2_1 * sj5 * (cj4 * cj4))) + (((-0.18) * cj5 * r00 * r01 * sj5 * (cj4 * cj4))) + (((-8.0) * cj5 * rxp0_0 * rxp1_0 * sj5)) + (((-1.2) * cj5 * r02 * rxp0_0 * (cj4 * cj4))) + (((-0.18) * cj4 * cj5 * r10 * r12 * sj4)) + (((-1.2) * cj5 * r00 * rxp2_0 * (cj4 * cj4))) + (((1.2) * cj4 * cj5 * r01 * rxp0_0 * sj4 * sj5)) + (((4.0) * (rxp1_1 * rxp1_1))) + (((0.09) * (cj4 * cj4) * (cj5 * cj5) * (r00 * r00))) + (((8.0) * cj5 * rxp0_1 * rxp1_1 * sj5 * (cj4 * cj4))) + (((-4.0) * (cj4 * cj4) * (rxp1_0 * rxp1_0))) + (((-4.0) * (cj5 * cj5) * (rxp1_1 * rxp1_1))) + (((-1.2) * r02 * rxp1_0 * sj5)) + (((-0.09) * (cj4 * cj4) * (r12 * r12))) + (((-4.0) * (cj4 * cj4) * (rxp1_1 * rxp1_1))) + (((0.09) * (cj4 * cj4) * (cj5 * cj5) * (r10 * r10))) + (((4.0) * (cj4 * cj4) * (rxp2_0 * rxp2_0))) + (((-1.2) * cj4 * r00 * rxp0_0 * sj4 * (cj5 * cj5))) + (((8.0) * cj4 * cj5 * rxp0_1 * rxp2_1 * sj4)) + (((8.0) * cj4 * cj5 * rxp0_0 * rxp2_0 * sj4)) + (((4.0) * (cj5 * cj5) * (rxp0_0 * rxp0_0)))))))) + ((cj5 * rxp0_1 * sj4 * (x2898.value))) + (((0.15) * r12 * sj4 * (x2899.value))) + (((-0.15) * cj4 * cj5 * r10 * (x2900.value)))))));
                                                                sj0array[1] = IKsin(j0array[1]);
                                                                cj0array[1] = IKcos(j0array[1]);
                                                                if (j0array[0] > IKPI)
                                                                {
                                                                    j0array[0] -= IK2PI;
                                                                }
                                                                else if (j0array[0] < -IKPI)
                                                                {
                                                                    j0array[0] += IK2PI;
                                                                }
                                                                j0valid[0] = true;
                                                                if (j0array[1] > IKPI)
                                                                {
                                                                    j0array[1] -= IK2PI;
                                                                }
                                                                else if (j0array[1] < -IKPI)
                                                                {
                                                                    j0array[1] += IK2PI;
                                                                }
                                                                j0valid[1] = true;
                                                                for (int ij0 = 0; ij0 < 2; ++ij0)
                                                                {
                                                                    if (!j0valid[ij0])
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij0[0] = ij0;
                                                                    _ij0[1] = -1;
                                                                    for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
                                                                    {
                                                                        if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                            j0valid[iij0] = false;
                                                                            _ij0[1] = iij0;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j0 = j0array[ij0];
                                                                    cj0 = cj0array[ij0];
                                                                    sj0 = sj0array[ij0];

                                                                    innerfn(solutions);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j0array[2], cj0array[2], sj0array[2];
                                                        bool j0valid[2] = {false};
                                                        _nj0 = 2;
                                                        IkReal x2901 = cj4 * cj4;
                                                        IkReal x2902 = cj5 * cj5;
                                                        IkReal x2903 = r11 * r11;
                                                        IkReal x2904 = r01 * r01;
                                                        IkReal x2905 = r10 * r10;
                                                        IkReal x2906 = r00 * r00;
                                                        IkReal x2907 = (cj5 * sj4);
                                                        IkReal x2908 = (cj4 * r02);
                                                        IkReal x2909 = (cj4 * r12);
                                                        IkReal x2910 = ((4.0) * x2901);
                                                        IkReal x2911 = ((1.0) * sj4 * sj5);
                                                        IkReal x2912 = (x2902 * x2904);
                                                        IkReal x2913 = (x2902 * x2905);
                                                        IkReal x2914 = (x2902 * x2906);
                                                        IkReal x2915 = ((8.0) * cj4 * sj4 * sj5);
                                                        IkReal x2916 = (x2902 * x2903);
                                                        IkReal x2917 = ((8.0) * cj5 * r10 * r11 * sj5);
                                                        IkReal x2918 = ((8.0) * cj5 * r00 * r01 * sj5);
                                                        CheckValue<IkReal> x2925 = IKPowWithIntegerCheck((((r10 * x2907)) + (((-1.0) * r11 * x2911)) + x2909), -1);
                                                        if (!x2925.valid)
                                                        {
                                                            continue;
                                                        }
                                                        IkReal x2919 = x2925.value;
                                                        IkReal x2920 = (x2908 * x2919);
                                                        CheckValue<IkReal> x2926 = IKPowWithIntegerCheck((((cj5 * r10 * sj4)) + (((-1.0) * r11 * x2911)) + x2909), -1);
                                                        if (!x2926.valid)
                                                        {
                                                            continue;
                                                        }
                                                        IkReal x2921 = (r00 * x2907 * (x2926.value));
                                                        CheckValue<IkReal> x2927 = IKPowWithIntegerCheck((((r10 * x2907)) + (((-1.0) * r11 * sj4 * sj5)) + x2909), -1);
                                                        if (!x2927.valid)
                                                        {
                                                            continue;
                                                        }
                                                        IkReal x2922 = (r01 * x2911 * (x2927.value));
                                                        IkReal x2923 = (x2921 + x2920);
                                                        if ((((((8.0) * r10 * x2907 * x2909)) + (((4.0) * x2914)) + (((4.0) * x2913)) + (((-1.0) * x2904 * x2910)) + ((x2910 * (r02 * r02))) + (((-4.0) * x2916)) + (((-4.0) * x2912)) + (((8.0) * r00 * x2907 * x2908)) + (((4.0) * x2904)) + (((4.0) * x2903)) + (((-1.0) * x2910 * x2914)) + (((-1.0) * x2910 * x2913)) + ((x2910 * (r12 * r12))) + (((-8.0) * r01 * sj4 * sj5 * x2908)) + ((x2910 * x2912)) + ((x2910 * x2916)) + (((-1.0) * x2903 * x2910)) + ((x2901 * x2917)) + ((x2901 * x2918)) + (((-8.0) * r11 * sj4 * sj5 * x2909)) + (((-1.0) * x2918)) + (((-1.0) * x2917)))) < -0.00001)
                                                            continue;
                                                        IkReal x2924 = ((0.5) * x2919 * (IKsqrt(((((8.0) * r10 * x2907 * x2909)) + (((4.0) * x2914)) + (((4.0) * x2913)) + (((-1.0) * x2904 * x2910)) + ((x2910 * (r02 * r02))) + (((-4.0) * x2916)) + (((-4.0) * x2912)) + (((8.0) * r00 * x2907 * x2908)) + (((4.0) * x2904)) + (((4.0) * x2903)) + (((-1.0) * x2910 * x2914)) + (((-1.0) * x2910 * x2913)) + ((x2910 * (r12 * r12))) + (((-8.0) * r01 * sj4 * sj5 * x2908)) + ((x2910 * x2912)) + ((x2910 * x2916)) + (((-1.0) * x2903 * x2910)) + ((x2901 * x2917)) + ((x2901 * x2918)) + (((-8.0) * r11 * sj4 * sj5 * x2909)) + (((-1.0) * x2918)) + (((-1.0) * x2917))))));
                                                        j0array[0] = ((2.0) * (atan(((((-1.0) * x2923)) + x2922 + x2924))));
                                                        sj0array[0] = IKsin(j0array[0]);
                                                        cj0array[0] = IKcos(j0array[0]);
                                                        j0array[1] = ((-2.0) * (atan(((((-1.0) * x2922)) + x2923 + x2924))));
                                                        sj0array[1] = IKsin(j0array[1]);
                                                        cj0array[1] = IKcos(j0array[1]);
                                                        if (j0array[0] > IKPI)
                                                        {
                                                            j0array[0] -= IK2PI;
                                                        }
                                                        else if (j0array[0] < -IKPI)
                                                        {
                                                            j0array[0] += IK2PI;
                                                        }
                                                        j0valid[0] = true;
                                                        if (j0array[1] > IKPI)
                                                        {
                                                            j0array[1] -= IK2PI;
                                                        }
                                                        else if (j0array[1] < -IKPI)
                                                        {
                                                            j0array[1] += IK2PI;
                                                        }
                                                        j0valid[1] = true;
                                                        for (int ij0 = 0; ij0 < 2; ++ij0)
                                                        {
                                                            if (!j0valid[ij0])
                                                            {
                                                                continue;
                                                            }
                                                            _ij0[0] = ij0;
                                                            _ij0[1] = -1;
                                                            for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
                                                            {
                                                                if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                {
                                                                    j0valid[iij0] = false;
                                                                    _ij0[1] = iij0;
                                                                    break;
                                                                }
                                                            }
                                                            j0 = j0array[ij0];
                                                            cj0 = cj0array[ij0];
                                                            sj0 = sj0array[ij0];

                                                            innerfn(solutions);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            {
                                                IkReal j0array[2], cj0array[2], sj0array[2];
                                                bool j0valid[2] = {false};
                                                _nj0 = 2;
                                                IkReal x2928 = cj5 * cj5;
                                                IkReal x2929 = r10 * r10;
                                                IkReal x2930 = r00 * r00;
                                                IkReal x2931 = (cj5 * r11);
                                                IkReal x2932 = ((1.2) * py);
                                                IkReal x2933 = (cj5 * r01);
                                                IkReal x2934 = (r10 * sj5);
                                                IkReal x2935 = ((1.2) * px);
                                                IkReal x2936 = (r00 * sj5);
                                                IkReal x2937 = ((0.09) * x2928);
                                                CheckValue<IkReal> x2945 = IKPowWithIntegerCheck((py + (((0.15) * x2934)) + (((0.15) * x2931))), -1);
                                                if (!x2945.valid)
                                                {
                                                    continue;
                                                }
                                                IkReal x2938 = x2945.value;
                                                IkReal x2939 = (px * x2938);
                                                IkReal x2940 = ((0.15) * x2938);
                                                IkReal x2941 = (x2936 * x2940);
                                                IkReal x2942 = (x2933 * x2940);
                                                IkReal x2943 = (x2939 + x2942 + x2941);
                                                if ((((((-1.0) * x2930 * x2937)) + ((x2937 * (r01 * r01))) + (((4.0) * (py * py))) + (((0.09) * x2930)) + ((x2932 * x2934)) + ((x2937 * (r11 * r11))) + (((-1.0) * x2929 * x2937)) + (((0.09) * x2929)) + (((0.18) * x2931 * x2934)) + (((4.0) * (px * px))) + (((0.18) * x2933 * x2936)) + ((x2935 * x2936)) + ((x2933 * x2935)) + ((x2931 * x2932)))) < -0.00001)
                                                    continue;
                                                IkReal x2944 = ((0.5) * x2938 * (IKsqrt(((((-1.0) * x2930 * x2937)) + ((x2937 * (r01 * r01))) + (((4.0) * (py * py))) + (((0.09) * x2930)) + ((x2932 * x2934)) + ((x2937 * (r11 * r11))) + (((-1.0) * x2929 * x2937)) + (((0.09) * x2929)) + (((0.18) * x2931 * x2934)) + (((4.0) * (px * px))) + (((0.18) * x2933 * x2936)) + ((x2935 * x2936)) + ((x2933 * x2935)) + ((x2931 * x2932))))));
                                                j0array[0] = ((-2.0) * (atan(((((-1.0) * x2944)) + x2943))));
                                                sj0array[0] = IKsin(j0array[0]);
                                                cj0array[0] = IKcos(j0array[0]);
                                                j0array[1] = ((-2.0) * (atan((x2944 + x2943))));
                                                sj0array[1] = IKsin(j0array[1]);
                                                cj0array[1] = IKcos(j0array[1]);
                                                if (j0array[0] > IKPI)
                                                {
                                                    j0array[0] -= IK2PI;
                                                }
                                                else if (j0array[0] < -IKPI)
                                                {
                                                    j0array[0] += IK2PI;
                                                }
                                                j0valid[0] = true;
                                                if (j0array[1] > IKPI)
                                                {
                                                    j0array[1] -= IK2PI;
                                                }
                                                else if (j0array[1] < -IKPI)
                                                {
                                                    j0array[1] += IK2PI;
                                                }
                                                j0valid[1] = true;
                                                for (int ij0 = 0; ij0 < 2; ++ij0)
                                                {
                                                    if (!j0valid[ij0])
                                                    {
                                                        continue;
                                                    }
                                                    _ij0[0] = ij0;
                                                    _ij0[1] = -1;
                                                    for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
                                                    {
                                                        if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                        {
                                                            j0valid[iij0] = false;
                                                            _ij0[1] = iij0;
                                                            break;
                                                        }
                                                    }
                                                    j0 = j0array[ij0];
                                                    cj0 = cj0array[ij0];
                                                    sj0 = sj0array[ij0];

                                                    innerfn(solutions);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return solutions.GetNumSolutions() > 0;
        }
        static inline void polyroots3(IkReal rawcoeffs[3 + 1], IkReal rawroots[3], int &numroots)
        {
            using std::complex;
            if (rawcoeffs[0] == 0)
            {
                // solve with one reduced degree
                polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
                return;
            }
            IKFAST_ASSERT(rawcoeffs[0] != 0);
            const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
            const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
            complex<IkReal> coeffs[3];
            const int maxsteps = 110;
            for (int i = 0; i < 3; ++i)
            {
                coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
            }
            complex<IkReal> roots[3];
            IkReal err[3];
            roots[0] = complex<IkReal>(1, 0);
            roots[1] = complex<IkReal>(0.4, 0.9); // any complex number not a root of unity works
            err[0] = 1.0;
            err[1] = 1.0;
            for (int i = 2; i < 3; ++i)
            {
                roots[i] = roots[i - 1] * roots[1];
                err[i] = 1.0;
            }
            for (int step = 0; step < maxsteps; ++step)
            {
                bool changed = false;
                for (int i = 0; i < 3; ++i)
                {
                    if (err[i] >= tol)
                    {
                        changed = true;
                        // evaluate
                        complex<IkReal> x = roots[i] + coeffs[0];
                        for (int j = 1; j < 3; ++j)
                        {
                            x = roots[i] * x + coeffs[j];
                        }
                        for (int j = 0; j < 3; ++j)
                        {
                            if (i != j)
                            {
                                if (roots[i] != roots[j])
                                {
                                    x /= (roots[i] - roots[j]);
                                }
                            }
                        }
                        roots[i] -= x;
                        err[i] = abs(x);
                    }
                }
                if (!changed)
                {
                    break;
                }
            }

            numroots = 0;
            bool visited[3] = {false};
            for (int i = 0; i < 3; ++i)
            {
                if (!visited[i])
                {
                    // might be a multiple root, in which case it will have more error than the other roots
                    // find any neighboring roots, and take the average
                    complex<IkReal> newroot = roots[i];
                    int n = 1;
                    for (int j = i + 1; j < 3; ++j)
                    {
                        // care about error in real much more than imaginary
                        if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
                        {
                            newroot += roots[j];
                            n += 1;
                            visited[j] = true;
                        }
                    }
                    if (n > 1)
                    {
                        newroot /= n;
                    }
                    // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                    if (IKabs(imag(newroot)) < tolsqrt)
                    {
                        rawroots[numroots++] = real(newroot);
                    }
                }
            }
        }
        static inline void polyroots2(IkReal rawcoeffs[2 + 1], IkReal rawroots[2], int &numroots)
        {
            IkReal det = rawcoeffs[1] * rawcoeffs[1] - 4 * rawcoeffs[0] * rawcoeffs[2];
            if (det < 0)
            {
                numroots = 0;
            }
            else if (det == 0)
            {
                rawroots[0] = -0.5 * rawcoeffs[1] / rawcoeffs[0];
                numroots = 1;
            }
            else
            {
                det = IKsqrt(det);
                rawroots[0] = (-rawcoeffs[1] + det) / (2 * rawcoeffs[0]);
                rawroots[1] = (-rawcoeffs[1] - det) / (2 * rawcoeffs[0]); //rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
                numroots = 2;
            }
        }
        static inline void polyroots5(IkReal rawcoeffs[5 + 1], IkReal rawroots[5], int &numroots)
        {
            using std::complex;
            if (rawcoeffs[0] == 0)
            {
                // solve with one reduced degree
                polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
                return;
            }
            IKFAST_ASSERT(rawcoeffs[0] != 0);
            const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
            const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
            complex<IkReal> coeffs[5];
            const int maxsteps = 110;
            for (int i = 0; i < 5; ++i)
            {
                coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
            }
            complex<IkReal> roots[5];
            IkReal err[5];
            roots[0] = complex<IkReal>(1, 0);
            roots[1] = complex<IkReal>(0.4, 0.9); // any complex number not a root of unity works
            err[0] = 1.0;
            err[1] = 1.0;
            for (int i = 2; i < 5; ++i)
            {
                roots[i] = roots[i - 1] * roots[1];
                err[i] = 1.0;
            }
            for (int step = 0; step < maxsteps; ++step)
            {
                bool changed = false;
                for (int i = 0; i < 5; ++i)
                {
                    if (err[i] >= tol)
                    {
                        changed = true;
                        // evaluate
                        complex<IkReal> x = roots[i] + coeffs[0];
                        for (int j = 1; j < 5; ++j)
                        {
                            x = roots[i] * x + coeffs[j];
                        }
                        for (int j = 0; j < 5; ++j)
                        {
                            if (i != j)
                            {
                                if (roots[i] != roots[j])
                                {
                                    x /= (roots[i] - roots[j]);
                                }
                            }
                        }
                        roots[i] -= x;
                        err[i] = abs(x);
                    }
                }
                if (!changed)
                {
                    break;
                }
            }

            numroots = 0;
            bool visited[5] = {false};
            for (int i = 0; i < 5; ++i)
            {
                if (!visited[i])
                {
                    // might be a multiple root, in which case it will have more error than the other roots
                    // find any neighboring roots, and take the average
                    complex<IkReal> newroot = roots[i];
                    int n = 1;
                    for (int j = i + 1; j < 5; ++j)
                    {
                        // care about error in real much more than imaginary
                        if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
                        {
                            newroot += roots[j];
                            n += 1;
                            visited[j] = true;
                        }
                    }
                    if (n > 1)
                    {
                        newroot /= n;
                    }
                    // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                    if (IKabs(imag(newroot)) < tolsqrt)
                    {
                        rawroots[numroots++] = real(newroot);
                    }
                }
            }
        }
        static inline void polyroots4(IkReal rawcoeffs[4 + 1], IkReal rawroots[4], int &numroots)
        {
            using std::complex;
            if (rawcoeffs[0] == 0)
            {
                // solve with one reduced degree
                polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
                return;
            }
            IKFAST_ASSERT(rawcoeffs[0] != 0);
            const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
            const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
            complex<IkReal> coeffs[4];
            const int maxsteps = 110;
            for (int i = 0; i < 4; ++i)
            {
                coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
            }
            complex<IkReal> roots[4];
            IkReal err[4];
            roots[0] = complex<IkReal>(1, 0);
            roots[1] = complex<IkReal>(0.4, 0.9); // any complex number not a root of unity works
            err[0] = 1.0;
            err[1] = 1.0;
            for (int i = 2; i < 4; ++i)
            {
                roots[i] = roots[i - 1] * roots[1];
                err[i] = 1.0;
            }
            for (int step = 0; step < maxsteps; ++step)
            {
                bool changed = false;
                for (int i = 0; i < 4; ++i)
                {
                    if (err[i] >= tol)
                    {
                        changed = true;
                        // evaluate
                        complex<IkReal> x = roots[i] + coeffs[0];
                        for (int j = 1; j < 4; ++j)
                        {
                            x = roots[i] * x + coeffs[j];
                        }
                        for (int j = 0; j < 4; ++j)
                        {
                            if (i != j)
                            {
                                if (roots[i] != roots[j])
                                {
                                    x /= (roots[i] - roots[j]);
                                }
                            }
                        }
                        roots[i] -= x;
                        err[i] = abs(x);
                    }
                }
                if (!changed)
                {
                    break;
                }
            }

            numroots = 0;
            bool visited[4] = {false};
            for (int i = 0; i < 4; ++i)
            {
                if (!visited[i])
                {
                    // might be a multiple root, in which case it will have more error than the other roots
                    // find any neighboring roots, and take the average
                    complex<IkReal> newroot = roots[i];
                    int n = 1;
                    for (int j = i + 1; j < 4; ++j)
                    {
                        // care about error in real much more than imaginary
                        if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
                        {
                            newroot += roots[j];
                            n += 1;
                            visited[j] = true;
                        }
                    }
                    if (n > 1)
                    {
                        newroot /= n;
                    }
                    // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                    if (IKabs(imag(newroot)) < tolsqrt)
                    {
                        rawroots[numroots++] = real(newroot);
                    }
                }
            }
        }
        static inline void polyroots7(IkReal rawcoeffs[7 + 1], IkReal rawroots[7], int &numroots)
        {
            using std::complex;
            if (rawcoeffs[0] == 0)
            {
                // solve with one reduced degree
                polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
                return;
            }
            IKFAST_ASSERT(rawcoeffs[0] != 0);
            const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
            const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
            complex<IkReal> coeffs[7];
            const int maxsteps = 110;
            for (int i = 0; i < 7; ++i)
            {
                coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
            }
            complex<IkReal> roots[7];
            IkReal err[7];
            roots[0] = complex<IkReal>(1, 0);
            roots[1] = complex<IkReal>(0.4, 0.9); // any complex number not a root of unity works
            err[0] = 1.0;
            err[1] = 1.0;
            for (int i = 2; i < 7; ++i)
            {
                roots[i] = roots[i - 1] * roots[1];
                err[i] = 1.0;
            }
            for (int step = 0; step < maxsteps; ++step)
            {
                bool changed = false;
                for (int i = 0; i < 7; ++i)
                {
                    if (err[i] >= tol)
                    {
                        changed = true;
                        // evaluate
                        complex<IkReal> x = roots[i] + coeffs[0];
                        for (int j = 1; j < 7; ++j)
                        {
                            x = roots[i] * x + coeffs[j];
                        }
                        for (int j = 0; j < 7; ++j)
                        {
                            if (i != j)
                            {
                                if (roots[i] != roots[j])
                                {
                                    x /= (roots[i] - roots[j]);
                                }
                            }
                        }
                        roots[i] -= x;
                        err[i] = abs(x);
                    }
                }
                if (!changed)
                {
                    break;
                }
            }

            numroots = 0;
            bool visited[7] = {false};
            for (int i = 0; i < 7; ++i)
            {
                if (!visited[i])
                {
                    // might be a multiple root, in which case it will have more error than the other roots
                    // find any neighboring roots, and take the average
                    complex<IkReal> newroot = roots[i];
                    int n = 1;
                    for (int j = i + 1; j < 7; ++j)
                    {
                        // care about error in real much more than imaginary
                        if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
                        {
                            newroot += roots[j];
                            n += 1;
                            visited[j] = true;
                        }
                    }
                    if (n > 1)
                    {
                        newroot /= n;
                    }
                    // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                    if (IKabs(imag(newroot)) < tolsqrt)
                    {
                        rawroots[numroots++] = real(newroot);
                    }
                }
            }
        }
        static inline void polyroots6(IkReal rawcoeffs[6 + 1], IkReal rawroots[6], int &numroots)
        {
            using std::complex;
            if (rawcoeffs[0] == 0)
            {
                // solve with one reduced degree
                polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
                return;
            }
            IKFAST_ASSERT(rawcoeffs[0] != 0);
            const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
            const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
            complex<IkReal> coeffs[6];
            const int maxsteps = 110;
            for (int i = 0; i < 6; ++i)
            {
                coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
            }
            complex<IkReal> roots[6];
            IkReal err[6];
            roots[0] = complex<IkReal>(1, 0);
            roots[1] = complex<IkReal>(0.4, 0.9); // any complex number not a root of unity works
            err[0] = 1.0;
            err[1] = 1.0;
            for (int i = 2; i < 6; ++i)
            {
                roots[i] = roots[i - 1] * roots[1];
                err[i] = 1.0;
            }
            for (int step = 0; step < maxsteps; ++step)
            {
                bool changed = false;
                for (int i = 0; i < 6; ++i)
                {
                    if (err[i] >= tol)
                    {
                        changed = true;
                        // evaluate
                        complex<IkReal> x = roots[i] + coeffs[0];
                        for (int j = 1; j < 6; ++j)
                        {
                            x = roots[i] * x + coeffs[j];
                        }
                        for (int j = 0; j < 6; ++j)
                        {
                            if (i != j)
                            {
                                if (roots[i] != roots[j])
                                {
                                    x /= (roots[i] - roots[j]);
                                }
                            }
                        }
                        roots[i] -= x;
                        err[i] = abs(x);
                    }
                }
                if (!changed)
                {
                    break;
                }
            }

            numroots = 0;
            bool visited[6] = {false};
            for (int i = 0; i < 6; ++i)
            {
                if (!visited[i])
                {
                    // might be a multiple root, in which case it will have more error than the other roots
                    // find any neighboring roots, and take the average
                    complex<IkReal> newroot = roots[i];
                    int n = 1;
                    for (int j = i + 1; j < 6; ++j)
                    {
                        // care about error in real much more than imaginary
                        if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
                        {
                            newroot += roots[j];
                            n += 1;
                            visited[j] = true;
                        }
                    }
                    if (n > 1)
                    {
                        newroot /= n;
                    }
                    // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                    if (IKabs(imag(newroot)) < tolsqrt)
                    {
                        rawroots[numroots++] = real(newroot);
                    }
                }
            }
        }
        static inline void polyroots8(IkReal rawcoeffs[8 + 1], IkReal rawroots[8], int &numroots)
        {
            using std::complex;
            if (rawcoeffs[0] == 0)
            {
                // solve with one reduced degree
                polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
                return;
            }
            IKFAST_ASSERT(rawcoeffs[0] != 0);
            const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
            const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
            complex<IkReal> coeffs[8];
            const int maxsteps = 110;
            for (int i = 0; i < 8; ++i)
            {
                coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
            }
            complex<IkReal> roots[8];
            IkReal err[8];
            roots[0] = complex<IkReal>(1, 0);
            roots[1] = complex<IkReal>(0.4, 0.9); // any complex number not a root of unity works
            err[0] = 1.0;
            err[1] = 1.0;
            for (int i = 2; i < 8; ++i)
            {
                roots[i] = roots[i - 1] * roots[1];
                err[i] = 1.0;
            }
            for (int step = 0; step < maxsteps; ++step)
            {
                bool changed = false;
                for (int i = 0; i < 8; ++i)
                {
                    if (err[i] >= tol)
                    {
                        changed = true;
                        // evaluate
                        complex<IkReal> x = roots[i] + coeffs[0];
                        for (int j = 1; j < 8; ++j)
                        {
                            x = roots[i] * x + coeffs[j];
                        }
                        for (int j = 0; j < 8; ++j)
                        {
                            if (i != j)
                            {
                                if (roots[i] != roots[j])
                                {
                                    x /= (roots[i] - roots[j]);
                                }
                            }
                        }
                        roots[i] -= x;
                        err[i] = abs(x);
                    }
                }
                if (!changed)
                {
                    break;
                }
            }

            numroots = 0;
            bool visited[8] = {false};
            for (int i = 0; i < 8; ++i)
            {
                if (!visited[i])
                {
                    // might be a multiple root, in which case it will have more error than the other roots
                    // find any neighboring roots, and take the average
                    complex<IkReal> newroot = roots[i];
                    int n = 1;
                    for (int j = i + 1; j < 8; ++j)
                    {
                        // care about error in real much more than imaginary
                        if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
                        {
                            newroot += roots[j];
                            n += 1;
                            visited[j] = true;
                        }
                    }
                    if (n > 1)
                    {
                        newroot /= n;
                    }
                    // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                    if (IKabs(imag(newroot)) < tolsqrt)
                    {
                        rawroots[numroots++] = real(newroot);
                    }
                }
            }
        }
        inline void innerfn(IkSolutionListBase<IkReal> &solutions)
        {
            for (int fniter = 0; fniter < 1; ++fniter)
            {
                {
                    IkReal j3eval[3];
                    IkReal x196 = ((1.0) * sj4);
                    IkReal x197 = ((1.0) * cj0);
                    IkReal x198 = ((((-1.0) * cj4 * r02)) + ((r01 * sj4 * sj5)) + (((-1.0) * cj5 * r00 * x196)));
                    j3eval[0] = x198;
                    j3eval[1] = ((IKabs((((cj0 * cj4 * cj5 * r20)) + (((-1.0) * cj0 * r22 * x196)) + (((-1.0) * cj4 * r21 * sj5 * x197))))) + (IKabs(((((-1.0) * cj5 * r21 * x197)) + (((-1.0) * r20 * sj5 * x197))))));
                    j3eval[2] = IKsign(x198);
                    if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                    {
                        {
                            IkReal j3eval[3];
                            IkReal x199 = ((1.0) * cj5);
                            IkReal x200 = (r21 * sj0);
                            IkReal x201 = (r20 * sj0);
                            IkReal x202 = ((1.0) * sj5);
                            IkReal x203 = (((r11 * sj4 * sj5)) + (((-1.0) * r10 * sj4 * x199)) + (((-1.0) * cj4 * r12)));
                            j3eval[0] = x203;
                            j3eval[1] = IKsign(x203);
                            j3eval[2] = ((IKabs((((cj4 * cj5 * x201)) + (((-1.0) * cj4 * x200 * x202)) + (((-1.0) * r22 * sj0 * sj4))))) + (IKabs(((((-1.0) * x201 * x202)) + (((-1.0) * x199 * x200))))));
                            if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                            {
                                {
                                    IkReal j3eval[2];
                                    IkReal x204 = (((cj4 * r22)) + ((cj5 * r20 * sj4)) + (((-1.0) * r21 * sj4 * sj5)));
                                    j3eval[0] = x204;
                                    j3eval[1] = IKsign(x204);
                                    if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000)
                                    {
                                        {
                                            IkReal evalcond[1];
                                            bool bgotonextstatement = true;
                                            do
                                            {
                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                {
                                                    bgotonextstatement = false;
                                                    {
                                                        IkReal j3eval[3];
                                                        sj0 = 0;
                                                        cj0 = 1.0;
                                                        j0 = 0;
                                                        IkReal x205 = ((1.0) * sj4);
                                                        IkReal x206 = ((1.0) * r01);
                                                        IkReal x207 = (((cj4 * r22)) + (((-1.0) * r21 * sj5 * x205)) + ((cj5 * r20 * sj4)));
                                                        j3eval[0] = x207;
                                                        j3eval[1] = ((IKabs(((((-1.0) * cj4 * sj5 * x206)) + (((-1.0) * r02 * x205)) + ((cj4 * cj5 * r00))))) + (IKabs(((((-1.0) * r00 * sj5)) + (((-1.0) * cj5 * x206))))));
                                                        j3eval[2] = IKsign(x207);
                                                        if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                        {
                                                            {
                                                                IkReal j3eval[3];
                                                                sj0 = 0;
                                                                cj0 = 1.0;
                                                                j0 = 0;
                                                                IkReal x208 = ((1.0) * cj5);
                                                                IkReal x209 = ((1.0) * cj4);
                                                                IkReal x210 = ((((-1.0) * r02 * x209)) + (((-1.0) * r00 * sj4 * x208)) + ((r01 * sj4 * sj5)));
                                                                j3eval[0] = x210;
                                                                j3eval[1] = ((IKabs(((((-1.0) * r21 * sj5 * x209)) + ((cj4 * cj5 * r20)) + (((-1.0) * r22 * sj4))))) + (IKabs(((((-1.0) * r21 * x208)) + (((-1.0) * r20 * sj5))))));
                                                                j3eval[2] = IKsign(x210);
                                                                if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                                {
                                                                    {
                                                                        IkReal j3eval[3];
                                                                        sj0 = 0;
                                                                        cj0 = 1.0;
                                                                        j0 = 0;
                                                                        IkReal x211 = cj4 * cj4;
                                                                        IkReal x212 = cj5 * cj5;
                                                                        IkReal x213 = r10 * r10;
                                                                        IkReal x214 = r11 * r11;
                                                                        IkReal x215 = r12 * r12;
                                                                        IkReal x216 = (r11 * sj5);
                                                                        IkReal x217 = ((1.0) * r10);
                                                                        IkReal x218 = (r12 * sj4);
                                                                        IkReal x219 = ((1.0) * x213);
                                                                        IkReal x220 = ((2.0) * cj5 * r10);
                                                                        IkReal x221 = (x212 * x214);
                                                                        IkReal x222 = ((((-1.0) * x216 * x220)) + ((x211 * x215)) + (((-2.0) * cj4 * x216 * x218)) + ((x212 * x213)) + (((-1.0) * x215)) + ((x211 * x216 * x220)) + (((-1.0) * x211 * x212 * x219)) + ((cj4 * x218 * x220)) + (((-1.0) * x219)) + (((-1.0) * x211 * x214)) + (((-1.0) * x221)) + ((x211 * x221)));
                                                                        j3eval[0] = x222;
                                                                        j3eval[1] = ((IKabs((((cj4 * x216)) + (((-1.0) * cj4 * cj5 * x217)) + x218))) + (IKabs(((((-1.0) * cj5 * r11)) + (((-1.0) * sj5 * x217))))));
                                                                        j3eval[2] = IKsign(x222);
                                                                        if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                                        {
                                                                            continue; // no branches [j1, j2, j3]
                                                                        }
                                                                        else
                                                                        {
                                                                            {
                                                                                IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                bool j3valid[1] = {false};
                                                                                _nj3 = 1;
                                                                                IkReal x223 = cj4 * cj4;
                                                                                IkReal x224 = cj5 * cj5;
                                                                                IkReal x225 = r10 * r10;
                                                                                IkReal x226 = r11 * r11;
                                                                                IkReal x227 = r12 * r12;
                                                                                IkReal x228 = (r11 * sj5);
                                                                                IkReal x229 = ((1.0) * r10);
                                                                                IkReal x230 = (r12 * sj4);
                                                                                IkReal x231 = ((1.0) * x225);
                                                                                IkReal x232 = ((2.0) * cj5 * r10);
                                                                                IkReal x233 = (x224 * x226);
                                                                                CheckValue<IkReal> x234 = IKPowWithIntegerCheck(IKsign((((x224 * x225)) + ((x223 * x227)) + ((x223 * x228 * x232)) + (((-1.0) * x231)) + (((-2.0) * cj4 * x228 * x230)) + ((cj4 * x230 * x232)) + (((-1.0) * x233)) + (((-1.0) * x228 * x232)) + (((-1.0) * x223 * x224 * x231)) + (((-1.0) * x223 * x226)) + ((x223 * x233)) + (((-1.0) * x227)))), -1);
                                                                                if (!x234.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                CheckValue<IkReal> x235 = IKatan2WithCheck(IkReal((x230 + (((-1.0) * cj4 * cj5 * x229)) + ((cj4 * x228)))), IkReal(((((-1.0) * cj5 * r11)) + (((-1.0) * sj5 * x229)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x235.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                j3array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x234.value))) + (x235.value));
                                                                                sj3array[0] = IKsin(j3array[0]);
                                                                                cj3array[0] = IKcos(j3array[0]);
                                                                                if (j3array[0] > IKPI)
                                                                                {
                                                                                    j3array[0] -= IK2PI;
                                                                                }
                                                                                else if (j3array[0] < -IKPI)
                                                                                {
                                                                                    j3array[0] += IK2PI;
                                                                                }
                                                                                j3valid[0] = true;
                                                                                for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                                {
                                                                                    if (!j3valid[ij3])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij3[0] = ij3;
                                                                                    _ij3[1] = -1;
                                                                                    for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                                    {
                                                                                        if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j3valid[iij3] = false;
                                                                                            _ij3[1] = iij3;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j3 = j3array[ij3];
                                                                                    cj3 = cj3array[ij3];
                                                                                    sj3 = sj3array[ij3];
                                                                                    {
                                                                                        IkReal evalcond[4];
                                                                                        IkReal x236 = IKcos(j3);
                                                                                        IkReal x237 = IKsin(j3);
                                                                                        IkReal x238 = (cj4 * sj5);
                                                                                        IkReal x239 = (r10 * sj5);
                                                                                        IkReal x240 = (cj5 * r11);
                                                                                        IkReal x241 = ((1.0) * x236);
                                                                                        IkReal x242 = (sj4 * x237);
                                                                                        IkReal x243 = ((1.0) * cj4 * cj5 * x237);
                                                                                        evalcond[0] = (((x237 * x239)) + ((r12 * sj4 * x236)) + (((-1.0) * cj4 * cj5 * r10 * x241)) + ((x237 * x240)) + ((r11 * x236 * x238)));
                                                                                        evalcond[1] = ((((-1.0) * r20 * sj5 * x241)) + (((-1.0) * cj5 * r21 * x241)) + ((r22 * x242)) + (((-1.0) * r20 * x243)) + ((r21 * x237 * x238)));
                                                                                        evalcond[2] = (((r02 * x242)) + ((r01 * x237 * x238)) + (((-1.0) * r00 * sj5 * x241)) + (((-1.0) * cj5 * r01 * x241)) + (((-1.0) * r00 * x243)));
                                                                                        evalcond[3] = ((1.0) + (((-1.0) * r10 * x243)) + ((r12 * x242)) + ((r11 * x237 * x238)) + (((-1.0) * x240 * x241)) + (((-1.0) * x239 * x241)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1] = {false};
                                                                                        _nj1 = 1;
                                                                                        IkReal x244 = ((0.76056338028169) * cj4);
                                                                                        IkReal x245 = ((0.211267605633803) * sj5);
                                                                                        IkReal x246 = ((0.211267605633803) * cj5);
                                                                                        IkReal x247 = ((0.76056338028169) * cj5 * sj4);
                                                                                        IkReal x248 = ((0.76056338028169) * sj4 * sj5);
                                                                                        if (IKabs((((r02 * x244)) + (((-1.0) * r01 * x248)) + (((1.40845070422535) * px)) + ((r01 * x246)) + ((r00 * x245)) + ((r00 * x247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22 * x244)) + ((r21 * x246)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x248)) + ((r20 * x247)) + ((r20 * x245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02 * x244)) + (((-1.0) * r01 * x248)) + (((1.40845070422535) * px)) + ((r01 * x246)) + ((r00 * x245)) + ((r00 * x247)))) + IKsqr((((r22 * x244)) + ((r21 * x246)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x248)) + ((r20 * x247)) + ((r20 * x245)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j1array[0] = IKatan2((((r02 * x244)) + (((-1.0) * r01 * x248)) + (((1.40845070422535) * px)) + ((r01 * x246)) + ((r00 * x245)) + ((r00 * x247))), (((r22 * x244)) + ((r21 * x246)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x248)) + ((r20 * x247)) + ((r20 * x245))));
                                                                                        sj1array[0] = IKsin(j1array[0]);
                                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                                        if (j1array[0] > IKPI)
                                                                                        {
                                                                                            j1array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j1array[0] < -IKPI)
                                                                                        {
                                                                                            j1array[0] += IK2PI;
                                                                                        }
                                                                                        j1valid[0] = true;
                                                                                        for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                            if (!j1valid[ij1])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij1[0] = ij1;
                                                                                            _ij1[1] = -1;
                                                                                            for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                            {
                                                                                                if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j1valid[iij1] = false;
                                                                                                    _ij1[1] = iij1;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j1 = j1array[ij1];
                                                                                            cj1 = cj1array[ij1];
                                                                                            sj1 = sj1array[ij1];
                                                                                            {
                                                                                                IkReal evalcond[4];
                                                                                                IkReal x249 = ((1.0) * px);
                                                                                                IkReal x250 = (cj5 * r00);
                                                                                                IkReal x251 = (r01 * sj5);
                                                                                                IkReal x252 = ((0.54) * sj4);
                                                                                                IkReal x253 = ((0.15) * sj5);
                                                                                                IkReal x254 = (r21 * sj5);
                                                                                                IkReal x255 = ((0.54) * cj4);
                                                                                                IkReal x256 = ((0.15) * cj5);
                                                                                                IkReal x257 = (cj5 * r20);
                                                                                                IkReal x258 = ((0.54) * sj3);
                                                                                                IkReal x259 = ((0.71) * (IKsin(j1)));
                                                                                                IkReal x260 = (r00 * x253);
                                                                                                IkReal x261 = (r01 * x256);
                                                                                                IkReal x262 = ((0.71) * (IKcos(j1)));
                                                                                                IkReal x263 = (r21 * x256);
                                                                                                IkReal x264 = (r20 * x253);
                                                                                                IkReal x265 = (cj3 * x255);
                                                                                                IkReal x266 = (x264 + x263);
                                                                                                IkReal x267 = (x261 + x260 + x249);
                                                                                                evalcond[0] = ((((-1.0) * x252 * x254)) + x266 + pz + ((x252 * x257)) + ((r22 * x255)) + (((-1.0) * x262)));
                                                                                                evalcond[1] = ((((-1.0) * x250 * x252)) + (((-1.0) * r02 * x255)) + ((x251 * x252)) + x259 + (((-1.0) * x267)));
                                                                                                evalcond[2] = ((((-1.0) * r20 * sj5 * x258)) + x259 + (((-1.0) * cj3 * r22 * x252)) + ((x257 * x265)) + (((-1.0) * x267)) + (((-1.0) * x254 * x265)) + (((-1.0) * cj5 * r21 * x258)));
                                                                                                evalcond[3] = (((r00 * sj5 * x258)) + ((cj3 * r02 * x252)) + (((-1.0) * x250 * x265)) + ((cj5 * r01 * x258)) + (((-1.0) * pz)) + x262 + (((-1.0) * x266)) + ((x251 * x265)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                IkReal x268 = (sj1 * sj4);
                                                                                                IkReal x269 = (r01 * sj5);
                                                                                                IkReal x270 = (cj4 * r22);
                                                                                                IkReal x271 = ((1.0) * cj1);
                                                                                                IkReal x272 = (cj5 * r00);
                                                                                                IkReal x273 = (cj1 * sj4);
                                                                                                IkReal x274 = (cj4 * r02);
                                                                                                IkReal x275 = (r21 * sj5);
                                                                                                IkReal x276 = (cj5 * r20);
                                                                                                if (IKabs((((x273 * x275)) + (((-1.0) * sj1 * x274)) + (((-1.0) * x268 * x272)) + (((-1.0) * x270 * x271)) + ((x268 * x269)) + (((-1.0) * sj4 * x271 * x276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * x271 * x274)) + (((-1.0) * x268 * x275)) + ((x269 * x273)) + (((-1.0) * sj4 * x271 * x272)) + ((sj1 * x270)) + ((x268 * x276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x273 * x275)) + (((-1.0) * sj1 * x274)) + (((-1.0) * x268 * x272)) + (((-1.0) * x270 * x271)) + ((x268 * x269)) + (((-1.0) * sj4 * x271 * x276)))) + IKsqr(((((-1.0) * x271 * x274)) + (((-1.0) * x268 * x275)) + ((x269 * x273)) + (((-1.0) * sj4 * x271 * x272)) + ((sj1 * x270)) + ((x268 * x276)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j2array[0] = IKatan2((((x273 * x275)) + (((-1.0) * sj1 * x274)) + (((-1.0) * x268 * x272)) + (((-1.0) * x270 * x271)) + ((x268 * x269)) + (((-1.0) * sj4 * x271 * x276))), ((((-1.0) * x271 * x274)) + (((-1.0) * x268 * x275)) + ((x269 * x273)) + (((-1.0) * sj4 * x271 * x272)) + ((sj1 * x270)) + ((x268 * x276))));
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[6];
                                                                                                        IkReal x277 = IKsin(j2);
                                                                                                        IkReal x278 = IKcos(j2);
                                                                                                        IkReal x279 = (cj3 * sj4);
                                                                                                        IkReal x280 = (cj3 * cj4);
                                                                                                        IkReal x281 = (r21 * sj5);
                                                                                                        IkReal x282 = ((1.0) * cj5);
                                                                                                        IkReal x283 = (cj5 * r01);
                                                                                                        IkReal x284 = ((0.15) * sj5);
                                                                                                        IkReal x285 = (r01 * sj5);
                                                                                                        IkReal x286 = (sj3 * sj5);
                                                                                                        IkReal x287 = ((1.0) * cj4);
                                                                                                        IkReal x288 = (cj5 * r21);
                                                                                                        IkReal x289 = (sj1 * x278);
                                                                                                        IkReal x290 = (cj1 * x278);
                                                                                                        IkReal x291 = ((0.54) * x277);
                                                                                                        IkReal x292 = (sj1 * x277);
                                                                                                        IkReal x293 = ((1.0) * cj1 * x277);
                                                                                                        evalcond[0] = ((((-1.0) * x293)) + (((-1.0) * r22 * x287)) + (((-1.0) * r20 * sj4 * x282)) + x289 + ((sj4 * x281)));
                                                                                                        evalcond[1] = ((((-1.0) * x290)) + (((-1.0) * x292)) + (((-1.0) * r02 * x287)) + (((-1.0) * r00 * sj4 * x282)) + ((sj4 * x285)));
                                                                                                        evalcond[2] = ((((-0.15) * x288)) + (((0.71) * cj1)) + ((cj1 * x291)) + (((-1.0) * r20 * x284)) + (((-0.54) * x289)) + (((-1.0) * pz)));
                                                                                                        evalcond[3] = ((((0.54) * x290)) + (((-0.15) * x283)) + ((sj1 * x291)) + (((-1.0) * px)) + (((-1.0) * r00 * x284)) + (((0.71) * sj1)));
                                                                                                        evalcond[4] = ((((-1.0) * r20 * x280 * x282)) + ((r22 * x279)) + ((sj3 * x288)) + x290 + x292 + ((x280 * x281)) + ((r20 * x286)));
                                                                                                        evalcond[5] = (((r00 * x286)) + ((r02 * x279)) + (((-1.0) * x293)) + ((sj3 * x283)) + x289 + (((-1.0) * r00 * x280 * x282)) + ((x280 * x285)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    {
                                                                        IkReal j3array[1], cj3array[1], sj3array[1];
                                                                        bool j3valid[1] = {false};
                                                                        _nj3 = 1;
                                                                        IkReal x294 = ((1.0) * sj4);
                                                                        IkReal x295 = ((1.0) * cj4);
                                                                        CheckValue<IkReal> x296 = IKatan2WithCheck(IkReal(((((-1.0) * cj5 * r21)) + (((-1.0) * r20 * sj5)))), IkReal(((((-1.0) * r21 * sj5 * x295)) + ((cj4 * cj5 * r20)) + (((-1.0) * r22 * x294)))), IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x296.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        CheckValue<IkReal> x297 = IKPowWithIntegerCheck(IKsign(((((-1.0) * cj5 * r00 * x294)) + ((r01 * sj4 * sj5)) + (((-1.0) * r02 * x295)))), -1);
                                                                        if (!x297.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        j3array[0] = ((-1.5707963267949) + (x296.value) + (((1.5707963267949) * (x297.value))));
                                                                        sj3array[0] = IKsin(j3array[0]);
                                                                        cj3array[0] = IKcos(j3array[0]);
                                                                        if (j3array[0] > IKPI)
                                                                        {
                                                                            j3array[0] -= IK2PI;
                                                                        }
                                                                        else if (j3array[0] < -IKPI)
                                                                        {
                                                                            j3array[0] += IK2PI;
                                                                        }
                                                                        j3valid[0] = true;
                                                                        for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                        {
                                                                            if (!j3valid[ij3])
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij3[0] = ij3;
                                                                            _ij3[1] = -1;
                                                                            for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                            {
                                                                                if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                    j3valid[iij3] = false;
                                                                                    _ij3[1] = iij3;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            j3 = j3array[ij3];
                                                                            cj3 = cj3array[ij3];
                                                                            sj3 = sj3array[ij3];
                                                                            {
                                                                                IkReal evalcond[4];
                                                                                IkReal x298 = IKcos(j3);
                                                                                IkReal x299 = IKsin(j3);
                                                                                IkReal x300 = (cj4 * sj5);
                                                                                IkReal x301 = (r10 * sj5);
                                                                                IkReal x302 = (cj5 * r11);
                                                                                IkReal x303 = ((1.0) * x298);
                                                                                IkReal x304 = (sj4 * x299);
                                                                                IkReal x305 = ((1.0) * cj4 * cj5 * x299);
                                                                                evalcond[0] = (((r12 * sj4 * x298)) + (((-1.0) * cj4 * cj5 * r10 * x303)) + ((x299 * x302)) + ((x299 * x301)) + ((r11 * x298 * x300)));
                                                                                evalcond[1] = ((((-1.0) * r20 * sj5 * x303)) + ((r22 * x304)) + (((-1.0) * r20 * x305)) + ((r21 * x299 * x300)) + (((-1.0) * cj5 * r21 * x303)));
                                                                                evalcond[2] = ((((-1.0) * r00 * sj5 * x303)) + (((-1.0) * r00 * x305)) + ((r01 * x299 * x300)) + (((-1.0) * cj5 * r01 * x303)) + ((r02 * x304)));
                                                                                evalcond[3] = ((1.0) + (((-1.0) * x301 * x303)) + (((-1.0) * x302 * x303)) + (((-1.0) * r10 * x305)) + ((r11 * x299 * x300)) + ((r12 * x304)));
                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
                                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                bool j1valid[1] = {false};
                                                                                _nj1 = 1;
                                                                                IkReal x306 = ((0.76056338028169) * cj4);
                                                                                IkReal x307 = ((0.211267605633803) * sj5);
                                                                                IkReal x308 = ((0.211267605633803) * cj5);
                                                                                IkReal x309 = ((0.76056338028169) * cj5 * sj4);
                                                                                IkReal x310 = ((0.76056338028169) * sj4 * sj5);
                                                                                if (IKabs(((((-1.0) * r01 * x310)) + ((r02 * x306)) + (((1.40845070422535) * px)) + ((r01 * x308)) + ((r00 * x307)) + ((r00 * x309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * r21 * x310)) + ((r22 * x306)) + ((r21 * x308)) + ((r20 * x309)) + ((r20 * x307)) + (((1.40845070422535) * pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r01 * x310)) + ((r02 * x306)) + (((1.40845070422535) * px)) + ((r01 * x308)) + ((r00 * x307)) + ((r00 * x309)))) + IKsqr(((((-1.0) * r21 * x310)) + ((r22 * x306)) + ((r21 * x308)) + ((r20 * x309)) + ((r20 * x307)) + (((1.40845070422535) * pz)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j1array[0] = IKatan2(((((-1.0) * r01 * x310)) + ((r02 * x306)) + (((1.40845070422535) * px)) + ((r01 * x308)) + ((r00 * x307)) + ((r00 * x309))), ((((-1.0) * r21 * x310)) + ((r22 * x306)) + ((r21 * x308)) + ((r20 * x309)) + ((r20 * x307)) + (((1.40845070422535) * pz))));
                                                                                sj1array[0] = IKsin(j1array[0]);
                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                if (j1array[0] > IKPI)
                                                                                {
                                                                                    j1array[0] -= IK2PI;
                                                                                }
                                                                                else if (j1array[0] < -IKPI)
                                                                                {
                                                                                    j1array[0] += IK2PI;
                                                                                }
                                                                                j1valid[0] = true;
                                                                                for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                {
                                                                                    if (!j1valid[ij1])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij1[0] = ij1;
                                                                                    _ij1[1] = -1;
                                                                                    for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                    {
                                                                                        if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j1valid[iij1] = false;
                                                                                            _ij1[1] = iij1;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j1 = j1array[ij1];
                                                                                    cj1 = cj1array[ij1];
                                                                                    sj1 = sj1array[ij1];
                                                                                    {
                                                                                        IkReal evalcond[4];
                                                                                        IkReal x311 = ((1.0) * px);
                                                                                        IkReal x312 = (cj5 * r00);
                                                                                        IkReal x313 = (r01 * sj5);
                                                                                        IkReal x314 = ((0.54) * sj4);
                                                                                        IkReal x315 = ((0.15) * sj5);
                                                                                        IkReal x316 = (r21 * sj5);
                                                                                        IkReal x317 = ((0.54) * cj4);
                                                                                        IkReal x318 = ((0.15) * cj5);
                                                                                        IkReal x319 = (cj5 * r20);
                                                                                        IkReal x320 = ((0.54) * sj3);
                                                                                        IkReal x321 = ((0.71) * (IKsin(j1)));
                                                                                        IkReal x322 = (r00 * x315);
                                                                                        IkReal x323 = (r01 * x318);
                                                                                        IkReal x324 = ((0.71) * (IKcos(j1)));
                                                                                        IkReal x325 = (r21 * x318);
                                                                                        IkReal x326 = (r20 * x315);
                                                                                        IkReal x327 = (cj3 * x317);
                                                                                        IkReal x328 = (x325 + x326);
                                                                                        IkReal x329 = (x322 + x323 + x311);
                                                                                        evalcond[0] = ((((-1.0) * x324)) + x328 + pz + (((-1.0) * x314 * x316)) + ((x314 * x319)) + ((r22 * x317)));
                                                                                        evalcond[1] = ((((-1.0) * r02 * x317)) + (((-1.0) * x312 * x314)) + (((-1.0) * x329)) + x321 + ((x313 * x314)));
                                                                                        evalcond[2] = ((((-1.0) * cj3 * r22 * x314)) + (((-1.0) * x329)) + x321 + (((-1.0) * r20 * sj5 * x320)) + (((-1.0) * x316 * x327)) + ((x319 * x327)) + (((-1.0) * cj5 * r21 * x320)));
                                                                                        evalcond[3] = (((x313 * x327)) + (((-1.0) * x328)) + ((r00 * sj5 * x320)) + x324 + (((-1.0) * pz)) + ((cj3 * r02 * x314)) + ((cj5 * r01 * x320)) + (((-1.0) * x312 * x327)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                        bool j2valid[1] = {false};
                                                                                        _nj2 = 1;
                                                                                        IkReal x330 = (sj1 * sj4);
                                                                                        IkReal x331 = (r01 * sj5);
                                                                                        IkReal x332 = (cj4 * r22);
                                                                                        IkReal x333 = ((1.0) * cj1);
                                                                                        IkReal x334 = (cj5 * r00);
                                                                                        IkReal x335 = (cj1 * sj4);
                                                                                        IkReal x336 = (cj4 * r02);
                                                                                        IkReal x337 = (r21 * sj5);
                                                                                        IkReal x338 = (cj5 * r20);
                                                                                        if (IKabs((((x335 * x337)) + (((-1.0) * sj1 * x336)) + ((x330 * x331)) + (((-1.0) * sj4 * x333 * x338)) + (((-1.0) * x330 * x334)) + (((-1.0) * x332 * x333)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x330 * x338)) + (((-1.0) * sj4 * x333 * x334)) + (((-1.0) * x330 * x337)) + (((-1.0) * x333 * x336)) + ((x331 * x335)) + ((sj1 * x332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x335 * x337)) + (((-1.0) * sj1 * x336)) + ((x330 * x331)) + (((-1.0) * sj4 * x333 * x338)) + (((-1.0) * x330 * x334)) + (((-1.0) * x332 * x333)))) + IKsqr((((x330 * x338)) + (((-1.0) * sj4 * x333 * x334)) + (((-1.0) * x330 * x337)) + (((-1.0) * x333 * x336)) + ((x331 * x335)) + ((sj1 * x332)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j2array[0] = IKatan2((((x335 * x337)) + (((-1.0) * sj1 * x336)) + ((x330 * x331)) + (((-1.0) * sj4 * x333 * x338)) + (((-1.0) * x330 * x334)) + (((-1.0) * x332 * x333))), (((x330 * x338)) + (((-1.0) * sj4 * x333 * x334)) + (((-1.0) * x330 * x337)) + (((-1.0) * x333 * x336)) + ((x331 * x335)) + ((sj1 * x332))));
                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                        if (j2array[0] > IKPI)
                                                                                        {
                                                                                            j2array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j2array[0] < -IKPI)
                                                                                        {
                                                                                            j2array[0] += IK2PI;
                                                                                        }
                                                                                        j2valid[0] = true;
                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                        {
                                                                                            if (!j2valid[ij2])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij2[0] = ij2;
                                                                                            _ij2[1] = -1;
                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                            {
                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j2valid[iij2] = false;
                                                                                                    _ij2[1] = iij2;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j2 = j2array[ij2];
                                                                                            cj2 = cj2array[ij2];
                                                                                            sj2 = sj2array[ij2];
                                                                                            {
                                                                                                IkReal evalcond[6];
                                                                                                IkReal x339 = IKsin(j2);
                                                                                                IkReal x340 = IKcos(j2);
                                                                                                IkReal x341 = (cj3 * sj4);
                                                                                                IkReal x342 = (cj3 * cj4);
                                                                                                IkReal x343 = (r21 * sj5);
                                                                                                IkReal x344 = ((1.0) * cj5);
                                                                                                IkReal x345 = (cj5 * r01);
                                                                                                IkReal x346 = ((0.15) * sj5);
                                                                                                IkReal x347 = (r01 * sj5);
                                                                                                IkReal x348 = (sj3 * sj5);
                                                                                                IkReal x349 = ((1.0) * cj4);
                                                                                                IkReal x350 = (cj5 * r21);
                                                                                                IkReal x351 = (sj1 * x340);
                                                                                                IkReal x352 = (cj1 * x340);
                                                                                                IkReal x353 = ((0.54) * x339);
                                                                                                IkReal x354 = (sj1 * x339);
                                                                                                IkReal x355 = ((1.0) * cj1 * x339);
                                                                                                evalcond[0] = ((((-1.0) * r22 * x349)) + (((-1.0) * x355)) + x351 + (((-1.0) * r20 * sj4 * x344)) + ((sj4 * x343)));
                                                                                                evalcond[1] = ((((-1.0) * r02 * x349)) + (((-1.0) * r00 * sj4 * x344)) + (((-1.0) * x352)) + (((-1.0) * x354)) + ((sj4 * x347)));
                                                                                                evalcond[2] = ((((-1.0) * r20 * x346)) + (((-0.54) * x351)) + (((0.71) * cj1)) + ((cj1 * x353)) + (((-1.0) * pz)) + (((-0.15) * x350)));
                                                                                                evalcond[3] = ((((-0.15) * x345)) + (((0.54) * x352)) + (((-1.0) * px)) + ((sj1 * x353)) + (((-1.0) * r00 * x346)) + (((0.71) * sj1)));
                                                                                                evalcond[4] = (((r22 * x341)) + x352 + x354 + ((sj3 * x350)) + ((r20 * x348)) + (((-1.0) * r20 * x342 * x344)) + ((x342 * x343)));
                                                                                                evalcond[5] = (((r00 * x348)) + ((sj3 * x345)) + (((-1.0) * x355)) + x351 + ((r02 * x341)) + (((-1.0) * r00 * x342 * x344)) + ((x342 * x347)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j3array[1], cj3array[1], sj3array[1];
                                                                bool j3valid[1] = {false};
                                                                _nj3 = 1;
                                                                IkReal x356 = ((1.0) * sj4);
                                                                IkReal x357 = ((1.0) * r01);
                                                                CheckValue<IkReal> x358 = IKatan2WithCheck(IkReal(((((-1.0) * r00 * sj5)) + (((-1.0) * cj5 * x357)))), IkReal(((((-1.0) * cj4 * sj5 * x357)) + ((cj4 * cj5 * r00)) + (((-1.0) * r02 * x356)))), IKFAST_ATAN2_MAGTHRESH);
                                                                if (!x358.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x359 = IKPowWithIntegerCheck(IKsign((((cj4 * r22)) + ((cj5 * r20 * sj4)) + (((-1.0) * r21 * sj5 * x356)))), -1);
                                                                if (!x359.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                j3array[0] = ((-1.5707963267949) + (x358.value) + (((1.5707963267949) * (x359.value))));
                                                                sj3array[0] = IKsin(j3array[0]);
                                                                cj3array[0] = IKcos(j3array[0]);
                                                                if (j3array[0] > IKPI)
                                                                {
                                                                    j3array[0] -= IK2PI;
                                                                }
                                                                else if (j3array[0] < -IKPI)
                                                                {
                                                                    j3array[0] += IK2PI;
                                                                }
                                                                j3valid[0] = true;
                                                                for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                {
                                                                    if (!j3valid[ij3])
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij3[0] = ij3;
                                                                    _ij3[1] = -1;
                                                                    for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                    {
                                                                        if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                            j3valid[iij3] = false;
                                                                            _ij3[1] = iij3;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j3 = j3array[ij3];
                                                                    cj3 = cj3array[ij3];
                                                                    sj3 = sj3array[ij3];
                                                                    {
                                                                        IkReal evalcond[4];
                                                                        IkReal x360 = IKcos(j3);
                                                                        IkReal x361 = IKsin(j3);
                                                                        IkReal x362 = (cj4 * sj5);
                                                                        IkReal x363 = (r10 * sj5);
                                                                        IkReal x364 = (cj5 * r11);
                                                                        IkReal x365 = ((1.0) * x360);
                                                                        IkReal x366 = (sj4 * x361);
                                                                        IkReal x367 = ((1.0) * cj4 * cj5 * x361);
                                                                        evalcond[0] = (((x361 * x363)) + ((x361 * x364)) + ((r12 * sj4 * x360)) + ((r11 * x360 * x362)) + (((-1.0) * cj4 * cj5 * r10 * x365)));
                                                                        evalcond[1] = ((((-1.0) * r20 * x367)) + ((r21 * x361 * x362)) + ((r22 * x366)) + (((-1.0) * cj5 * r21 * x365)) + (((-1.0) * r20 * sj5 * x365)));
                                                                        evalcond[2] = ((((-1.0) * r00 * sj5 * x365)) + ((r01 * x361 * x362)) + (((-1.0) * r00 * x367)) + (((-1.0) * cj5 * r01 * x365)) + ((r02 * x366)));
                                                                        evalcond[3] = ((1.0) + ((r11 * x361 * x362)) + (((-1.0) * x363 * x365)) + (((-1.0) * r10 * x367)) + ((r12 * x366)) + (((-1.0) * x364 * x365)));
                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                        bool j1valid[1] = {false};
                                                                        _nj1 = 1;
                                                                        IkReal x368 = ((0.76056338028169) * cj4);
                                                                        IkReal x369 = ((0.211267605633803) * sj5);
                                                                        IkReal x370 = ((0.211267605633803) * cj5);
                                                                        IkReal x371 = ((0.76056338028169) * cj5 * sj4);
                                                                        IkReal x372 = ((0.76056338028169) * sj4 * sj5);
                                                                        if (IKabs((((r00 * x371)) + ((r01 * x370)) + (((-1.0) * r01 * x372)) + ((r00 * x369)) + (((1.40845070422535) * px)) + ((r02 * x368)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * x369)) + ((r20 * x371)) + (((-1.0) * r21 * x372)) + (((1.40845070422535) * pz)) + ((r21 * x370)) + ((r22 * x368)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00 * x371)) + ((r01 * x370)) + (((-1.0) * r01 * x372)) + ((r00 * x369)) + (((1.40845070422535) * px)) + ((r02 * x368)))) + IKsqr((((r20 * x369)) + ((r20 * x371)) + (((-1.0) * r21 * x372)) + (((1.40845070422535) * pz)) + ((r21 * x370)) + ((r22 * x368)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                        j1array[0] = IKatan2((((r00 * x371)) + ((r01 * x370)) + (((-1.0) * r01 * x372)) + ((r00 * x369)) + (((1.40845070422535) * px)) + ((r02 * x368))), (((r20 * x369)) + ((r20 * x371)) + (((-1.0) * r21 * x372)) + (((1.40845070422535) * pz)) + ((r21 * x370)) + ((r22 * x368))));
                                                                        sj1array[0] = IKsin(j1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        if (j1array[0] > IKPI)
                                                                        {
                                                                            j1array[0] -= IK2PI;
                                                                        }
                                                                        else if (j1array[0] < -IKPI)
                                                                        {
                                                                            j1array[0] += IK2PI;
                                                                        }
                                                                        j1valid[0] = true;
                                                                        for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                        {
                                                                            if (!j1valid[ij1])
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij1[0] = ij1;
                                                                            _ij1[1] = -1;
                                                                            for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                            {
                                                                                if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                    j1valid[iij1] = false;
                                                                                    _ij1[1] = iij1;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            j1 = j1array[ij1];
                                                                            cj1 = cj1array[ij1];
                                                                            sj1 = sj1array[ij1];
                                                                            {
                                                                                IkReal evalcond[4];
                                                                                IkReal x373 = ((1.0) * px);
                                                                                IkReal x374 = (cj5 * r00);
                                                                                IkReal x375 = (r01 * sj5);
                                                                                IkReal x376 = ((0.54) * sj4);
                                                                                IkReal x377 = ((0.15) * sj5);
                                                                                IkReal x378 = (r21 * sj5);
                                                                                IkReal x379 = ((0.54) * cj4);
                                                                                IkReal x380 = ((0.15) * cj5);
                                                                                IkReal x381 = (cj5 * r20);
                                                                                IkReal x382 = ((0.54) * sj3);
                                                                                IkReal x383 = ((0.71) * (IKsin(j1)));
                                                                                IkReal x384 = (r00 * x377);
                                                                                IkReal x385 = (r01 * x380);
                                                                                IkReal x386 = ((0.71) * (IKcos(j1)));
                                                                                IkReal x387 = (r21 * x380);
                                                                                IkReal x388 = (r20 * x377);
                                                                                IkReal x389 = (cj3 * x379);
                                                                                IkReal x390 = (x387 + x388);
                                                                                IkReal x391 = (x384 + x385 + x373);
                                                                                evalcond[0] = (((x376 * x381)) + x390 + pz + (((-1.0) * x386)) + ((r22 * x379)) + (((-1.0) * x376 * x378)));
                                                                                evalcond[1] = ((((-1.0) * x391)) + ((x375 * x376)) + (((-1.0) * r02 * x379)) + x383 + (((-1.0) * x374 * x376)));
                                                                                evalcond[2] = ((((-1.0) * x391)) + (((-1.0) * r20 * sj5 * x382)) + x383 + (((-1.0) * cj5 * r21 * x382)) + (((-1.0) * x378 * x389)) + (((-1.0) * cj3 * r22 * x376)) + ((x381 * x389)));
                                                                                evalcond[3] = ((((-1.0) * x390)) + (((-1.0) * x374 * x389)) + x386 + (((-1.0) * pz)) + ((cj3 * r02 * x376)) + ((cj5 * r01 * x382)) + ((r00 * sj5 * x382)) + ((x375 * x389)));
                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                bool j2valid[1] = {false};
                                                                                _nj2 = 1;
                                                                                IkReal x392 = (sj1 * sj4);
                                                                                IkReal x393 = (r01 * sj5);
                                                                                IkReal x394 = (cj4 * r22);
                                                                                IkReal x395 = ((1.0) * cj1);
                                                                                IkReal x396 = (cj5 * r00);
                                                                                IkReal x397 = (cj1 * sj4);
                                                                                IkReal x398 = (cj4 * r02);
                                                                                IkReal x399 = (r21 * sj5);
                                                                                IkReal x400 = (cj5 * r20);
                                                                                if (IKabs(((((-1.0) * x394 * x395)) + (((-1.0) * sj1 * x398)) + ((x397 * x399)) + (((-1.0) * sj4 * x395 * x400)) + (((-1.0) * x392 * x396)) + ((x392 * x393)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj4 * x395 * x396)) + ((x392 * x400)) + ((sj1 * x394)) + (((-1.0) * x395 * x398)) + (((-1.0) * x392 * x399)) + ((x393 * x397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x394 * x395)) + (((-1.0) * sj1 * x398)) + ((x397 * x399)) + (((-1.0) * sj4 * x395 * x400)) + (((-1.0) * x392 * x396)) + ((x392 * x393)))) + IKsqr(((((-1.0) * sj4 * x395 * x396)) + ((x392 * x400)) + ((sj1 * x394)) + (((-1.0) * x395 * x398)) + (((-1.0) * x392 * x399)) + ((x393 * x397)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j2array[0] = IKatan2(((((-1.0) * x394 * x395)) + (((-1.0) * sj1 * x398)) + ((x397 * x399)) + (((-1.0) * sj4 * x395 * x400)) + (((-1.0) * x392 * x396)) + ((x392 * x393))), ((((-1.0) * sj4 * x395 * x396)) + ((x392 * x400)) + ((sj1 * x394)) + (((-1.0) * x395 * x398)) + (((-1.0) * x392 * x399)) + ((x393 * x397))));
                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                if (j2array[0] > IKPI)
                                                                                {
                                                                                    j2array[0] -= IK2PI;
                                                                                }
                                                                                else if (j2array[0] < -IKPI)
                                                                                {
                                                                                    j2array[0] += IK2PI;
                                                                                }
                                                                                j2valid[0] = true;
                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                {
                                                                                    if (!j2valid[ij2])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij2[0] = ij2;
                                                                                    _ij2[1] = -1;
                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                    {
                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j2valid[iij2] = false;
                                                                                            _ij2[1] = iij2;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j2 = j2array[ij2];
                                                                                    cj2 = cj2array[ij2];
                                                                                    sj2 = sj2array[ij2];
                                                                                    {
                                                                                        IkReal evalcond[6];
                                                                                        IkReal x401 = IKsin(j2);
                                                                                        IkReal x402 = IKcos(j2);
                                                                                        IkReal x403 = (cj3 * sj4);
                                                                                        IkReal x404 = (cj3 * cj4);
                                                                                        IkReal x405 = (r21 * sj5);
                                                                                        IkReal x406 = ((1.0) * cj5);
                                                                                        IkReal x407 = (cj5 * r01);
                                                                                        IkReal x408 = ((0.15) * sj5);
                                                                                        IkReal x409 = (r01 * sj5);
                                                                                        IkReal x410 = (sj3 * sj5);
                                                                                        IkReal x411 = ((1.0) * cj4);
                                                                                        IkReal x412 = (cj5 * r21);
                                                                                        IkReal x413 = (sj1 * x402);
                                                                                        IkReal x414 = (cj1 * x402);
                                                                                        IkReal x415 = ((0.54) * x401);
                                                                                        IkReal x416 = (sj1 * x401);
                                                                                        IkReal x417 = ((1.0) * cj1 * x401);
                                                                                        evalcond[0] = ((((-1.0) * r20 * sj4 * x406)) + x413 + ((sj4 * x405)) + (((-1.0) * x417)) + (((-1.0) * r22 * x411)));
                                                                                        evalcond[1] = ((((-1.0) * r00 * sj4 * x406)) + (((-1.0) * r02 * x411)) + ((sj4 * x409)) + (((-1.0) * x414)) + (((-1.0) * x416)));
                                                                                        evalcond[2] = ((((0.71) * cj1)) + (((-1.0) * r20 * x408)) + (((-1.0) * pz)) + (((-0.15) * x412)) + ((cj1 * x415)) + (((-0.54) * x413)));
                                                                                        evalcond[3] = (((sj1 * x415)) + (((0.54) * x414)) + (((-1.0) * px)) + (((0.71) * sj1)) + (((-1.0) * r00 * x408)) + (((-0.15) * x407)));
                                                                                        evalcond[4] = (((x404 * x405)) + ((r22 * x403)) + ((sj3 * x412)) + x416 + x414 + ((r20 * x410)) + (((-1.0) * r20 * x404 * x406)));
                                                                                        evalcond[5] = (((x404 * x409)) + ((sj3 * x407)) + (((-1.0) * r00 * x404 * x406)) + ((r00 * x410)) + x413 + (((-1.0) * x417)) + ((r02 * x403)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 1;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 1;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 1;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } while (0);
                                            if (bgotonextstatement)
                                            {
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                    {
                                                        bgotonextstatement = false;
                                                        {
                                                            IkReal j3eval[3];
                                                            sj0 = 0;
                                                            cj0 = -1.0;
                                                            j0 = 3.14159265358979;
                                                            IkReal x418 = ((1.0) * sj5);
                                                            IkReal x419 = (((cj5 * r00 * sj4)) + (((-1.0) * r01 * sj4 * x418)) + ((cj4 * r02)));
                                                            j3eval[0] = x419;
                                                            j3eval[1] = ((IKabs(((((-1.0) * r20 * x418)) + (((-1.0) * cj5 * r21))))) + (IKabs(((((-1.0) * cj4 * r21 * x418)) + ((cj4 * cj5 * r20)) + (((-1.0) * r22 * sj4))))));
                                                            j3eval[2] = IKsign(x419);
                                                            if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                            {
                                                                {
                                                                    IkReal j3eval[3];
                                                                    sj0 = 0;
                                                                    cj0 = -1.0;
                                                                    j0 = 3.14159265358979;
                                                                    IkReal x420 = ((1.0) * r01);
                                                                    IkReal x421 = ((1.0) * sj4);
                                                                    IkReal x422 = (((r21 * sj4 * sj5)) + (((-1.0) * cj5 * r20 * x421)) + (((-1.0) * cj4 * r22)));
                                                                    j3eval[0] = x422;
                                                                    j3eval[1] = ((IKabs(((((-1.0) * r02 * x421)) + ((cj4 * cj5 * r00)) + (((-1.0) * cj4 * sj5 * x420))))) + (IKabs(((((-1.0) * r00 * sj5)) + (((-1.0) * cj5 * x420))))));
                                                                    j3eval[2] = IKsign(x422);
                                                                    if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                                    {
                                                                        {
                                                                            IkReal j3eval[3];
                                                                            sj0 = 0;
                                                                            cj0 = -1.0;
                                                                            j0 = 3.14159265358979;
                                                                            IkReal x423 = cj4 * cj4;
                                                                            IkReal x424 = r10 * r10;
                                                                            IkReal x425 = cj5 * cj5;
                                                                            IkReal x426 = r11 * r11;
                                                                            IkReal x427 = r12 * r12;
                                                                            IkReal x428 = (r11 * sj5);
                                                                            IkReal x429 = ((1.0) * r10);
                                                                            IkReal x430 = (r12 * sj4);
                                                                            IkReal x431 = ((1.0) * x423);
                                                                            IkReal x432 = ((2.0) * cj5 * r10);
                                                                            IkReal x433 = (x425 * x426);
                                                                            IkReal x434 = (x424 * x425);
                                                                            IkReal x435 = ((((-1.0) * x423 * x428 * x432)) + (((-1.0) * x427 * x431)) + (((-1.0) * x434)) + ((x428 * x432)) + (((-1.0) * x431 * x433)) + x427 + x424 + x433 + ((x423 * x434)) + ((x423 * x426)) + (((-1.0) * cj4 * x430 * x432)) + (((2.0) * cj4 * x428 * x430)));
                                                                            j3eval[0] = x435;
                                                                            j3eval[1] = ((IKabs(((((-1.0) * cj4 * cj5 * x429)) + ((cj4 * x428)) + x430))) + (IKabs(((((-1.0) * cj5 * r11)) + (((-1.0) * sj5 * x429))))));
                                                                            j3eval[2] = IKsign(x435);
                                                                            if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                                            {
                                                                                continue; // no branches [j1, j2, j3]
                                                                            }
                                                                            else
                                                                            {
                                                                                {
                                                                                    IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                    bool j3valid[1] = {false};
                                                                                    _nj3 = 1;
                                                                                    IkReal x436 = cj4 * cj4;
                                                                                    IkReal x437 = r10 * r10;
                                                                                    IkReal x438 = cj5 * cj5;
                                                                                    IkReal x439 = r11 * r11;
                                                                                    IkReal x440 = r12 * r12;
                                                                                    IkReal x441 = (cj5 * r11);
                                                                                    IkReal x442 = (r10 * sj5);
                                                                                    IkReal x443 = (r12 * sj4);
                                                                                    IkReal x444 = ((1.0) * x436);
                                                                                    IkReal x445 = (cj4 * r11 * sj5);
                                                                                    IkReal x446 = (cj4 * cj5 * r10);
                                                                                    IkReal x447 = (x438 * x439);
                                                                                    IkReal x448 = (x437 * x438);
                                                                                    CheckValue<IkReal> x449 = IKatan2WithCheck(IkReal(((((-1.0) * x446)) + x445 + x443)), IkReal(((((-1.0) * x442)) + (((-1.0) * x441)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x449.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x450 = IKPowWithIntegerCheck(IKsign((((x436 * x439)) + (((-1.0) * x444 * x447)) + (((-2.0) * x443 * x446)) + (((2.0) * x441 * x442)) + (((-1.0) * x448)) + (((-2.0) * x436 * x441 * x442)) + x437 + x447 + x440 + (((-1.0) * x440 * x444)) + ((x436 * x448)) + (((2.0) * x443 * x445)))), -1);
                                                                                    if (!x450.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    j3array[0] = ((-1.5707963267949) + (x449.value) + (((1.5707963267949) * (x450.value))));
                                                                                    sj3array[0] = IKsin(j3array[0]);
                                                                                    cj3array[0] = IKcos(j3array[0]);
                                                                                    if (j3array[0] > IKPI)
                                                                                    {
                                                                                        j3array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j3array[0] < -IKPI)
                                                                                    {
                                                                                        j3array[0] += IK2PI;
                                                                                    }
                                                                                    j3valid[0] = true;
                                                                                    for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                                    {
                                                                                        if (!j3valid[ij3])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij3[0] = ij3;
                                                                                        _ij3[1] = -1;
                                                                                        for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                                        {
                                                                                            if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j3valid[iij3] = false;
                                                                                                _ij3[1] = iij3;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j3 = j3array[ij3];
                                                                                        cj3 = cj3array[ij3];
                                                                                        sj3 = sj3array[ij3];
                                                                                        {
                                                                                            IkReal evalcond[4];
                                                                                            IkReal x451 = IKcos(j3);
                                                                                            IkReal x452 = IKsin(j3);
                                                                                            IkReal x453 = (cj4 * sj5);
                                                                                            IkReal x454 = (r10 * sj5);
                                                                                            IkReal x455 = (cj5 * r11);
                                                                                            IkReal x456 = ((1.0) * x451);
                                                                                            IkReal x457 = (sj4 * x452);
                                                                                            IkReal x458 = ((1.0) * cj4 * cj5 * x452);
                                                                                            evalcond[0] = (((x452 * x454)) + ((x452 * x455)) + ((r11 * x451 * x453)) + ((r12 * sj4 * x451)) + (((-1.0) * cj4 * cj5 * r10 * x456)));
                                                                                            evalcond[1] = ((((-1.0) * cj5 * r21 * x456)) + (((-1.0) * r20 * sj5 * x456)) + ((r21 * x452 * x453)) + (((-1.0) * r20 * x458)) + ((r22 * x457)));
                                                                                            evalcond[2] = ((((-1.0) * r00 * sj5 * x456)) + (((-1.0) * r00 * x458)) + (((-1.0) * cj5 * r01 * x456)) + ((r01 * x452 * x453)) + ((r02 * x457)));
                                                                                            evalcond[3] = ((-1.0) + ((r11 * x452 * x453)) + (((-1.0) * x454 * x456)) + (((-1.0) * x455 * x456)) + ((r12 * x457)) + (((-1.0) * r10 * x458)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                            bool j1valid[1] = {false};
                                                                                            _nj1 = 1;
                                                                                            IkReal x459 = ((0.76056338028169) * cj4);
                                                                                            IkReal x460 = ((0.211267605633803) * sj5);
                                                                                            IkReal x461 = ((0.211267605633803) * cj5);
                                                                                            IkReal x462 = ((0.76056338028169) * cj5 * sj4);
                                                                                            IkReal x463 = ((0.76056338028169) * sj4 * sj5);
                                                                                            if (IKabs(((((-1.0) * r01 * x461)) + (((-1.0) * r00 * x462)) + (((-1.0) * r00 * x460)) + (((-1.40845070422535) * px)) + (((-1.0) * r02 * x459)) + ((r01 * x463)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * x462)) + ((r20 * x460)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x463)) + ((r21 * x461)) + ((r22 * x459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r01 * x461)) + (((-1.0) * r00 * x462)) + (((-1.0) * r00 * x460)) + (((-1.40845070422535) * px)) + (((-1.0) * r02 * x459)) + ((r01 * x463)))) + IKsqr((((r20 * x462)) + ((r20 * x460)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x463)) + ((r21 * x461)) + ((r22 * x459)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j1array[0] = IKatan2(((((-1.0) * r01 * x461)) + (((-1.0) * r00 * x462)) + (((-1.0) * r00 * x460)) + (((-1.40845070422535) * px)) + (((-1.0) * r02 * x459)) + ((r01 * x463))), (((r20 * x462)) + ((r20 * x460)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x463)) + ((r21 * x461)) + ((r22 * x459))));
                                                                                            sj1array[0] = IKsin(j1array[0]);
                                                                                            cj1array[0] = IKcos(j1array[0]);
                                                                                            if (j1array[0] > IKPI)
                                                                                            {
                                                                                                j1array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j1array[0] < -IKPI)
                                                                                            {
                                                                                                j1array[0] += IK2PI;
                                                                                            }
                                                                                            j1valid[0] = true;
                                                                                            for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                            {
                                                                                                if (!j1valid[ij1])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij1[0] = ij1;
                                                                                                _ij1[1] = -1;
                                                                                                for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                                {
                                                                                                    if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j1valid[iij1] = false;
                                                                                                        _ij1[1] = iij1;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j1 = j1array[ij1];
                                                                                                cj1 = cj1array[ij1];
                                                                                                sj1 = sj1array[ij1];
                                                                                                {
                                                                                                    IkReal evalcond[4];
                                                                                                    IkReal x464 = (cj5 * r00);
                                                                                                    IkReal x465 = (r01 * sj5);
                                                                                                    IkReal x466 = ((0.54) * sj4);
                                                                                                    IkReal x467 = ((0.15) * sj5);
                                                                                                    IkReal x468 = (r21 * sj5);
                                                                                                    IkReal x469 = ((0.54) * cj4);
                                                                                                    IkReal x470 = ((0.15) * cj5);
                                                                                                    IkReal x471 = (cj5 * r20);
                                                                                                    IkReal x472 = ((0.54) * sj3);
                                                                                                    IkReal x473 = (r21 * x470);
                                                                                                    IkReal x474 = (r20 * x467);
                                                                                                    IkReal x475 = ((0.71) * (IKcos(j1)));
                                                                                                    IkReal x476 = (r00 * x467);
                                                                                                    IkReal x477 = ((0.71) * (IKsin(j1)));
                                                                                                    IkReal x478 = (r01 * x470);
                                                                                                    IkReal x479 = (cj3 * x469);
                                                                                                    IkReal x480 = (x474 + x473 + pz);
                                                                                                    IkReal x481 = (x476 + x477 + x478);
                                                                                                    evalcond[0] = (((r22 * x469)) + (((-1.0) * x466 * x468)) + ((x466 * x471)) + (((-1.0) * x475)) + x480);
                                                                                                    evalcond[1] = ((((-1.0) * x465 * x466)) + x481 + ((r02 * x469)) + px + ((x464 * x466)));
                                                                                                    evalcond[2] = (((x465 * x479)) + (((-1.0) * x475)) + (((-1.0) * x464 * x479)) + x480 + ((r00 * sj5 * x472)) + ((cj5 * r01 * x472)) + ((cj3 * r02 * x466)));
                                                                                                    evalcond[3] = (((r20 * sj5 * x472)) + (((-1.0) * x481)) + ((cj5 * r21 * x472)) + (((-1.0) * px)) + (((-1.0) * x471 * x479)) + ((x468 * x479)) + ((cj3 * r22 * x466)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    IkReal x482 = (cj4 * r22);
                                                                                                    IkReal x483 = ((1.0) * cj1);
                                                                                                    IkReal x484 = (cj4 * r02);
                                                                                                    IkReal x485 = (sj4 * sj5);
                                                                                                    IkReal x486 = ((1.0) * sj1);
                                                                                                    IkReal x487 = (cj5 * sj4);
                                                                                                    IkReal x488 = (sj1 * x487);
                                                                                                    if (IKabs(((((-1.0) * r20 * x483 * x487)) + (((-1.0) * r01 * x485 * x486)) + ((sj1 * x484)) + ((cj1 * r21 * x485)) + ((r00 * x488)) + (((-1.0) * x482 * x483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * x488)) + ((cj1 * r00 * x487)) + (((-1.0) * r21 * x485 * x486)) + ((sj1 * x482)) + (((-1.0) * r01 * x483 * x485)) + ((cj1 * x484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r20 * x483 * x487)) + (((-1.0) * r01 * x485 * x486)) + ((sj1 * x484)) + ((cj1 * r21 * x485)) + ((r00 * x488)) + (((-1.0) * x482 * x483)))) + IKsqr((((r20 * x488)) + ((cj1 * r00 * x487)) + (((-1.0) * r21 * x485 * x486)) + ((sj1 * x482)) + (((-1.0) * r01 * x483 * x485)) + ((cj1 * x484)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2(((((-1.0) * r20 * x483 * x487)) + (((-1.0) * r01 * x485 * x486)) + ((sj1 * x484)) + ((cj1 * r21 * x485)) + ((r00 * x488)) + (((-1.0) * x482 * x483))), (((r20 * x488)) + ((cj1 * r00 * x487)) + (((-1.0) * r21 * x485 * x486)) + ((sj1 * x482)) + (((-1.0) * r01 * x483 * x485)) + ((cj1 * x484))));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[6];
                                                                                                            IkReal x489 = IKcos(j2);
                                                                                                            IkReal x490 = IKsin(j2);
                                                                                                            IkReal x491 = (cj3 * sj4);
                                                                                                            IkReal x492 = (cj3 * cj4);
                                                                                                            IkReal x493 = (r21 * sj5);
                                                                                                            IkReal x494 = ((1.0) * cj5);
                                                                                                            IkReal x495 = (cj5 * r01);
                                                                                                            IkReal x496 = ((0.15) * sj5);
                                                                                                            IkReal x497 = (r01 * sj5);
                                                                                                            IkReal x498 = (sj3 * sj5);
                                                                                                            IkReal x499 = ((1.0) * cj4);
                                                                                                            IkReal x500 = (cj5 * r21);
                                                                                                            IkReal x501 = (cj1 * x489);
                                                                                                            IkReal x502 = (sj1 * x490);
                                                                                                            IkReal x503 = (cj1 * x490);
                                                                                                            IkReal x504 = (sj1 * x489);
                                                                                                            IkReal x505 = (x501 + x502);
                                                                                                            evalcond[0] = (((sj4 * x497)) + (((-1.0) * r02 * x499)) + (((-1.0) * r00 * sj4 * x494)) + x505);
                                                                                                            evalcond[1] = (((sj4 * x493)) + (((-1.0) * r20 * sj4 * x494)) + (((-1.0) * r22 * x499)) + x504 + (((-1.0) * x503)));
                                                                                                            evalcond[2] = ((((0.71) * cj1)) + (((-1.0) * pz)) + (((0.54) * x503)) + (((-0.54) * x504)) + (((-0.15) * x500)) + (((-1.0) * r20 * x496)));
                                                                                                            evalcond[3] = ((((-1.0) * r00 * x496)) + (((-0.71) * sj1)) + (((-1.0) * px)) + (((-0.54) * x501)) + (((-0.54) * x502)) + (((-0.15) * x495)));
                                                                                                            evalcond[4] = (((sj3 * x500)) + ((r22 * x491)) + x505 + (((-1.0) * r20 * x492 * x494)) + ((x492 * x493)) + ((r20 * x498)));
                                                                                                            evalcond[5] = (((r02 * x491)) + x503 + ((sj3 * x495)) + ((r00 * x498)) + (((-1.0) * r00 * x492 * x494)) + (((-1.0) * x504)) + ((x492 * x497)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        {
                                                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                                                            bool j3valid[1] = {false};
                                                                            _nj3 = 1;
                                                                            IkReal x506 = ((1.0) * r01);
                                                                            IkReal x507 = ((1.0) * sj4);
                                                                            CheckValue<IkReal> x508 = IKPowWithIntegerCheck(IKsign((((r21 * sj4 * sj5)) + (((-1.0) * cj5 * r20 * x507)) + (((-1.0) * cj4 * r22)))), -1);
                                                                            if (!x508.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x509 = IKatan2WithCheck(IkReal(((((-1.0) * cj5 * x506)) + (((-1.0) * r00 * sj5)))), IkReal(((((-1.0) * cj4 * sj5 * x506)) + ((cj4 * cj5 * r00)) + (((-1.0) * r02 * x507)))), IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x509.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            j3array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x508.value))) + (x509.value));
                                                                            sj3array[0] = IKsin(j3array[0]);
                                                                            cj3array[0] = IKcos(j3array[0]);
                                                                            if (j3array[0] > IKPI)
                                                                            {
                                                                                j3array[0] -= IK2PI;
                                                                            }
                                                                            else if (j3array[0] < -IKPI)
                                                                            {
                                                                                j3array[0] += IK2PI;
                                                                            }
                                                                            j3valid[0] = true;
                                                                            for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                            {
                                                                                if (!j3valid[ij3])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij3[0] = ij3;
                                                                                _ij3[1] = -1;
                                                                                for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                                {
                                                                                    if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j3valid[iij3] = false;
                                                                                        _ij3[1] = iij3;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j3 = j3array[ij3];
                                                                                cj3 = cj3array[ij3];
                                                                                sj3 = sj3array[ij3];
                                                                                {
                                                                                    IkReal evalcond[4];
                                                                                    IkReal x510 = IKcos(j3);
                                                                                    IkReal x511 = IKsin(j3);
                                                                                    IkReal x512 = (cj4 * sj5);
                                                                                    IkReal x513 = (r10 * sj5);
                                                                                    IkReal x514 = (cj5 * r11);
                                                                                    IkReal x515 = ((1.0) * x510);
                                                                                    IkReal x516 = (sj4 * x511);
                                                                                    IkReal x517 = ((1.0) * cj4 * cj5 * x511);
                                                                                    evalcond[0] = (((x511 * x513)) + ((x511 * x514)) + (((-1.0) * cj4 * cj5 * r10 * x515)) + ((r11 * x510 * x512)) + ((r12 * sj4 * x510)));
                                                                                    evalcond[1] = ((((-1.0) * r20 * sj5 * x515)) + (((-1.0) * r20 * x517)) + ((r21 * x511 * x512)) + (((-1.0) * cj5 * r21 * x515)) + ((r22 * x516)));
                                                                                    evalcond[2] = ((((-1.0) * r00 * x517)) + (((-1.0) * cj5 * r01 * x515)) + ((r01 * x511 * x512)) + ((r02 * x516)) + (((-1.0) * r00 * sj5 * x515)));
                                                                                    evalcond[3] = ((-1.0) + (((-1.0) * x514 * x515)) + (((-1.0) * x513 * x515)) + ((r11 * x511 * x512)) + (((-1.0) * r10 * x517)) + ((r12 * x516)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                    bool j1valid[1] = {false};
                                                                                    _nj1 = 1;
                                                                                    IkReal x518 = ((0.76056338028169) * cj4);
                                                                                    IkReal x519 = ((0.211267605633803) * sj5);
                                                                                    IkReal x520 = ((0.211267605633803) * cj5);
                                                                                    IkReal x521 = ((0.76056338028169) * cj5 * sj4);
                                                                                    IkReal x522 = ((0.76056338028169) * sj4 * sj5);
                                                                                    if (IKabs(((((-1.0) * r00 * x519)) + (((-1.0) * r01 * x520)) + (((-1.0) * r00 * x521)) + (((-1.40845070422535) * px)) + (((-1.0) * r02 * x518)) + ((r01 * x522)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21 * x520)) + ((r20 * x521)) + (((-1.0) * r21 * x522)) + ((r20 * x519)) + (((1.40845070422535) * pz)) + ((r22 * x518)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r00 * x519)) + (((-1.0) * r01 * x520)) + (((-1.0) * r00 * x521)) + (((-1.40845070422535) * px)) + (((-1.0) * r02 * x518)) + ((r01 * x522)))) + IKsqr((((r21 * x520)) + ((r20 * x521)) + (((-1.0) * r21 * x522)) + ((r20 * x519)) + (((1.40845070422535) * pz)) + ((r22 * x518)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j1array[0] = IKatan2(((((-1.0) * r00 * x519)) + (((-1.0) * r01 * x520)) + (((-1.0) * r00 * x521)) + (((-1.40845070422535) * px)) + (((-1.0) * r02 * x518)) + ((r01 * x522))), (((r21 * x520)) + ((r20 * x521)) + (((-1.0) * r21 * x522)) + ((r20 * x519)) + (((1.40845070422535) * pz)) + ((r22 * x518))));
                                                                                    sj1array[0] = IKsin(j1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    if (j1array[0] > IKPI)
                                                                                    {
                                                                                        j1array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j1array[0] < -IKPI)
                                                                                    {
                                                                                        j1array[0] += IK2PI;
                                                                                    }
                                                                                    j1valid[0] = true;
                                                                                    for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                    {
                                                                                        if (!j1valid[ij1])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij1[0] = ij1;
                                                                                        _ij1[1] = -1;
                                                                                        for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                        {
                                                                                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j1valid[iij1] = false;
                                                                                                _ij1[1] = iij1;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j1 = j1array[ij1];
                                                                                        cj1 = cj1array[ij1];
                                                                                        sj1 = sj1array[ij1];
                                                                                        {
                                                                                            IkReal evalcond[4];
                                                                                            IkReal x523 = (cj5 * r00);
                                                                                            IkReal x524 = (r01 * sj5);
                                                                                            IkReal x525 = ((0.54) * sj4);
                                                                                            IkReal x526 = ((0.15) * sj5);
                                                                                            IkReal x527 = (r21 * sj5);
                                                                                            IkReal x528 = ((0.54) * cj4);
                                                                                            IkReal x529 = ((0.15) * cj5);
                                                                                            IkReal x530 = (cj5 * r20);
                                                                                            IkReal x531 = ((0.54) * sj3);
                                                                                            IkReal x532 = (r21 * x529);
                                                                                            IkReal x533 = (r20 * x526);
                                                                                            IkReal x534 = ((0.71) * (IKcos(j1)));
                                                                                            IkReal x535 = (r00 * x526);
                                                                                            IkReal x536 = ((0.71) * (IKsin(j1)));
                                                                                            IkReal x537 = (r01 * x529);
                                                                                            IkReal x538 = (cj3 * x528);
                                                                                            IkReal x539 = (pz + x533 + x532);
                                                                                            IkReal x540 = (x535 + x537 + x536);
                                                                                            evalcond[0] = ((((-1.0) * x525 * x527)) + (((-1.0) * x534)) + ((r22 * x528)) + ((x525 * x530)) + x539);
                                                                                            evalcond[1] = ((((-1.0) * x524 * x525)) + ((r02 * x528)) + px + x540 + ((x523 * x525)));
                                                                                            evalcond[2] = (((r00 * sj5 * x531)) + ((cj3 * r02 * x525)) + (((-1.0) * x523 * x538)) + (((-1.0) * x534)) + x539 + ((x524 * x538)) + ((cj5 * r01 * x531)));
                                                                                            evalcond[3] = (((cj3 * r22 * x525)) + (((-1.0) * x530 * x538)) + ((cj5 * r21 * x531)) + (((-1.0) * x540)) + (((-1.0) * px)) + ((r20 * sj5 * x531)) + ((x527 * x538)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            IkReal x541 = (cj4 * r22);
                                                                                            IkReal x542 = ((1.0) * cj1);
                                                                                            IkReal x543 = (cj4 * r02);
                                                                                            IkReal x544 = (sj4 * sj5);
                                                                                            IkReal x545 = ((1.0) * sj1);
                                                                                            IkReal x546 = (cj5 * sj4);
                                                                                            IkReal x547 = (sj1 * x546);
                                                                                            if (IKabs(((((-1.0) * x541 * x542)) + ((sj1 * x543)) + (((-1.0) * r20 * x542 * x546)) + ((cj1 * r21 * x544)) + (((-1.0) * r01 * x544 * x545)) + ((r00 * x547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1 * x541)) + (((-1.0) * r01 * x542 * x544)) + ((r20 * x547)) + (((-1.0) * r21 * x544 * x545)) + ((cj1 * x543)) + ((cj1 * r00 * x546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x541 * x542)) + ((sj1 * x543)) + (((-1.0) * r20 * x542 * x546)) + ((cj1 * r21 * x544)) + (((-1.0) * r01 * x544 * x545)) + ((r00 * x547)))) + IKsqr((((sj1 * x541)) + (((-1.0) * r01 * x542 * x544)) + ((r20 * x547)) + (((-1.0) * r21 * x544 * x545)) + ((cj1 * x543)) + ((cj1 * r00 * x546)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j2array[0] = IKatan2(((((-1.0) * x541 * x542)) + ((sj1 * x543)) + (((-1.0) * r20 * x542 * x546)) + ((cj1 * r21 * x544)) + (((-1.0) * r01 * x544 * x545)) + ((r00 * x547))), (((sj1 * x541)) + (((-1.0) * r01 * x542 * x544)) + ((r20 * x547)) + (((-1.0) * r21 * x544 * x545)) + ((cj1 * x543)) + ((cj1 * r00 * x546))));
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[6];
                                                                                                    IkReal x548 = IKcos(j2);
                                                                                                    IkReal x549 = IKsin(j2);
                                                                                                    IkReal x550 = (cj3 * sj4);
                                                                                                    IkReal x551 = (cj3 * cj4);
                                                                                                    IkReal x552 = (r21 * sj5);
                                                                                                    IkReal x553 = ((1.0) * cj5);
                                                                                                    IkReal x554 = (cj5 * r01);
                                                                                                    IkReal x555 = ((0.15) * sj5);
                                                                                                    IkReal x556 = (r01 * sj5);
                                                                                                    IkReal x557 = (sj3 * sj5);
                                                                                                    IkReal x558 = ((1.0) * cj4);
                                                                                                    IkReal x559 = (cj5 * r21);
                                                                                                    IkReal x560 = (cj1 * x548);
                                                                                                    IkReal x561 = (sj1 * x549);
                                                                                                    IkReal x562 = (cj1 * x549);
                                                                                                    IkReal x563 = (sj1 * x548);
                                                                                                    IkReal x564 = (x560 + x561);
                                                                                                    evalcond[0] = (((sj4 * x556)) + (((-1.0) * r02 * x558)) + (((-1.0) * r00 * sj4 * x553)) + x564);
                                                                                                    evalcond[1] = (((sj4 * x552)) + (((-1.0) * r20 * sj4 * x553)) + (((-1.0) * r22 * x558)) + x563 + (((-1.0) * x562)));
                                                                                                    evalcond[2] = ((((0.71) * cj1)) + (((-1.0) * r20 * x555)) + (((-0.54) * x563)) + (((-0.15) * x559)) + (((-1.0) * pz)) + (((0.54) * x562)));
                                                                                                    evalcond[3] = ((((-1.0) * r00 * x555)) + (((-0.54) * x560)) + (((-0.54) * x561)) + (((-0.15) * x554)) + (((-0.71) * sj1)) + (((-1.0) * px)));
                                                                                                    evalcond[4] = ((((-1.0) * r20 * x551 * x553)) + ((r20 * x557)) + ((sj3 * x559)) + x564 + ((r22 * x550)) + ((x551 * x552)));
                                                                                                    evalcond[5] = (((r02 * x550)) + ((sj3 * x554)) + (((-1.0) * r00 * x551 * x553)) + x562 + (((-1.0) * x563)) + ((x551 * x556)) + ((r00 * x557)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j3array[1], cj3array[1], sj3array[1];
                                                                    bool j3valid[1] = {false};
                                                                    _nj3 = 1;
                                                                    IkReal x565 = ((1.0) * sj5);
                                                                    CheckValue<IkReal> x566 = IKatan2WithCheck(IkReal(((((-1.0) * cj5 * r21)) + (((-1.0) * r20 * x565)))), IkReal(((((-1.0) * cj4 * r21 * x565)) + ((cj4 * cj5 * r20)) + (((-1.0) * r22 * sj4)))), IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x566.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    CheckValue<IkReal> x567 = IKPowWithIntegerCheck(IKsign((((cj5 * r00 * sj4)) + (((-1.0) * r01 * sj4 * x565)) + ((cj4 * r02)))), -1);
                                                                    if (!x567.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j3array[0] = ((-1.5707963267949) + (x566.value) + (((1.5707963267949) * (x567.value))));
                                                                    sj3array[0] = IKsin(j3array[0]);
                                                                    cj3array[0] = IKcos(j3array[0]);
                                                                    if (j3array[0] > IKPI)
                                                                    {
                                                                        j3array[0] -= IK2PI;
                                                                    }
                                                                    else if (j3array[0] < -IKPI)
                                                                    {
                                                                        j3array[0] += IK2PI;
                                                                    }
                                                                    j3valid[0] = true;
                                                                    for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                    {
                                                                        if (!j3valid[ij3])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij3[0] = ij3;
                                                                        _ij3[1] = -1;
                                                                        for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                        {
                                                                            if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j3valid[iij3] = false;
                                                                                _ij3[1] = iij3;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j3 = j3array[ij3];
                                                                        cj3 = cj3array[ij3];
                                                                        sj3 = sj3array[ij3];
                                                                        {
                                                                            IkReal evalcond[4];
                                                                            IkReal x568 = IKcos(j3);
                                                                            IkReal x569 = IKsin(j3);
                                                                            IkReal x570 = (cj4 * sj5);
                                                                            IkReal x571 = (r10 * sj5);
                                                                            IkReal x572 = (cj5 * r11);
                                                                            IkReal x573 = ((1.0) * x568);
                                                                            IkReal x574 = (sj4 * x569);
                                                                            IkReal x575 = ((1.0) * cj4 * cj5 * x569);
                                                                            evalcond[0] = (((r12 * sj4 * x568)) + (((-1.0) * cj4 * cj5 * r10 * x573)) + ((x569 * x571)) + ((x569 * x572)) + ((r11 * x568 * x570)));
                                                                            evalcond[1] = ((((-1.0) * cj5 * r21 * x573)) + ((r21 * x569 * x570)) + (((-1.0) * r20 * sj5 * x573)) + ((r22 * x574)) + (((-1.0) * r20 * x575)));
                                                                            evalcond[2] = ((((-1.0) * r00 * sj5 * x573)) + (((-1.0) * r00 * x575)) + ((r02 * x574)) + (((-1.0) * cj5 * r01 * x573)) + ((r01 * x569 * x570)));
                                                                            evalcond[3] = ((-1.0) + (((-1.0) * r10 * x575)) + ((r12 * x574)) + (((-1.0) * x571 * x573)) + ((r11 * x569 * x570)) + (((-1.0) * x572 * x573)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1] = {false};
                                                                            _nj1 = 1;
                                                                            IkReal x576 = ((0.76056338028169) * cj4);
                                                                            IkReal x577 = ((0.211267605633803) * sj5);
                                                                            IkReal x578 = ((0.211267605633803) * cj5);
                                                                            IkReal x579 = ((0.76056338028169) * cj5 * sj4);
                                                                            IkReal x580 = ((0.76056338028169) * sj4 * sj5);
                                                                            if (IKabs(((((-1.0) * r01 * x578)) + (((-1.0) * r00 * x577)) + (((-1.0) * r00 * x579)) + (((-1.40845070422535) * px)) + ((r01 * x580)) + (((-1.0) * r02 * x576)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * x579)) + ((r20 * x577)) + (((-1.0) * r21 * x580)) + (((1.40845070422535) * pz)) + ((r21 * x578)) + ((r22 * x576)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r01 * x578)) + (((-1.0) * r00 * x577)) + (((-1.0) * r00 * x579)) + (((-1.40845070422535) * px)) + ((r01 * x580)) + (((-1.0) * r02 * x576)))) + IKsqr((((r20 * x579)) + ((r20 * x577)) + (((-1.0) * r21 * x580)) + (((1.40845070422535) * pz)) + ((r21 * x578)) + ((r22 * x576)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                continue;
                                                                            j1array[0] = IKatan2(((((-1.0) * r01 * x578)) + (((-1.0) * r00 * x577)) + (((-1.0) * r00 * x579)) + (((-1.40845070422535) * px)) + ((r01 * x580)) + (((-1.0) * r02 * x576))), (((r20 * x579)) + ((r20 * x577)) + (((-1.0) * r21 * x580)) + (((1.40845070422535) * pz)) + ((r21 * x578)) + ((r22 * x576))));
                                                                            sj1array[0] = IKsin(j1array[0]);
                                                                            cj1array[0] = IKcos(j1array[0]);
                                                                            if (j1array[0] > IKPI)
                                                                            {
                                                                                j1array[0] -= IK2PI;
                                                                            }
                                                                            else if (j1array[0] < -IKPI)
                                                                            {
                                                                                j1array[0] += IK2PI;
                                                                            }
                                                                            j1valid[0] = true;
                                                                            for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                                if (!j1valid[ij1])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij1[0] = ij1;
                                                                                _ij1[1] = -1;
                                                                                for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                {
                                                                                    if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j1valid[iij1] = false;
                                                                                        _ij1[1] = iij1;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j1 = j1array[ij1];
                                                                                cj1 = cj1array[ij1];
                                                                                sj1 = sj1array[ij1];
                                                                                {
                                                                                    IkReal evalcond[4];
                                                                                    IkReal x581 = (cj5 * r00);
                                                                                    IkReal x582 = (r01 * sj5);
                                                                                    IkReal x583 = ((0.54) * sj4);
                                                                                    IkReal x584 = ((0.15) * sj5);
                                                                                    IkReal x585 = (r21 * sj5);
                                                                                    IkReal x586 = ((0.54) * cj4);
                                                                                    IkReal x587 = ((0.15) * cj5);
                                                                                    IkReal x588 = (cj5 * r20);
                                                                                    IkReal x589 = ((0.54) * sj3);
                                                                                    IkReal x590 = (r21 * x587);
                                                                                    IkReal x591 = (r20 * x584);
                                                                                    IkReal x592 = ((0.71) * (IKcos(j1)));
                                                                                    IkReal x593 = (r00 * x584);
                                                                                    IkReal x594 = ((0.71) * (IKsin(j1)));
                                                                                    IkReal x595 = (r01 * x587);
                                                                                    IkReal x596 = (cj3 * x586);
                                                                                    IkReal x597 = (pz + x591 + x590);
                                                                                    IkReal x598 = (x595 + x594 + x593);
                                                                                    evalcond[0] = (((x583 * x588)) + (((-1.0) * x583 * x585)) + (((-1.0) * x592)) + x597 + ((r22 * x586)));
                                                                                    evalcond[1] = (((x581 * x583)) + (((-1.0) * x582 * x583)) + ((r02 * x586)) + px + x598);
                                                                                    evalcond[2] = (((cj3 * r02 * x583)) + ((r00 * sj5 * x589)) + (((-1.0) * x592)) + (((-1.0) * x581 * x596)) + x597 + ((x582 * x596)) + ((cj5 * r01 * x589)));
                                                                                    evalcond[3] = (((x585 * x596)) + (((-1.0) * x588 * x596)) + ((cj5 * r21 * x589)) + (((-1.0) * x598)) + (((-1.0) * px)) + ((r20 * sj5 * x589)) + ((cj3 * r22 * x583)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    IkReal x599 = (cj4 * r22);
                                                                                    IkReal x600 = ((1.0) * cj1);
                                                                                    IkReal x601 = (cj4 * r02);
                                                                                    IkReal x602 = (sj4 * sj5);
                                                                                    IkReal x603 = ((1.0) * sj1);
                                                                                    IkReal x604 = (cj5 * sj4);
                                                                                    IkReal x605 = (sj1 * x604);
                                                                                    if (IKabs((((r00 * x605)) + ((sj1 * x601)) + (((-1.0) * x599 * x600)) + ((cj1 * r21 * x602)) + (((-1.0) * r01 * x602 * x603)) + (((-1.0) * r20 * x600 * x604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * x605)) + (((-1.0) * r01 * x600 * x602)) + ((cj1 * x601)) + ((sj1 * x599)) + (((-1.0) * r21 * x602 * x603)) + ((cj1 * r00 * x604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00 * x605)) + ((sj1 * x601)) + (((-1.0) * x599 * x600)) + ((cj1 * r21 * x602)) + (((-1.0) * r01 * x602 * x603)) + (((-1.0) * r20 * x600 * x604)))) + IKsqr((((r20 * x605)) + (((-1.0) * r01 * x600 * x602)) + ((cj1 * x601)) + ((sj1 * x599)) + (((-1.0) * r21 * x602 * x603)) + ((cj1 * r00 * x604)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j2array[0] = IKatan2((((r00 * x605)) + ((sj1 * x601)) + (((-1.0) * x599 * x600)) + ((cj1 * r21 * x602)) + (((-1.0) * r01 * x602 * x603)) + (((-1.0) * r20 * x600 * x604))), (((r20 * x605)) + (((-1.0) * r01 * x600 * x602)) + ((cj1 * x601)) + ((sj1 * x599)) + (((-1.0) * r21 * x602 * x603)) + ((cj1 * r00 * x604))));
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI)
                                                                                    {
                                                                                        j2array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j2array[0] < -IKPI)
                                                                                    {
                                                                                        j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                    {
                                                                                        if (!j2valid[ij2])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                        {
                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j2valid[iij2] = false;
                                                                                                _ij2[1] = iij2;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                            IkReal evalcond[6];
                                                                                            IkReal x606 = IKcos(j2);
                                                                                            IkReal x607 = IKsin(j2);
                                                                                            IkReal x608 = (cj3 * sj4);
                                                                                            IkReal x609 = (cj3 * cj4);
                                                                                            IkReal x610 = (r21 * sj5);
                                                                                            IkReal x611 = ((1.0) * cj5);
                                                                                            IkReal x612 = (cj5 * r01);
                                                                                            IkReal x613 = ((0.15) * sj5);
                                                                                            IkReal x614 = (r01 * sj5);
                                                                                            IkReal x615 = (sj3 * sj5);
                                                                                            IkReal x616 = ((1.0) * cj4);
                                                                                            IkReal x617 = (cj5 * r21);
                                                                                            IkReal x618 = (cj1 * x606);
                                                                                            IkReal x619 = (sj1 * x607);
                                                                                            IkReal x620 = (cj1 * x607);
                                                                                            IkReal x621 = (sj1 * x606);
                                                                                            IkReal x622 = (x618 + x619);
                                                                                            evalcond[0] = (((sj4 * x614)) + (((-1.0) * r00 * sj4 * x611)) + x622 + (((-1.0) * r02 * x616)));
                                                                                            evalcond[1] = (((sj4 * x610)) + (((-1.0) * r22 * x616)) + x621 + (((-1.0) * x620)) + (((-1.0) * r20 * sj4 * x611)));
                                                                                            evalcond[2] = ((((0.71) * cj1)) + (((-1.0) * r20 * x613)) + (((-0.15) * x617)) + (((-1.0) * pz)) + (((-0.54) * x621)) + (((0.54) * x620)));
                                                                                            evalcond[3] = ((((-1.0) * r00 * x613)) + (((-0.15) * x612)) + (((-0.54) * x618)) + (((-0.54) * x619)) + (((-0.71) * sj1)) + (((-1.0) * px)));
                                                                                            evalcond[4] = (((r20 * x615)) + x622 + ((x609 * x610)) + ((sj3 * x617)) + (((-1.0) * r20 * x609 * x611)) + ((r22 * x608)));
                                                                                            evalcond[5] = (((r00 * x615)) + (((-1.0) * r00 * x609 * x611)) + x620 + ((r02 * x608)) + ((x609 * x614)) + ((sj3 * x612)) + (((-1.0) * x621)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } while (0);
                                                if (bgotonextstatement)
                                                {
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                        {
                                                            bgotonextstatement = false;
                                                            {
                                                                IkReal j3eval[3];
                                                                sj0 = 1.0;
                                                                cj0 = 0;
                                                                j0 = 1.5707963267949;
                                                                IkReal x623 = ((1.0) * r11);
                                                                IkReal x624 = ((1.0) * sj5);
                                                                IkReal x625 = (((cj4 * r22)) + ((cj5 * r20 * sj4)) + (((-1.0) * r21 * sj4 * x624)));
                                                                j3eval[0] = x625;
                                                                j3eval[1] = IKsign(x625);
                                                                j3eval[2] = ((IKabs((((cj4 * cj5 * r10)) + (((-1.0) * cj4 * sj5 * x623)) + (((-1.0) * r12 * sj4))))) + (IKabs(((((-1.0) * cj5 * x623)) + (((-1.0) * r10 * x624))))));
                                                                if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                                {
                                                                    {
                                                                        IkReal j3eval[3];
                                                                        sj0 = 1.0;
                                                                        cj0 = 0;
                                                                        j0 = 1.5707963267949;
                                                                        IkReal x626 = ((1.0) * sj4);
                                                                        IkReal x627 = ((1.0) * r21);
                                                                        IkReal x628 = (((r11 * sj4 * sj5)) + (((-1.0) * cj5 * r10 * x626)) + (((-1.0) * cj4 * r12)));
                                                                        j3eval[0] = x628;
                                                                        j3eval[1] = IKsign(x628);
                                                                        j3eval[2] = ((IKabs(((((-1.0) * cj4 * sj5 * x627)) + ((cj4 * cj5 * r20)) + (((-1.0) * r22 * x626))))) + (IKabs(((((-1.0) * cj5 * x627)) + (((-1.0) * r20 * sj5))))));
                                                                        if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                                        {
                                                                            {
                                                                                IkReal j3eval[3];
                                                                                sj0 = 1.0;
                                                                                cj0 = 0;
                                                                                j0 = 1.5707963267949;
                                                                                IkReal x629 = r00 * r00;
                                                                                IkReal x630 = cj5 * cj5;
                                                                                IkReal x631 = cj4 * cj4;
                                                                                IkReal x632 = r01 * r01;
                                                                                IkReal x633 = r02 * r02;
                                                                                IkReal x634 = (cj5 * r00);
                                                                                IkReal x635 = (r01 * sj5);
                                                                                IkReal x636 = ((1.0) * x631);
                                                                                IkReal x637 = (x629 * x630);
                                                                                IkReal x638 = ((2.0) * cj4 * r02 * sj4);
                                                                                IkReal x639 = (x630 * x632);
                                                                                IkReal x640 = ((((-1.0) * x633 * x636)) + ((x635 * x638)) + (((-1.0) * x634 * x638)) + (((2.0) * x634 * x635)) + (((-1.0) * x636 * x639)) + x629 + x633 + x639 + (((-1.0) * x637)) + ((x631 * x632)) + ((x631 * x637)) + (((-2.0) * x631 * x634 * x635)));
                                                                                j3eval[0] = x640;
                                                                                j3eval[1] = IKsign(x640);
                                                                                j3eval[2] = ((IKabs(((((-1.0) * cj4 * x634)) + ((cj4 * x635)) + ((r02 * sj4))))) + (IKabs(((((-1.0) * r00 * sj5)) + (((-1.0) * cj5 * r01))))));
                                                                                if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                                                {
                                                                                    continue; // no branches [j1, j2, j3]
                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                        bool j3valid[1] = {false};
                                                                                        _nj3 = 1;
                                                                                        IkReal x641 = r00 * r00;
                                                                                        IkReal x642 = cj5 * cj5;
                                                                                        IkReal x643 = cj4 * cj4;
                                                                                        IkReal x644 = r01 * r01;
                                                                                        IkReal x645 = r02 * r02;
                                                                                        IkReal x646 = (cj5 * r00);
                                                                                        IkReal x647 = (r02 * sj4);
                                                                                        IkReal x648 = ((2.0) * r01 * sj5);
                                                                                        IkReal x649 = ((1.0) * x643);
                                                                                        IkReal x650 = (x641 * x642);
                                                                                        IkReal x651 = (x642 * x644);
                                                                                        CheckValue<IkReal> x652 = IKPowWithIntegerCheck(IKsign((((x643 * x644)) + (((-1.0) * x650)) + ((cj4 * x647 * x648)) + (((-1.0) * x643 * x646 * x648)) + ((x643 * x650)) + (((-2.0) * cj4 * x646 * x647)) + x645 + x641 + x651 + (((-1.0) * x649 * x651)) + (((-1.0) * x645 * x649)) + ((x646 * x648)))), -1);
                                                                                        if (!x652.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x653 = IKatan2WithCheck(IkReal(((((-1.0) * cj4 * x646)) + x647 + ((cj4 * r01 * sj5)))), IkReal(((((-1.0) * r00 * sj5)) + (((-1.0) * cj5 * r01)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (!x653.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        j3array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x652.value))) + (x653.value));
                                                                                        sj3array[0] = IKsin(j3array[0]);
                                                                                        cj3array[0] = IKcos(j3array[0]);
                                                                                        if (j3array[0] > IKPI)
                                                                                        {
                                                                                            j3array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j3array[0] < -IKPI)
                                                                                        {
                                                                                            j3array[0] += IK2PI;
                                                                                        }
                                                                                        j3valid[0] = true;
                                                                                        for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                                        {
                                                                                            if (!j3valid[ij3])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij3[0] = ij3;
                                                                                            _ij3[1] = -1;
                                                                                            for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                                            {
                                                                                                if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j3valid[iij3] = false;
                                                                                                    _ij3[1] = iij3;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j3 = j3array[ij3];
                                                                                            cj3 = cj3array[ij3];
                                                                                            sj3 = sj3array[ij3];
                                                                                            {
                                                                                                IkReal evalcond[4];
                                                                                                IkReal x654 = IKcos(j3);
                                                                                                IkReal x655 = IKsin(j3);
                                                                                                IkReal x656 = (r00 * sj5);
                                                                                                IkReal x657 = (cj5 * r01);
                                                                                                IkReal x658 = (cj4 * r01 * sj5);
                                                                                                IkReal x659 = ((1.0) * x654);
                                                                                                IkReal x660 = (sj4 * x655);
                                                                                                IkReal x661 = (cj4 * sj5 * x655);
                                                                                                IkReal x662 = ((1.0) * cj4 * cj5 * x655);
                                                                                                evalcond[0] = ((((-1.0) * cj4 * cj5 * r00 * x659)) + ((r02 * sj4 * x654)) + ((x654 * x658)) + ((x655 * x656)) + ((x655 * x657)));
                                                                                                evalcond[1] = ((((-1.0) * r20 * x662)) + ((r21 * x661)) + (((-1.0) * r20 * sj5 * x659)) + ((r22 * x660)) + (((-1.0) * cj5 * r21 * x659)));
                                                                                                evalcond[2] = ((((-1.0) * r10 * x662)) + (((-1.0) * cj5 * r11 * x659)) + ((r11 * x661)) + ((r12 * x660)) + (((-1.0) * r10 * sj5 * x659)));
                                                                                                evalcond[3] = ((-1.0) + (((-1.0) * x657 * x659)) + (((-1.0) * r00 * x662)) + (((-1.0) * x656 * x659)) + ((r02 * x660)) + ((x655 * x658)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                                bool j1valid[1] = {false};
                                                                                                _nj1 = 1;
                                                                                                IkReal x663 = ((0.76056338028169) * cj4);
                                                                                                IkReal x664 = ((0.211267605633803) * sj5);
                                                                                                IkReal x665 = ((0.211267605633803) * cj5);
                                                                                                IkReal x666 = ((0.76056338028169) * sj4 * sj5);
                                                                                                IkReal x667 = ((0.76056338028169) * cj5 * sj4);
                                                                                                if (IKabs(((((-1.0) * r11 * x666)) + ((r11 * x665)) + ((r12 * x663)) + (((1.40845070422535) * py)) + ((r10 * x667)) + ((r10 * x664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * x667)) + ((r20 * x664)) + (((-1.0) * r21 * x666)) + ((r21 * x665)) + (((1.40845070422535) * pz)) + ((r22 * x663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r11 * x666)) + ((r11 * x665)) + ((r12 * x663)) + (((1.40845070422535) * py)) + ((r10 * x667)) + ((r10 * x664)))) + IKsqr((((r20 * x667)) + ((r20 * x664)) + (((-1.0) * r21 * x666)) + ((r21 * x665)) + (((1.40845070422535) * pz)) + ((r22 * x663)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j1array[0] = IKatan2(((((-1.0) * r11 * x666)) + ((r11 * x665)) + ((r12 * x663)) + (((1.40845070422535) * py)) + ((r10 * x667)) + ((r10 * x664))), (((r20 * x667)) + ((r20 * x664)) + (((-1.0) * r21 * x666)) + ((r21 * x665)) + (((1.40845070422535) * pz)) + ((r22 * x663))));
                                                                                                sj1array[0] = IKsin(j1array[0]);
                                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                                if (j1array[0] > IKPI)
                                                                                                {
                                                                                                    j1array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j1array[0] < -IKPI)
                                                                                                {
                                                                                                    j1array[0] += IK2PI;
                                                                                                }
                                                                                                j1valid[0] = true;
                                                                                                for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                {
                                                                                                    if (!j1valid[ij1])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij1[0] = ij1;
                                                                                                    _ij1[1] = -1;
                                                                                                    for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                                    {
                                                                                                        if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j1valid[iij1] = false;
                                                                                                            _ij1[1] = iij1;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j1 = j1array[ij1];
                                                                                                    cj1 = cj1array[ij1];
                                                                                                    sj1 = sj1array[ij1];
                                                                                                    {
                                                                                                        IkReal evalcond[4];
                                                                                                        IkReal x668 = ((1.0) * py);
                                                                                                        IkReal x669 = ((0.54) * sj4);
                                                                                                        IkReal x670 = (r11 * sj5);
                                                                                                        IkReal x671 = (cj5 * r10);
                                                                                                        IkReal x672 = (cj5 * r11);
                                                                                                        IkReal x673 = ((0.54) * cj4);
                                                                                                        IkReal x674 = ((0.15) * sj5);
                                                                                                        IkReal x675 = (r21 * sj5);
                                                                                                        IkReal x676 = ((0.54) * sj3);
                                                                                                        IkReal x677 = (cj5 * r21);
                                                                                                        IkReal x678 = (cj5 * r20);
                                                                                                        IkReal x679 = ((0.71) * (IKsin(j1)));
                                                                                                        IkReal x680 = (r10 * x674);
                                                                                                        IkReal x681 = ((0.15) * x672);
                                                                                                        IkReal x682 = ((0.71) * (IKcos(j1)));
                                                                                                        IkReal x683 = ((0.15) * x677);
                                                                                                        IkReal x684 = (r20 * x674);
                                                                                                        IkReal x685 = (x683 + x684);
                                                                                                        IkReal x686 = (x668 + x681 + x680);
                                                                                                        evalcond[0] = ((((-1.0) * x682)) + ((r22 * x673)) + ((x669 * x678)) + pz + (((-1.0) * x669 * x675)) + x685);
                                                                                                        evalcond[1] = ((((-1.0) * x686)) + ((x669 * x670)) + (((-1.0) * x669 * x671)) + x679 + (((-1.0) * r12 * x673)));
                                                                                                        evalcond[2] = ((((-1.0) * cj3 * r22 * x669)) + (((-1.0) * r20 * sj5 * x676)) + (((-1.0) * x686)) + (((-1.0) * x676 * x677)) + x679 + ((cj3 * x673 * x678)) + (((-1.0) * cj3 * x673 * x675)));
                                                                                                        evalcond[3] = (((x672 * x676)) + (((-1.0) * x685)) + ((cj3 * x670 * x673)) + ((cj3 * r12 * x669)) + (((-1.0) * pz)) + ((r10 * sj5 * x676)) + x682 + (((-1.0) * cj3 * x671 * x673)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                        bool j2valid[1] = {false};
                                                                                                        _nj2 = 1;
                                                                                                        IkReal x687 = (cj4 * r22);
                                                                                                        IkReal x688 = ((1.0) * cj1);
                                                                                                        IkReal x689 = (cj5 * sj4);
                                                                                                        IkReal x690 = (cj4 * r12);
                                                                                                        IkReal x691 = ((1.0) * sj1);
                                                                                                        IkReal x692 = (r11 * sj4 * sj5);
                                                                                                        IkReal x693 = (r21 * sj4 * sj5);
                                                                                                        if (IKabs(((((-1.0) * x687 * x688)) + ((cj1 * x693)) + (((-1.0) * r10 * x689 * x691)) + ((sj1 * x692)) + (((-1.0) * r20 * x688 * x689)) + (((-1.0) * x690 * x691)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1 * x692)) + (((-1.0) * r10 * x688 * x689)) + ((r20 * sj1 * x689)) + (((-1.0) * x688 * x690)) + ((sj1 * x687)) + (((-1.0) * x691 * x693)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x687 * x688)) + ((cj1 * x693)) + (((-1.0) * r10 * x689 * x691)) + ((sj1 * x692)) + (((-1.0) * r20 * x688 * x689)) + (((-1.0) * x690 * x691)))) + IKsqr((((cj1 * x692)) + (((-1.0) * r10 * x688 * x689)) + ((r20 * sj1 * x689)) + (((-1.0) * x688 * x690)) + ((sj1 * x687)) + (((-1.0) * x691 * x693)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                            continue;
                                                                                                        j2array[0] = IKatan2(((((-1.0) * x687 * x688)) + ((cj1 * x693)) + (((-1.0) * r10 * x689 * x691)) + ((sj1 * x692)) + (((-1.0) * r20 * x688 * x689)) + (((-1.0) * x690 * x691))), (((cj1 * x692)) + (((-1.0) * r10 * x688 * x689)) + ((r20 * sj1 * x689)) + (((-1.0) * x688 * x690)) + ((sj1 * x687)) + (((-1.0) * x691 * x693))));
                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                        if (j2array[0] > IKPI)
                                                                                                        {
                                                                                                            j2array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                        {
                                                                                                            j2array[0] += IK2PI;
                                                                                                        }
                                                                                                        j2valid[0] = true;
                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                        {
                                                                                                            if (!j2valid[ij2])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij2[0] = ij2;
                                                                                                            _ij2[1] = -1;
                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                            {
                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j2valid[iij2] = false;
                                                                                                                    _ij2[1] = iij2;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j2 = j2array[ij2];
                                                                                                            cj2 = cj2array[ij2];
                                                                                                            sj2 = sj2array[ij2];
                                                                                                            {
                                                                                                                IkReal evalcond[6];
                                                                                                                IkReal x694 = IKsin(j2);
                                                                                                                IkReal x695 = IKcos(j2);
                                                                                                                IkReal x696 = (sj4 * sj5);
                                                                                                                IkReal x697 = ((1.0) * cj5);
                                                                                                                IkReal x698 = (cj3 * cj4);
                                                                                                                IkReal x699 = (cj5 * r11);
                                                                                                                IkReal x700 = ((0.15) * sj5);
                                                                                                                IkReal x701 = (cj3 * sj4);
                                                                                                                IkReal x702 = ((1.0) * cj4);
                                                                                                                IkReal x703 = (cj5 * r21);
                                                                                                                IkReal x704 = (sj3 * sj5);
                                                                                                                IkReal x705 = (sj1 * x695);
                                                                                                                IkReal x706 = (cj1 * x695);
                                                                                                                IkReal x707 = (sj5 * x698);
                                                                                                                IkReal x708 = ((0.54) * x694);
                                                                                                                IkReal x709 = (sj1 * x694);
                                                                                                                IkReal x710 = ((1.0) * cj1 * x694);
                                                                                                                evalcond[0] = ((((-1.0) * r20 * sj4 * x697)) + (((-1.0) * x710)) + x705 + ((r21 * x696)) + (((-1.0) * r22 * x702)));
                                                                                                                evalcond[1] = ((((-1.0) * r12 * x702)) + (((-1.0) * r10 * sj4 * x697)) + (((-1.0) * x706)) + (((-1.0) * x709)) + ((r11 * x696)));
                                                                                                                evalcond[2] = ((((0.71) * cj1)) + (((-0.54) * x705)) + (((-1.0) * pz)) + (((-1.0) * r20 * x700)) + ((cj1 * x708)) + (((-0.15) * x703)));
                                                                                                                evalcond[3] = ((((-0.15) * x699)) + (((-1.0) * py)) + (((0.54) * x706)) + (((-1.0) * r10 * x700)) + ((sj1 * x708)) + (((0.71) * sj1)));
                                                                                                                evalcond[4] = (((r22 * x701)) + (((-1.0) * r20 * x697 * x698)) + ((r20 * x704)) + ((sj3 * x703)) + ((r21 * x707)) + x709 + x706);
                                                                                                                evalcond[5] = ((((-1.0) * r10 * x697 * x698)) + (((-1.0) * x710)) + ((sj3 * x699)) + x705 + ((r12 * x701)) + ((r10 * x704)) + ((r11 * x707)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j3;
                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j4;
                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j5;
                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                std::vector<int> vfree(0);
                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            {
                                                                                IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                bool j3valid[1] = {false};
                                                                                _nj3 = 1;
                                                                                IkReal x711 = ((1.0) * sj4);
                                                                                IkReal x712 = ((1.0) * r21);
                                                                                CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(((((-1.0) * cj5 * x712)) + (((-1.0) * r20 * sj5)))), IkReal(((((-1.0) * r22 * x711)) + (((-1.0) * cj4 * sj5 * x712)) + ((cj4 * cj5 * r20)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x713.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                CheckValue<IkReal> x714 = IKPowWithIntegerCheck(IKsign((((r11 * sj4 * sj5)) + (((-1.0) * cj5 * r10 * x711)) + (((-1.0) * cj4 * r12)))), -1);
                                                                                if (!x714.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                j3array[0] = ((-1.5707963267949) + (x713.value) + (((1.5707963267949) * (x714.value))));
                                                                                sj3array[0] = IKsin(j3array[0]);
                                                                                cj3array[0] = IKcos(j3array[0]);
                                                                                if (j3array[0] > IKPI)
                                                                                {
                                                                                    j3array[0] -= IK2PI;
                                                                                }
                                                                                else if (j3array[0] < -IKPI)
                                                                                {
                                                                                    j3array[0] += IK2PI;
                                                                                }
                                                                                j3valid[0] = true;
                                                                                for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                                {
                                                                                    if (!j3valid[ij3])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij3[0] = ij3;
                                                                                    _ij3[1] = -1;
                                                                                    for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                                    {
                                                                                        if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j3valid[iij3] = false;
                                                                                            _ij3[1] = iij3;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j3 = j3array[ij3];
                                                                                    cj3 = cj3array[ij3];
                                                                                    sj3 = sj3array[ij3];
                                                                                    {
                                                                                        IkReal evalcond[4];
                                                                                        IkReal x715 = IKcos(j3);
                                                                                        IkReal x716 = IKsin(j3);
                                                                                        IkReal x717 = (r00 * sj5);
                                                                                        IkReal x718 = (cj5 * r01);
                                                                                        IkReal x719 = (cj4 * r01 * sj5);
                                                                                        IkReal x720 = ((1.0) * x715);
                                                                                        IkReal x721 = (sj4 * x716);
                                                                                        IkReal x722 = (cj4 * sj5 * x716);
                                                                                        IkReal x723 = ((1.0) * cj4 * cj5 * x716);
                                                                                        evalcond[0] = (((x715 * x719)) + ((r02 * sj4 * x715)) + (((-1.0) * cj4 * cj5 * r00 * x720)) + ((x716 * x717)) + ((x716 * x718)));
                                                                                        evalcond[1] = ((((-1.0) * r20 * sj5 * x720)) + (((-1.0) * cj5 * r21 * x720)) + (((-1.0) * r20 * x723)) + ((r21 * x722)) + ((r22 * x721)));
                                                                                        evalcond[2] = ((((-1.0) * cj5 * r11 * x720)) + (((-1.0) * r10 * sj5 * x720)) + (((-1.0) * r10 * x723)) + ((r11 * x722)) + ((r12 * x721)));
                                                                                        evalcond[3] = ((-1.0) + (((-1.0) * r00 * x723)) + (((-1.0) * x717 * x720)) + ((r02 * x721)) + ((x716 * x719)) + (((-1.0) * x718 * x720)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1] = {false};
                                                                                        _nj1 = 1;
                                                                                        IkReal x724 = ((0.76056338028169) * cj4);
                                                                                        IkReal x725 = ((0.211267605633803) * sj5);
                                                                                        IkReal x726 = ((0.211267605633803) * cj5);
                                                                                        IkReal x727 = ((0.76056338028169) * sj4 * sj5);
                                                                                        IkReal x728 = ((0.76056338028169) * cj5 * sj4);
                                                                                        if (IKabs((((r10 * x725)) + ((r10 * x728)) + (((1.40845070422535) * py)) + ((r11 * x726)) + (((-1.0) * r11 * x727)) + ((r12 * x724)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * x725)) + ((r20 * x728)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x727)) + ((r21 * x726)) + ((r22 * x724)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10 * x725)) + ((r10 * x728)) + (((1.40845070422535) * py)) + ((r11 * x726)) + (((-1.0) * r11 * x727)) + ((r12 * x724)))) + IKsqr((((r20 * x725)) + ((r20 * x728)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x727)) + ((r21 * x726)) + ((r22 * x724)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j1array[0] = IKatan2((((r10 * x725)) + ((r10 * x728)) + (((1.40845070422535) * py)) + ((r11 * x726)) + (((-1.0) * r11 * x727)) + ((r12 * x724))), (((r20 * x725)) + ((r20 * x728)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x727)) + ((r21 * x726)) + ((r22 * x724))));
                                                                                        sj1array[0] = IKsin(j1array[0]);
                                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                                        if (j1array[0] > IKPI)
                                                                                        {
                                                                                            j1array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j1array[0] < -IKPI)
                                                                                        {
                                                                                            j1array[0] += IK2PI;
                                                                                        }
                                                                                        j1valid[0] = true;
                                                                                        for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                            if (!j1valid[ij1])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij1[0] = ij1;
                                                                                            _ij1[1] = -1;
                                                                                            for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                            {
                                                                                                if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j1valid[iij1] = false;
                                                                                                    _ij1[1] = iij1;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j1 = j1array[ij1];
                                                                                            cj1 = cj1array[ij1];
                                                                                            sj1 = sj1array[ij1];
                                                                                            {
                                                                                                IkReal evalcond[4];
                                                                                                IkReal x729 = ((1.0) * py);
                                                                                                IkReal x730 = ((0.54) * sj4);
                                                                                                IkReal x731 = (r11 * sj5);
                                                                                                IkReal x732 = (cj5 * r10);
                                                                                                IkReal x733 = (cj5 * r11);
                                                                                                IkReal x734 = ((0.54) * cj4);
                                                                                                IkReal x735 = ((0.15) * sj5);
                                                                                                IkReal x736 = (r21 * sj5);
                                                                                                IkReal x737 = ((0.54) * sj3);
                                                                                                IkReal x738 = (cj5 * r21);
                                                                                                IkReal x739 = (cj5 * r20);
                                                                                                IkReal x740 = ((0.71) * (IKsin(j1)));
                                                                                                IkReal x741 = (r10 * x735);
                                                                                                IkReal x742 = ((0.15) * x733);
                                                                                                IkReal x743 = ((0.71) * (IKcos(j1)));
                                                                                                IkReal x744 = ((0.15) * x738);
                                                                                                IkReal x745 = (r20 * x735);
                                                                                                IkReal x746 = (x744 + x745);
                                                                                                IkReal x747 = (x729 + x742 + x741);
                                                                                                evalcond[0] = (pz + (((-1.0) * x730 * x736)) + x746 + ((r22 * x734)) + (((-1.0) * x743)) + ((x730 * x739)));
                                                                                                evalcond[1] = ((((-1.0) * x730 * x732)) + x740 + (((-1.0) * x747)) + (((-1.0) * r12 * x734)) + ((x730 * x731)));
                                                                                                evalcond[2] = ((((-1.0) * r20 * sj5 * x737)) + (((-1.0) * cj3 * x734 * x736)) + (((-1.0) * x737 * x738)) + ((cj3 * x734 * x739)) + x740 + (((-1.0) * cj3 * r22 * x730)) + (((-1.0) * x747)));
                                                                                                evalcond[3] = (((cj3 * x731 * x734)) + ((r10 * sj5 * x737)) + (((-1.0) * cj3 * x732 * x734)) + ((cj3 * r12 * x730)) + (((-1.0) * pz)) + ((x733 * x737)) + x743 + (((-1.0) * x746)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                IkReal x748 = (cj4 * r22);
                                                                                                IkReal x749 = ((1.0) * cj1);
                                                                                                IkReal x750 = (cj5 * sj4);
                                                                                                IkReal x751 = (cj4 * r12);
                                                                                                IkReal x752 = ((1.0) * sj1);
                                                                                                IkReal x753 = (r11 * sj4 * sj5);
                                                                                                IkReal x754 = (r21 * sj4 * sj5);
                                                                                                if (IKabs((((cj1 * x754)) + (((-1.0) * r10 * x750 * x752)) + ((sj1 * x753)) + (((-1.0) * x751 * x752)) + (((-1.0) * r20 * x749 * x750)) + (((-1.0) * x748 * x749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * sj1 * x750)) + (((-1.0) * r10 * x749 * x750)) + ((cj1 * x753)) + ((sj1 * x748)) + (((-1.0) * x752 * x754)) + (((-1.0) * x749 * x751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1 * x754)) + (((-1.0) * r10 * x750 * x752)) + ((sj1 * x753)) + (((-1.0) * x751 * x752)) + (((-1.0) * r20 * x749 * x750)) + (((-1.0) * x748 * x749)))) + IKsqr((((r20 * sj1 * x750)) + (((-1.0) * r10 * x749 * x750)) + ((cj1 * x753)) + ((sj1 * x748)) + (((-1.0) * x752 * x754)) + (((-1.0) * x749 * x751)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j2array[0] = IKatan2((((cj1 * x754)) + (((-1.0) * r10 * x750 * x752)) + ((sj1 * x753)) + (((-1.0) * x751 * x752)) + (((-1.0) * r20 * x749 * x750)) + (((-1.0) * x748 * x749))), (((r20 * sj1 * x750)) + (((-1.0) * r10 * x749 * x750)) + ((cj1 * x753)) + ((sj1 * x748)) + (((-1.0) * x752 * x754)) + (((-1.0) * x749 * x751))));
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[6];
                                                                                                        IkReal x755 = IKsin(j2);
                                                                                                        IkReal x756 = IKcos(j2);
                                                                                                        IkReal x757 = (sj4 * sj5);
                                                                                                        IkReal x758 = ((1.0) * cj5);
                                                                                                        IkReal x759 = (cj3 * cj4);
                                                                                                        IkReal x760 = (cj5 * r11);
                                                                                                        IkReal x761 = ((0.15) * sj5);
                                                                                                        IkReal x762 = (cj3 * sj4);
                                                                                                        IkReal x763 = ((1.0) * cj4);
                                                                                                        IkReal x764 = (cj5 * r21);
                                                                                                        IkReal x765 = (sj3 * sj5);
                                                                                                        IkReal x766 = (sj1 * x756);
                                                                                                        IkReal x767 = (cj1 * x756);
                                                                                                        IkReal x768 = (sj5 * x759);
                                                                                                        IkReal x769 = ((0.54) * x755);
                                                                                                        IkReal x770 = (sj1 * x755);
                                                                                                        IkReal x771 = ((1.0) * cj1 * x755);
                                                                                                        evalcond[0] = ((((-1.0) * r20 * sj4 * x758)) + ((r21 * x757)) + x766 + (((-1.0) * x771)) + (((-1.0) * r22 * x763)));
                                                                                                        evalcond[1] = ((((-1.0) * x767)) + (((-1.0) * r12 * x763)) + ((r11 * x757)) + (((-1.0) * x770)) + (((-1.0) * r10 * sj4 * x758)));
                                                                                                        evalcond[2] = ((((0.71) * cj1)) + ((cj1 * x769)) + (((-0.15) * x764)) + (((-1.0) * r20 * x761)) + (((-1.0) * pz)) + (((-0.54) * x766)));
                                                                                                        evalcond[3] = (((sj1 * x769)) + (((-0.15) * x760)) + (((-1.0) * r10 * x761)) + (((-1.0) * py)) + (((0.71) * sj1)) + (((0.54) * x767)));
                                                                                                        evalcond[4] = (((sj3 * x764)) + ((r20 * x765)) + ((r21 * x768)) + (((-1.0) * r20 * x758 * x759)) + ((r22 * x762)) + x770 + x767);
                                                                                                        evalcond[5] = (((sj3 * x760)) + ((r10 * x765)) + (((-1.0) * r10 * x758 * x759)) + ((r12 * x762)) + x766 + (((-1.0) * x771)) + ((r11 * x768)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    {
                                                                        IkReal j3array[1], cj3array[1], sj3array[1];
                                                                        bool j3valid[1] = {false};
                                                                        _nj3 = 1;
                                                                        IkReal x772 = ((1.0) * r11);
                                                                        IkReal x773 = ((1.0) * sj5);
                                                                        CheckValue<IkReal> x774 = IKPowWithIntegerCheck(IKsign((((cj4 * r22)) + ((cj5 * r20 * sj4)) + (((-1.0) * r21 * sj4 * x773)))), -1);
                                                                        if (!x774.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        CheckValue<IkReal> x775 = IKatan2WithCheck(IkReal(((((-1.0) * r10 * x773)) + (((-1.0) * cj5 * x772)))), IkReal((((cj4 * cj5 * r10)) + (((-1.0) * cj4 * sj5 * x772)) + (((-1.0) * r12 * sj4)))), IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x775.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        j3array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x774.value))) + (x775.value));
                                                                        sj3array[0] = IKsin(j3array[0]);
                                                                        cj3array[0] = IKcos(j3array[0]);
                                                                        if (j3array[0] > IKPI)
                                                                        {
                                                                            j3array[0] -= IK2PI;
                                                                        }
                                                                        else if (j3array[0] < -IKPI)
                                                                        {
                                                                            j3array[0] += IK2PI;
                                                                        }
                                                                        j3valid[0] = true;
                                                                        for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                        {
                                                                            if (!j3valid[ij3])
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij3[0] = ij3;
                                                                            _ij3[1] = -1;
                                                                            for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                            {
                                                                                if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                    j3valid[iij3] = false;
                                                                                    _ij3[1] = iij3;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            j3 = j3array[ij3];
                                                                            cj3 = cj3array[ij3];
                                                                            sj3 = sj3array[ij3];
                                                                            {
                                                                                IkReal evalcond[4];
                                                                                IkReal x776 = IKcos(j3);
                                                                                IkReal x777 = IKsin(j3);
                                                                                IkReal x778 = (r00 * sj5);
                                                                                IkReal x779 = (cj5 * r01);
                                                                                IkReal x780 = (cj4 * r01 * sj5);
                                                                                IkReal x781 = ((1.0) * x776);
                                                                                IkReal x782 = (sj4 * x777);
                                                                                IkReal x783 = (cj4 * sj5 * x777);
                                                                                IkReal x784 = ((1.0) * cj4 * cj5 * x777);
                                                                                evalcond[0] = ((((-1.0) * cj4 * cj5 * r00 * x781)) + ((x777 * x778)) + ((x777 * x779)) + ((r02 * sj4 * x776)) + ((x776 * x780)));
                                                                                evalcond[1] = ((((-1.0) * r20 * sj5 * x781)) + (((-1.0) * r20 * x784)) + ((r21 * x783)) + ((r22 * x782)) + (((-1.0) * cj5 * r21 * x781)));
                                                                                evalcond[2] = ((((-1.0) * cj5 * r11 * x781)) + (((-1.0) * r10 * x784)) + ((r11 * x783)) + (((-1.0) * r10 * sj5 * x781)) + ((r12 * x782)));
                                                                                evalcond[3] = ((-1.0) + (((-1.0) * r00 * x784)) + ((r02 * x782)) + ((x777 * x780)) + (((-1.0) * x778 * x781)) + (((-1.0) * x779 * x781)));
                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
                                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                bool j1valid[1] = {false};
                                                                                _nj1 = 1;
                                                                                IkReal x785 = ((0.76056338028169) * cj4);
                                                                                IkReal x786 = ((0.211267605633803) * sj5);
                                                                                IkReal x787 = ((0.211267605633803) * cj5);
                                                                                IkReal x788 = ((0.76056338028169) * sj4 * sj5);
                                                                                IkReal x789 = ((0.76056338028169) * cj5 * sj4);
                                                                                if (IKabs((((r10 * x789)) + ((r10 * x786)) + (((-1.0) * r11 * x788)) + ((r11 * x787)) + (((1.40845070422535) * py)) + ((r12 * x785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * x789)) + ((r20 * x786)) + ((r21 * x787)) + ((r22 * x785)) + (((-1.0) * r21 * x788)) + (((1.40845070422535) * pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10 * x789)) + ((r10 * x786)) + (((-1.0) * r11 * x788)) + ((r11 * x787)) + (((1.40845070422535) * py)) + ((r12 * x785)))) + IKsqr((((r20 * x789)) + ((r20 * x786)) + ((r21 * x787)) + ((r22 * x785)) + (((-1.0) * r21 * x788)) + (((1.40845070422535) * pz)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j1array[0] = IKatan2((((r10 * x789)) + ((r10 * x786)) + (((-1.0) * r11 * x788)) + ((r11 * x787)) + (((1.40845070422535) * py)) + ((r12 * x785))), (((r20 * x789)) + ((r20 * x786)) + ((r21 * x787)) + ((r22 * x785)) + (((-1.0) * r21 * x788)) + (((1.40845070422535) * pz))));
                                                                                sj1array[0] = IKsin(j1array[0]);
                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                if (j1array[0] > IKPI)
                                                                                {
                                                                                    j1array[0] -= IK2PI;
                                                                                }
                                                                                else if (j1array[0] < -IKPI)
                                                                                {
                                                                                    j1array[0] += IK2PI;
                                                                                }
                                                                                j1valid[0] = true;
                                                                                for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                {
                                                                                    if (!j1valid[ij1])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij1[0] = ij1;
                                                                                    _ij1[1] = -1;
                                                                                    for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                    {
                                                                                        if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j1valid[iij1] = false;
                                                                                            _ij1[1] = iij1;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j1 = j1array[ij1];
                                                                                    cj1 = cj1array[ij1];
                                                                                    sj1 = sj1array[ij1];
                                                                                    {
                                                                                        IkReal evalcond[4];
                                                                                        IkReal x790 = ((1.0) * py);
                                                                                        IkReal x791 = ((0.54) * sj4);
                                                                                        IkReal x792 = (r11 * sj5);
                                                                                        IkReal x793 = (cj5 * r10);
                                                                                        IkReal x794 = (cj5 * r11);
                                                                                        IkReal x795 = ((0.54) * cj4);
                                                                                        IkReal x796 = ((0.15) * sj5);
                                                                                        IkReal x797 = (r21 * sj5);
                                                                                        IkReal x798 = ((0.54) * sj3);
                                                                                        IkReal x799 = (cj5 * r21);
                                                                                        IkReal x800 = (cj5 * r20);
                                                                                        IkReal x801 = ((0.71) * (IKsin(j1)));
                                                                                        IkReal x802 = (r10 * x796);
                                                                                        IkReal x803 = ((0.15) * x794);
                                                                                        IkReal x804 = ((0.71) * (IKcos(j1)));
                                                                                        IkReal x805 = ((0.15) * x799);
                                                                                        IkReal x806 = (r20 * x796);
                                                                                        IkReal x807 = (x805 + x806);
                                                                                        IkReal x808 = (x790 + x803 + x802);
                                                                                        evalcond[0] = ((((-1.0) * x791 * x797)) + ((x791 * x800)) + pz + ((r22 * x795)) + x807 + (((-1.0) * x804)));
                                                                                        evalcond[1] = ((((-1.0) * x791 * x793)) + (((-1.0) * r12 * x795)) + x801 + (((-1.0) * x808)) + ((x791 * x792)));
                                                                                        evalcond[2] = ((((-1.0) * x798 * x799)) + (((-1.0) * cj3 * x795 * x797)) + ((cj3 * x795 * x800)) + (((-1.0) * r20 * sj5 * x798)) + (((-1.0) * cj3 * r22 * x791)) + x801 + (((-1.0) * x808)));
                                                                                        evalcond[3] = (((r10 * sj5 * x798)) + (((-1.0) * pz)) + (((-1.0) * cj3 * x793 * x795)) + x804 + ((x794 * x798)) + (((-1.0) * x807)) + ((cj3 * x792 * x795)) + ((cj3 * r12 * x791)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                        bool j2valid[1] = {false};
                                                                                        _nj2 = 1;
                                                                                        IkReal x809 = (cj4 * r22);
                                                                                        IkReal x810 = ((1.0) * cj1);
                                                                                        IkReal x811 = (cj5 * sj4);
                                                                                        IkReal x812 = (cj4 * r12);
                                                                                        IkReal x813 = ((1.0) * sj1);
                                                                                        IkReal x814 = (r11 * sj4 * sj5);
                                                                                        IkReal x815 = (r21 * sj4 * sj5);
                                                                                        if (IKabs(((((-1.0) * x812 * x813)) + ((sj1 * x814)) + (((-1.0) * r10 * x811 * x813)) + (((-1.0) * x809 * x810)) + (((-1.0) * r20 * x810 * x811)) + ((cj1 * x815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * sj1 * x811)) + (((-1.0) * x810 * x812)) + (((-1.0) * x813 * x815)) + ((sj1 * x809)) + ((cj1 * x814)) + (((-1.0) * r10 * x810 * x811)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x812 * x813)) + ((sj1 * x814)) + (((-1.0) * r10 * x811 * x813)) + (((-1.0) * x809 * x810)) + (((-1.0) * r20 * x810 * x811)) + ((cj1 * x815)))) + IKsqr((((r20 * sj1 * x811)) + (((-1.0) * x810 * x812)) + (((-1.0) * x813 * x815)) + ((sj1 * x809)) + ((cj1 * x814)) + (((-1.0) * r10 * x810 * x811)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j2array[0] = IKatan2(((((-1.0) * x812 * x813)) + ((sj1 * x814)) + (((-1.0) * r10 * x811 * x813)) + (((-1.0) * x809 * x810)) + (((-1.0) * r20 * x810 * x811)) + ((cj1 * x815))), (((r20 * sj1 * x811)) + (((-1.0) * x810 * x812)) + (((-1.0) * x813 * x815)) + ((sj1 * x809)) + ((cj1 * x814)) + (((-1.0) * r10 * x810 * x811))));
                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                        if (j2array[0] > IKPI)
                                                                                        {
                                                                                            j2array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j2array[0] < -IKPI)
                                                                                        {
                                                                                            j2array[0] += IK2PI;
                                                                                        }
                                                                                        j2valid[0] = true;
                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                        {
                                                                                            if (!j2valid[ij2])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij2[0] = ij2;
                                                                                            _ij2[1] = -1;
                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                            {
                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j2valid[iij2] = false;
                                                                                                    _ij2[1] = iij2;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j2 = j2array[ij2];
                                                                                            cj2 = cj2array[ij2];
                                                                                            sj2 = sj2array[ij2];
                                                                                            {
                                                                                                IkReal evalcond[6];
                                                                                                IkReal x816 = IKsin(j2);
                                                                                                IkReal x817 = IKcos(j2);
                                                                                                IkReal x818 = (sj4 * sj5);
                                                                                                IkReal x819 = ((1.0) * cj5);
                                                                                                IkReal x820 = (cj3 * cj4);
                                                                                                IkReal x821 = (cj5 * r11);
                                                                                                IkReal x822 = ((0.15) * sj5);
                                                                                                IkReal x823 = (cj3 * sj4);
                                                                                                IkReal x824 = ((1.0) * cj4);
                                                                                                IkReal x825 = (cj5 * r21);
                                                                                                IkReal x826 = (sj3 * sj5);
                                                                                                IkReal x827 = (sj1 * x817);
                                                                                                IkReal x828 = (cj1 * x817);
                                                                                                IkReal x829 = (sj5 * x820);
                                                                                                IkReal x830 = ((0.54) * x816);
                                                                                                IkReal x831 = (sj1 * x816);
                                                                                                IkReal x832 = ((1.0) * cj1 * x816);
                                                                                                evalcond[0] = ((((-1.0) * r20 * sj4 * x819)) + (((-1.0) * x832)) + (((-1.0) * r22 * x824)) + x827 + ((r21 * x818)));
                                                                                                evalcond[1] = ((((-1.0) * r10 * sj4 * x819)) + ((r11 * x818)) + (((-1.0) * r12 * x824)) + (((-1.0) * x828)) + (((-1.0) * x831)));
                                                                                                evalcond[2] = ((((0.71) * cj1)) + (((-1.0) * r20 * x822)) + (((-0.15) * x825)) + (((-0.54) * x827)) + (((-1.0) * pz)) + ((cj1 * x830)));
                                                                                                evalcond[3] = ((((-0.15) * x821)) + (((-1.0) * py)) + (((0.71) * sj1)) + (((-1.0) * r10 * x822)) + ((sj1 * x830)) + (((0.54) * x828)));
                                                                                                evalcond[4] = (((r21 * x829)) + ((r20 * x826)) + (((-1.0) * r20 * x819 * x820)) + ((sj3 * x825)) + ((r22 * x823)) + x828 + x831);
                                                                                                evalcond[5] = (((r12 * x823)) + ((sj3 * x821)) + ((r10 * x826)) + (((-1.0) * r10 * x819 * x820)) + (((-1.0) * x832)) + x827 + ((r11 * x829)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                        bool bgotonextstatement = true;
                                                        do
                                                        {
                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                            {
                                                                bgotonextstatement = false;
                                                                {
                                                                    IkReal j3eval[3];
                                                                    sj0 = -1.0;
                                                                    cj0 = 0;
                                                                    j0 = -1.5707963267949;
                                                                    IkReal x833 = ((1.0) * sj4);
                                                                    IkReal x834 = ((1.0) * r21);
                                                                    IkReal x835 = ((((-1.0) * r11 * sj5 * x833)) + ((cj5 * r10 * sj4)) + ((cj4 * r12)));
                                                                    j3eval[0] = x835;
                                                                    j3eval[1] = ((IKabs(((((-1.0) * cj5 * x834)) + (((-1.0) * r20 * sj5))))) + (IKabs(((((-1.0) * cj4 * sj5 * x834)) + ((cj4 * cj5 * r20)) + (((-1.0) * r22 * x833))))));
                                                                    j3eval[2] = IKsign(x835);
                                                                    if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                                    {
                                                                        {
                                                                            IkReal j3eval[3];
                                                                            sj0 = -1.0;
                                                                            cj0 = 0;
                                                                            j0 = -1.5707963267949;
                                                                            IkReal x836 = ((1.0) * r11);
                                                                            IkReal x837 = ((1.0) * sj4);
                                                                            IkReal x838 = (((r21 * sj4 * sj5)) + (((-1.0) * cj5 * r20 * x837)) + (((-1.0) * cj4 * r22)));
                                                                            j3eval[0] = x838;
                                                                            j3eval[1] = ((IKabs(((((-1.0) * cj4 * sj5 * x836)) + ((cj4 * cj5 * r10)) + (((-1.0) * r12 * x837))))) + (IKabs(((((-1.0) * r10 * sj5)) + (((-1.0) * cj5 * x836))))));
                                                                            j3eval[2] = IKsign(x838);
                                                                            if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                                            {
                                                                                {
                                                                                    IkReal j3eval[3];
                                                                                    sj0 = -1.0;
                                                                                    cj0 = 0;
                                                                                    j0 = -1.5707963267949;
                                                                                    IkReal x839 = cj4 * cj4;
                                                                                    IkReal x840 = cj5 * cj5;
                                                                                    IkReal x841 = r01 * r01;
                                                                                    IkReal x842 = r02 * r02;
                                                                                    IkReal x843 = r00 * r00;
                                                                                    IkReal x844 = (cj5 * r00);
                                                                                    IkReal x845 = (r01 * sj5);
                                                                                    IkReal x846 = (r02 * sj4);
                                                                                    IkReal x847 = ((2.0) * cj4);
                                                                                    IkReal x848 = ((1.0) * x839);
                                                                                    IkReal x849 = (x840 * x843);
                                                                                    IkReal x850 = (x840 * x841);
                                                                                    IkReal x851 = (((x844 * x846 * x847)) + (((-1.0) * x841 * x848)) + (((-1.0) * x850)) + ((x839 * x842)) + (((-1.0) * x845 * x846 * x847)) + (((-2.0) * x844 * x845)) + (((-1.0) * x842)) + (((-1.0) * x843)) + ((x839 * x850)) + x849 + (((-1.0) * x848 * x849)) + (((2.0) * x839 * x844 * x845)));
                                                                                    j3eval[0] = x851;
                                                                                    j3eval[1] = IKsign(x851);
                                                                                    j3eval[2] = ((IKabs(((((-1.0) * cj4 * x844)) + ((cj4 * x845)) + x846))) + (IKabs(((((-1.0) * r00 * sj5)) + (((-1.0) * cj5 * r01))))));
                                                                                    if (IKabs(j3eval[0]) < 0.0000010000000000 || IKabs(j3eval[1]) < 0.0000010000000000 || IKabs(j3eval[2]) < 0.0000010000000000)
                                                                                    {
                                                                                        continue; // no branches [j1, j2, j3]
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                            bool j3valid[1] = {false};
                                                                                            _nj3 = 1;
                                                                                            IkReal x852 = cj4 * cj4;
                                                                                            IkReal x853 = cj5 * cj5;
                                                                                            IkReal x854 = r01 * r01;
                                                                                            IkReal x855 = r02 * r02;
                                                                                            IkReal x856 = r00 * r00;
                                                                                            IkReal x857 = ((1.0) * cj5);
                                                                                            IkReal x858 = (cj4 * r00);
                                                                                            IkReal x859 = (r02 * sj4);
                                                                                            IkReal x860 = ((2.0) * cj5);
                                                                                            IkReal x861 = (r00 * sj5);
                                                                                            IkReal x862 = ((1.0) * x853);
                                                                                            IkReal x863 = (cj4 * r01 * sj5);
                                                                                            IkReal x864 = (x852 * x854);
                                                                                            CheckValue<IkReal> x865 = IKPowWithIntegerCheck(IKsign(((((-2.0) * x859 * x863)) + (((-1.0) * x852 * x856 * x862)) + (((-1.0) * x854 * x862)) + ((x858 * x859 * x860)) + (((-1.0) * x855)) + (((-1.0) * x856)) + (((-1.0) * x864)) + ((r01 * x852 * x860 * x861)) + ((x853 * x864)) + ((x852 * x855)) + ((x853 * x856)) + (((-1.0) * r01 * x860 * x861)))), -1);
                                                                                            if (!x865.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x866 = IKatan2WithCheck(IkReal((x859 + x863 + (((-1.0) * x857 * x858)))), IkReal(((((-1.0) * r01 * x857)) + (((-1.0) * x861)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (!x866.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            j3array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x865.value))) + (x866.value));
                                                                                            sj3array[0] = IKsin(j3array[0]);
                                                                                            cj3array[0] = IKcos(j3array[0]);
                                                                                            if (j3array[0] > IKPI)
                                                                                            {
                                                                                                j3array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j3array[0] < -IKPI)
                                                                                            {
                                                                                                j3array[0] += IK2PI;
                                                                                            }
                                                                                            j3valid[0] = true;
                                                                                            for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                                            {
                                                                                                if (!j3valid[ij3])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij3[0] = ij3;
                                                                                                _ij3[1] = -1;
                                                                                                for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                                                {
                                                                                                    if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j3valid[iij3] = false;
                                                                                                        _ij3[1] = iij3;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j3 = j3array[ij3];
                                                                                                cj3 = cj3array[ij3];
                                                                                                sj3 = sj3array[ij3];
                                                                                                {
                                                                                                    IkReal evalcond[4];
                                                                                                    IkReal x867 = IKcos(j3);
                                                                                                    IkReal x868 = IKsin(j3);
                                                                                                    IkReal x869 = (r00 * sj5);
                                                                                                    IkReal x870 = (cj5 * r01);
                                                                                                    IkReal x871 = (cj4 * r01 * sj5);
                                                                                                    IkReal x872 = ((1.0) * x867);
                                                                                                    IkReal x873 = (sj4 * x868);
                                                                                                    IkReal x874 = (cj4 * sj5 * x868);
                                                                                                    IkReal x875 = ((1.0) * cj4 * cj5 * x868);
                                                                                                    evalcond[0] = (((x867 * x871)) + ((x868 * x869)) + ((x868 * x870)) + (((-1.0) * cj4 * cj5 * r00 * x872)) + ((r02 * sj4 * x867)));
                                                                                                    evalcond[1] = ((((-1.0) * r20 * sj5 * x872)) + ((r21 * x874)) + ((r22 * x873)) + (((-1.0) * cj5 * r21 * x872)) + (((-1.0) * r20 * x875)));
                                                                                                    evalcond[2] = ((((-1.0) * cj5 * r11 * x872)) + ((r11 * x874)) + ((r12 * x873)) + (((-1.0) * r10 * sj5 * x872)) + (((-1.0) * r10 * x875)));
                                                                                                    evalcond[3] = ((1.0) + ((x868 * x871)) + (((-1.0) * r00 * x875)) + (((-1.0) * x869 * x872)) + ((r02 * x873)) + (((-1.0) * x870 * x872)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                                    bool j1valid[1] = {false};
                                                                                                    _nj1 = 1;
                                                                                                    IkReal x876 = ((0.76056338028169) * cj4);
                                                                                                    IkReal x877 = ((0.211267605633803) * sj5);
                                                                                                    IkReal x878 = ((0.211267605633803) * cj5);
                                                                                                    IkReal x879 = ((0.76056338028169) * sj4 * sj5);
                                                                                                    IkReal x880 = ((0.76056338028169) * cj5 * sj4);
                                                                                                    if (IKabs(((((-1.0) * r12 * x876)) + ((r11 * x879)) + (((-1.40845070422535) * py)) + (((-1.0) * r10 * x880)) + (((-1.0) * r11 * x878)) + (((-1.0) * r10 * x877)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21 * x878)) + ((r20 * x880)) + ((r22 * x876)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x879)) + ((r20 * x877)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r12 * x876)) + ((r11 * x879)) + (((-1.40845070422535) * py)) + (((-1.0) * r10 * x880)) + (((-1.0) * r11 * x878)) + (((-1.0) * r10 * x877)))) + IKsqr((((r21 * x878)) + ((r20 * x880)) + ((r22 * x876)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x879)) + ((r20 * x877)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j1array[0] = IKatan2(((((-1.0) * r12 * x876)) + ((r11 * x879)) + (((-1.40845070422535) * py)) + (((-1.0) * r10 * x880)) + (((-1.0) * r11 * x878)) + (((-1.0) * r10 * x877))), (((r21 * x878)) + ((r20 * x880)) + ((r22 * x876)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x879)) + ((r20 * x877))));
                                                                                                    sj1array[0] = IKsin(j1array[0]);
                                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                                    if (j1array[0] > IKPI)
                                                                                                    {
                                                                                                        j1array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j1array[0] < -IKPI)
                                                                                                    {
                                                                                                        j1array[0] += IK2PI;
                                                                                                    }
                                                                                                    j1valid[0] = true;
                                                                                                    for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                    {
                                                                                                        if (!j1valid[ij1])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij1[0] = ij1;
                                                                                                        _ij1[1] = -1;
                                                                                                        for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                                        {
                                                                                                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j1valid[iij1] = false;
                                                                                                                _ij1[1] = iij1;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j1 = j1array[ij1];
                                                                                                        cj1 = cj1array[ij1];
                                                                                                        sj1 = sj1array[ij1];
                                                                                                        {
                                                                                                            IkReal evalcond[4];
                                                                                                            IkReal x881 = ((0.54) * sj4);
                                                                                                            IkReal x882 = (r11 * sj5);
                                                                                                            IkReal x883 = (cj5 * r10);
                                                                                                            IkReal x884 = (cj5 * r11);
                                                                                                            IkReal x885 = ((0.54) * cj4);
                                                                                                            IkReal x886 = ((0.15) * sj5);
                                                                                                            IkReal x887 = (r21 * sj5);
                                                                                                            IkReal x888 = ((0.54) * sj3);
                                                                                                            IkReal x889 = (cj5 * r21);
                                                                                                            IkReal x890 = (cj5 * r20);
                                                                                                            IkReal x891 = ((0.15) * x889);
                                                                                                            IkReal x892 = (r20 * x886);
                                                                                                            IkReal x893 = ((0.71) * (IKcos(j1)));
                                                                                                            IkReal x894 = ((0.71) * (IKsin(j1)));
                                                                                                            IkReal x895 = (r10 * x886);
                                                                                                            IkReal x896 = ((0.15) * x884);
                                                                                                            IkReal x897 = (pz + x892 + x891);
                                                                                                            IkReal x898 = (x896 + x894 + x895);
                                                                                                            evalcond[0] = (((x881 * x890)) + (((-1.0) * x893)) + (((-1.0) * x881 * x887)) + x897 + ((r22 * x885)));
                                                                                                            evalcond[1] = (((x881 * x883)) + (((-1.0) * x881 * x882)) + py + x898 + ((r12 * x885)));
                                                                                                            evalcond[2] = (((r10 * sj5 * x888)) + (((-1.0) * x893)) + (((-1.0) * cj3 * x883 * x885)) + ((cj3 * r12 * x881)) + ((cj3 * x882 * x885)) + x897 + ((x884 * x888)));
                                                                                                            evalcond[3] = (((r20 * sj5 * x888)) + (((-1.0) * cj3 * x885 * x890)) + (((-1.0) * x898)) + (((-1.0) * py)) + ((cj3 * r22 * x881)) + ((cj3 * x885 * x887)) + ((x888 * x889)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                            bool j2valid[1] = {false};
                                                                                                            _nj2 = 1;
                                                                                                            IkReal x899 = (cj4 * r22);
                                                                                                            IkReal x900 = ((1.0) * cj1);
                                                                                                            IkReal x901 = (cj4 * r12);
                                                                                                            IkReal x902 = (sj1 * sj4);
                                                                                                            IkReal x903 = (cj5 * r10);
                                                                                                            IkReal x904 = (r11 * sj5);
                                                                                                            IkReal x905 = (cj1 * sj4);
                                                                                                            IkReal x906 = (r21 * sj5);
                                                                                                            IkReal x907 = (cj5 * r20);
                                                                                                            if (IKabs(((((-1.0) * x902 * x904)) + ((x905 * x906)) + ((x902 * x903)) + (((-1.0) * sj4 * x900 * x907)) + (((-1.0) * x899 * x900)) + ((sj1 * x901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1 * x901)) + (((-1.0) * x902 * x906)) + ((x903 * x905)) + ((sj1 * x899)) + ((x902 * x907)) + (((-1.0) * sj4 * x900 * x904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x902 * x904)) + ((x905 * x906)) + ((x902 * x903)) + (((-1.0) * sj4 * x900 * x907)) + (((-1.0) * x899 * x900)) + ((sj1 * x901)))) + IKsqr((((cj1 * x901)) + (((-1.0) * x902 * x906)) + ((x903 * x905)) + ((sj1 * x899)) + ((x902 * x907)) + (((-1.0) * sj4 * x900 * x904)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                continue;
                                                                                                            j2array[0] = IKatan2(((((-1.0) * x902 * x904)) + ((x905 * x906)) + ((x902 * x903)) + (((-1.0) * sj4 * x900 * x907)) + (((-1.0) * x899 * x900)) + ((sj1 * x901))), (((cj1 * x901)) + (((-1.0) * x902 * x906)) + ((x903 * x905)) + ((sj1 * x899)) + ((x902 * x907)) + (((-1.0) * sj4 * x900 * x904))));
                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                            if (j2array[0] > IKPI)
                                                                                                            {
                                                                                                                j2array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                            {
                                                                                                                j2array[0] += IK2PI;
                                                                                                            }
                                                                                                            j2valid[0] = true;
                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                            {
                                                                                                                if (!j2valid[ij2])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij2[0] = ij2;
                                                                                                                _ij2[1] = -1;
                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                {
                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j2valid[iij2] = false;
                                                                                                                        _ij2[1] = iij2;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j2 = j2array[ij2];
                                                                                                                cj2 = cj2array[ij2];
                                                                                                                sj2 = sj2array[ij2];
                                                                                                                {
                                                                                                                    IkReal evalcond[6];
                                                                                                                    IkReal x908 = IKcos(j2);
                                                                                                                    IkReal x909 = IKsin(j2);
                                                                                                                    IkReal x910 = (sj4 * sj5);
                                                                                                                    IkReal x911 = ((1.0) * cj5);
                                                                                                                    IkReal x912 = (cj3 * cj4);
                                                                                                                    IkReal x913 = (cj5 * r11);
                                                                                                                    IkReal x914 = ((0.15) * sj5);
                                                                                                                    IkReal x915 = (cj3 * sj4);
                                                                                                                    IkReal x916 = ((1.0) * cj4);
                                                                                                                    IkReal x917 = (cj5 * r21);
                                                                                                                    IkReal x918 = (sj3 * sj5);
                                                                                                                    IkReal x919 = (cj1 * x908);
                                                                                                                    IkReal x920 = (sj1 * x909);
                                                                                                                    IkReal x921 = (sj5 * x912);
                                                                                                                    IkReal x922 = (cj1 * x909);
                                                                                                                    IkReal x923 = (sj1 * x908);
                                                                                                                    IkReal x924 = (x920 + x919);
                                                                                                                    evalcond[0] = ((((-1.0) * r10 * sj4 * x911)) + ((r11 * x910)) + (((-1.0) * r12 * x916)) + x924);
                                                                                                                    evalcond[1] = ((((-1.0) * r22 * x916)) + (((-1.0) * x922)) + ((r21 * x910)) + x923 + (((-1.0) * r20 * sj4 * x911)));
                                                                                                                    evalcond[2] = ((((0.71) * cj1)) + (((-0.54) * x923)) + (((-1.0) * r20 * x914)) + (((-1.0) * pz)) + (((-0.15) * x917)) + (((0.54) * x922)));
                                                                                                                    evalcond[3] = ((((-0.54) * x920)) + (((-0.54) * x919)) + (((-0.71) * sj1)) + (((-1.0) * py)) + (((-0.15) * x913)) + (((-1.0) * r10 * x914)));
                                                                                                                    evalcond[4] = (((r20 * x918)) + ((r21 * x921)) + ((sj3 * x917)) + ((r22 * x915)) + x924 + (((-1.0) * r20 * x911 * x912)));
                                                                                                                    evalcond[5] = (((r12 * x915)) + ((sj3 * x913)) + ((r10 * x918)) + (((-1.0) * x923)) + ((r11 * x921)) + x922 + (((-1.0) * r10 * x911 * x912)));
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                    std::vector<int> vfree(0);
                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                {
                                                                                    IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                    bool j3valid[1] = {false};
                                                                                    _nj3 = 1;
                                                                                    IkReal x925 = ((1.0) * r11);
                                                                                    IkReal x926 = ((1.0) * sj4);
                                                                                    CheckValue<IkReal> x927 = IKatan2WithCheck(IkReal(((((-1.0) * r10 * sj5)) + (((-1.0) * cj5 * x925)))), IkReal(((((-1.0) * cj4 * sj5 * x925)) + (((-1.0) * r12 * x926)) + ((cj4 * cj5 * r10)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x927.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x928 = IKPowWithIntegerCheck(IKsign((((r21 * sj4 * sj5)) + (((-1.0) * cj5 * r20 * x926)) + (((-1.0) * cj4 * r22)))), -1);
                                                                                    if (!x928.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    j3array[0] = ((-1.5707963267949) + (x927.value) + (((1.5707963267949) * (x928.value))));
                                                                                    sj3array[0] = IKsin(j3array[0]);
                                                                                    cj3array[0] = IKcos(j3array[0]);
                                                                                    if (j3array[0] > IKPI)
                                                                                    {
                                                                                        j3array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j3array[0] < -IKPI)
                                                                                    {
                                                                                        j3array[0] += IK2PI;
                                                                                    }
                                                                                    j3valid[0] = true;
                                                                                    for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                                    {
                                                                                        if (!j3valid[ij3])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij3[0] = ij3;
                                                                                        _ij3[1] = -1;
                                                                                        for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                                        {
                                                                                            if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j3valid[iij3] = false;
                                                                                                _ij3[1] = iij3;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j3 = j3array[ij3];
                                                                                        cj3 = cj3array[ij3];
                                                                                        sj3 = sj3array[ij3];
                                                                                        {
                                                                                            IkReal evalcond[4];
                                                                                            IkReal x929 = IKcos(j3);
                                                                                            IkReal x930 = IKsin(j3);
                                                                                            IkReal x931 = (r00 * sj5);
                                                                                            IkReal x932 = (cj5 * r01);
                                                                                            IkReal x933 = (cj4 * r01 * sj5);
                                                                                            IkReal x934 = ((1.0) * x929);
                                                                                            IkReal x935 = (sj4 * x930);
                                                                                            IkReal x936 = (cj4 * sj5 * x930);
                                                                                            IkReal x937 = ((1.0) * cj4 * cj5 * x930);
                                                                                            evalcond[0] = ((((-1.0) * cj4 * cj5 * r00 * x934)) + ((x930 * x932)) + ((x930 * x931)) + ((x929 * x933)) + ((r02 * sj4 * x929)));
                                                                                            evalcond[1] = ((((-1.0) * r20 * x937)) + ((r22 * x935)) + ((r21 * x936)) + (((-1.0) * cj5 * r21 * x934)) + (((-1.0) * r20 * sj5 * x934)));
                                                                                            evalcond[2] = ((((-1.0) * r10 * x937)) + (((-1.0) * r10 * sj5 * x934)) + (((-1.0) * cj5 * r11 * x934)) + ((r11 * x936)) + ((r12 * x935)));
                                                                                            evalcond[3] = ((1.0) + (((-1.0) * x931 * x934)) + ((x930 * x933)) + (((-1.0) * x932 * x934)) + (((-1.0) * r00 * x937)) + ((r02 * x935)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                            bool j1valid[1] = {false};
                                                                                            _nj1 = 1;
                                                                                            IkReal x938 = ((0.76056338028169) * cj4);
                                                                                            IkReal x939 = ((0.211267605633803) * sj5);
                                                                                            IkReal x940 = ((0.211267605633803) * cj5);
                                                                                            IkReal x941 = ((0.76056338028169) * sj4 * sj5);
                                                                                            IkReal x942 = ((0.76056338028169) * cj5 * sj4);
                                                                                            if (IKabs(((((-1.0) * r11 * x940)) + (((-1.0) * r10 * x939)) + (((-1.0) * r12 * x938)) + ((r11 * x941)) + (((-1.40845070422535) * py)) + (((-1.0) * r10 * x942)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21 * x940)) + ((r22 * x938)) + (((-1.0) * r21 * x941)) + (((1.40845070422535) * pz)) + ((r20 * x939)) + ((r20 * x942)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r11 * x940)) + (((-1.0) * r10 * x939)) + (((-1.0) * r12 * x938)) + ((r11 * x941)) + (((-1.40845070422535) * py)) + (((-1.0) * r10 * x942)))) + IKsqr((((r21 * x940)) + ((r22 * x938)) + (((-1.0) * r21 * x941)) + (((1.40845070422535) * pz)) + ((r20 * x939)) + ((r20 * x942)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j1array[0] = IKatan2(((((-1.0) * r11 * x940)) + (((-1.0) * r10 * x939)) + (((-1.0) * r12 * x938)) + ((r11 * x941)) + (((-1.40845070422535) * py)) + (((-1.0) * r10 * x942))), (((r21 * x940)) + ((r22 * x938)) + (((-1.0) * r21 * x941)) + (((1.40845070422535) * pz)) + ((r20 * x939)) + ((r20 * x942))));
                                                                                            sj1array[0] = IKsin(j1array[0]);
                                                                                            cj1array[0] = IKcos(j1array[0]);
                                                                                            if (j1array[0] > IKPI)
                                                                                            {
                                                                                                j1array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j1array[0] < -IKPI)
                                                                                            {
                                                                                                j1array[0] += IK2PI;
                                                                                            }
                                                                                            j1valid[0] = true;
                                                                                            for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                            {
                                                                                                if (!j1valid[ij1])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij1[0] = ij1;
                                                                                                _ij1[1] = -1;
                                                                                                for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                                {
                                                                                                    if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j1valid[iij1] = false;
                                                                                                        _ij1[1] = iij1;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j1 = j1array[ij1];
                                                                                                cj1 = cj1array[ij1];
                                                                                                sj1 = sj1array[ij1];
                                                                                                {
                                                                                                    IkReal evalcond[4];
                                                                                                    IkReal x943 = ((0.54) * sj4);
                                                                                                    IkReal x944 = (r11 * sj5);
                                                                                                    IkReal x945 = (cj5 * r10);
                                                                                                    IkReal x946 = (cj5 * r11);
                                                                                                    IkReal x947 = ((0.54) * cj4);
                                                                                                    IkReal x948 = ((0.15) * sj5);
                                                                                                    IkReal x949 = (r21 * sj5);
                                                                                                    IkReal x950 = ((0.54) * sj3);
                                                                                                    IkReal x951 = (cj5 * r21);
                                                                                                    IkReal x952 = (cj5 * r20);
                                                                                                    IkReal x953 = ((0.15) * x951);
                                                                                                    IkReal x954 = (r20 * x948);
                                                                                                    IkReal x955 = ((0.71) * (IKcos(j1)));
                                                                                                    IkReal x956 = ((0.71) * (IKsin(j1)));
                                                                                                    IkReal x957 = (r10 * x948);
                                                                                                    IkReal x958 = ((0.15) * x946);
                                                                                                    IkReal x959 = (pz + x954 + x953);
                                                                                                    IkReal x960 = (x958 + x957 + x956);
                                                                                                    evalcond[0] = (((x943 * x952)) + ((r22 * x947)) + (((-1.0) * x943 * x949)) + (((-1.0) * x955)) + x959);
                                                                                                    evalcond[1] = (((r12 * x947)) + ((x943 * x945)) + py + (((-1.0) * x943 * x944)) + x960);
                                                                                                    evalcond[2] = (((r10 * sj5 * x950)) + ((cj3 * x944 * x947)) + ((x946 * x950)) + (((-1.0) * cj3 * x945 * x947)) + (((-1.0) * x955)) + ((cj3 * r12 * x943)) + x959);
                                                                                                    evalcond[3] = (((cj3 * x947 * x949)) + ((r20 * sj5 * x950)) + (((-1.0) * cj3 * x947 * x952)) + (((-1.0) * py)) + ((cj3 * r22 * x943)) + (((-1.0) * x960)) + ((x950 * x951)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    IkReal x961 = (cj4 * r22);
                                                                                                    IkReal x962 = ((1.0) * cj1);
                                                                                                    IkReal x963 = (cj4 * r12);
                                                                                                    IkReal x964 = (sj1 * sj4);
                                                                                                    IkReal x965 = (cj5 * r10);
                                                                                                    IkReal x966 = (r11 * sj5);
                                                                                                    IkReal x967 = (cj1 * sj4);
                                                                                                    IkReal x968 = (r21 * sj5);
                                                                                                    IkReal x969 = (cj5 * r20);
                                                                                                    if (IKabs(((((-1.0) * x964 * x966)) + (((-1.0) * x961 * x962)) + (((-1.0) * sj4 * x962 * x969)) + ((x967 * x968)) + ((x964 * x965)) + ((sj1 * x963)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * x964 * x968)) + ((cj1 * x963)) + (((-1.0) * sj4 * x962 * x966)) + ((x965 * x967)) + ((x964 * x969)) + ((sj1 * x961)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x964 * x966)) + (((-1.0) * x961 * x962)) + (((-1.0) * sj4 * x962 * x969)) + ((x967 * x968)) + ((x964 * x965)) + ((sj1 * x963)))) + IKsqr(((((-1.0) * x964 * x968)) + ((cj1 * x963)) + (((-1.0) * sj4 * x962 * x966)) + ((x965 * x967)) + ((x964 * x969)) + ((sj1 * x961)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2(((((-1.0) * x964 * x966)) + (((-1.0) * x961 * x962)) + (((-1.0) * sj4 * x962 * x969)) + ((x967 * x968)) + ((x964 * x965)) + ((sj1 * x963))), ((((-1.0) * x964 * x968)) + ((cj1 * x963)) + (((-1.0) * sj4 * x962 * x966)) + ((x965 * x967)) + ((x964 * x969)) + ((sj1 * x961))));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[6];
                                                                                                            IkReal x970 = IKcos(j2);
                                                                                                            IkReal x971 = IKsin(j2);
                                                                                                            IkReal x972 = (sj4 * sj5);
                                                                                                            IkReal x973 = ((1.0) * cj5);
                                                                                                            IkReal x974 = (cj3 * cj4);
                                                                                                            IkReal x975 = (cj5 * r11);
                                                                                                            IkReal x976 = ((0.15) * sj5);
                                                                                                            IkReal x977 = (cj3 * sj4);
                                                                                                            IkReal x978 = ((1.0) * cj4);
                                                                                                            IkReal x979 = (cj5 * r21);
                                                                                                            IkReal x980 = (sj3 * sj5);
                                                                                                            IkReal x981 = (cj1 * x970);
                                                                                                            IkReal x982 = (sj1 * x971);
                                                                                                            IkReal x983 = (sj5 * x974);
                                                                                                            IkReal x984 = (cj1 * x971);
                                                                                                            IkReal x985 = (sj1 * x970);
                                                                                                            IkReal x986 = (x981 + x982);
                                                                                                            evalcond[0] = (((r11 * x972)) + (((-1.0) * r12 * x978)) + x986 + (((-1.0) * r10 * sj4 * x973)));
                                                                                                            evalcond[1] = ((((-1.0) * x984)) + ((r21 * x972)) + (((-1.0) * r20 * sj4 * x973)) + x985 + (((-1.0) * r22 * x978)));
                                                                                                            evalcond[2] = ((((-0.15) * x979)) + (((0.71) * cj1)) + (((-1.0) * r20 * x976)) + (((-0.54) * x985)) + (((0.54) * x984)) + (((-1.0) * pz)));
                                                                                                            evalcond[3] = ((((-0.15) * x975)) + (((-0.54) * x981)) + (((-0.54) * x982)) + (((-0.71) * sj1)) + (((-1.0) * py)) + (((-1.0) * r10 * x976)));
                                                                                                            evalcond[4] = (((r22 * x977)) + ((r21 * x983)) + (((-1.0) * r20 * x973 * x974)) + ((r20 * x980)) + x986 + ((sj3 * x979)));
                                                                                                            evalcond[5] = ((((-1.0) * x985)) + ((r12 * x977)) + ((r11 * x983)) + ((r10 * x980)) + x984 + ((sj3 * x975)) + (((-1.0) * r10 * x973 * x974)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        {
                                                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                                                            bool j3valid[1] = {false};
                                                                            _nj3 = 1;
                                                                            IkReal x987 = ((1.0) * r21);
                                                                            IkReal x988 = ((1.0) * sj4);
                                                                            CheckValue<IkReal> x989 = IKPowWithIntegerCheck(IKsign((((cj5 * r10 * sj4)) + (((-1.0) * r11 * sj5 * x988)) + ((cj4 * r12)))), -1);
                                                                            if (!x989.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x990 = IKatan2WithCheck(IkReal(((((-1.0) * cj5 * x987)) + (((-1.0) * r20 * sj5)))), IkReal((((cj4 * cj5 * r20)) + (((-1.0) * cj4 * sj5 * x987)) + (((-1.0) * r22 * x988)))), IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x990.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            j3array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x989.value))) + (x990.value));
                                                                            sj3array[0] = IKsin(j3array[0]);
                                                                            cj3array[0] = IKcos(j3array[0]);
                                                                            if (j3array[0] > IKPI)
                                                                            {
                                                                                j3array[0] -= IK2PI;
                                                                            }
                                                                            else if (j3array[0] < -IKPI)
                                                                            {
                                                                                j3array[0] += IK2PI;
                                                                            }
                                                                            j3valid[0] = true;
                                                                            for (int ij3 = 0; ij3 < 1; ++ij3)
                                                                            {
                                                                                if (!j3valid[ij3])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij3[0] = ij3;
                                                                                _ij3[1] = -1;
                                                                                for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                                                {
                                                                                    if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j3valid[iij3] = false;
                                                                                        _ij3[1] = iij3;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j3 = j3array[ij3];
                                                                                cj3 = cj3array[ij3];
                                                                                sj3 = sj3array[ij3];
                                                                                {
                                                                                    IkReal evalcond[4];
                                                                                    IkReal x991 = IKcos(j3);
                                                                                    IkReal x992 = IKsin(j3);
                                                                                    IkReal x993 = (r00 * sj5);
                                                                                    IkReal x994 = (cj5 * r01);
                                                                                    IkReal x995 = (cj4 * r01 * sj5);
                                                                                    IkReal x996 = ((1.0) * x991);
                                                                                    IkReal x997 = (sj4 * x992);
                                                                                    IkReal x998 = (cj4 * sj5 * x992);
                                                                                    IkReal x999 = ((1.0) * cj4 * cj5 * x992);
                                                                                    evalcond[0] = (((x991 * x995)) + ((r02 * sj4 * x991)) + ((x992 * x994)) + ((x992 * x993)) + (((-1.0) * cj4 * cj5 * r00 * x996)));
                                                                                    evalcond[1] = ((((-1.0) * cj5 * r21 * x996)) + (((-1.0) * r20 * sj5 * x996)) + ((r21 * x998)) + ((r22 * x997)) + (((-1.0) * r20 * x999)));
                                                                                    evalcond[2] = (((r12 * x997)) + (((-1.0) * r10 * sj5 * x996)) + (((-1.0) * cj5 * r11 * x996)) + (((-1.0) * r10 * x999)) + ((r11 * x998)));
                                                                                    evalcond[3] = ((1.0) + (((-1.0) * x994 * x996)) + ((x992 * x995)) + ((r02 * x997)) + (((-1.0) * r00 * x999)) + (((-1.0) * x993 * x996)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                    bool j1valid[1] = {false};
                                                                                    _nj1 = 1;
                                                                                    IkReal x1000 = ((0.76056338028169) * cj4);
                                                                                    IkReal x1001 = ((0.211267605633803) * sj5);
                                                                                    IkReal x1002 = ((0.211267605633803) * cj5);
                                                                                    IkReal x1003 = ((0.76056338028169) * sj4 * sj5);
                                                                                    IkReal x1004 = ((0.76056338028169) * cj5 * sj4);
                                                                                    if (IKabs(((((-1.0) * r10 * x1001)) + (((-1.0) * r10 * x1004)) + (((-1.40845070422535) * py)) + (((-1.0) * r12 * x1000)) + (((-1.0) * r11 * x1002)) + ((r11 * x1003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * r21 * x1003)) + ((r21 * x1002)) + (((1.40845070422535) * pz)) + ((r20 * x1004)) + ((r20 * x1001)) + ((r22 * x1000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r10 * x1001)) + (((-1.0) * r10 * x1004)) + (((-1.40845070422535) * py)) + (((-1.0) * r12 * x1000)) + (((-1.0) * r11 * x1002)) + ((r11 * x1003)))) + IKsqr(((((-1.0) * r21 * x1003)) + ((r21 * x1002)) + (((1.40845070422535) * pz)) + ((r20 * x1004)) + ((r20 * x1001)) + ((r22 * x1000)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j1array[0] = IKatan2(((((-1.0) * r10 * x1001)) + (((-1.0) * r10 * x1004)) + (((-1.40845070422535) * py)) + (((-1.0) * r12 * x1000)) + (((-1.0) * r11 * x1002)) + ((r11 * x1003))), ((((-1.0) * r21 * x1003)) + ((r21 * x1002)) + (((1.40845070422535) * pz)) + ((r20 * x1004)) + ((r20 * x1001)) + ((r22 * x1000))));
                                                                                    sj1array[0] = IKsin(j1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    if (j1array[0] > IKPI)
                                                                                    {
                                                                                        j1array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j1array[0] < -IKPI)
                                                                                    {
                                                                                        j1array[0] += IK2PI;
                                                                                    }
                                                                                    j1valid[0] = true;
                                                                                    for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                    {
                                                                                        if (!j1valid[ij1])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij1[0] = ij1;
                                                                                        _ij1[1] = -1;
                                                                                        for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                        {
                                                                                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j1valid[iij1] = false;
                                                                                                _ij1[1] = iij1;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j1 = j1array[ij1];
                                                                                        cj1 = cj1array[ij1];
                                                                                        sj1 = sj1array[ij1];
                                                                                        {
                                                                                            IkReal evalcond[4];
                                                                                            IkReal x1005 = ((0.54) * sj4);
                                                                                            IkReal x1006 = (r11 * sj5);
                                                                                            IkReal x1007 = (cj5 * r10);
                                                                                            IkReal x1008 = (cj5 * r11);
                                                                                            IkReal x1009 = ((0.54) * cj4);
                                                                                            IkReal x1010 = ((0.15) * sj5);
                                                                                            IkReal x1011 = (r21 * sj5);
                                                                                            IkReal x1012 = ((0.54) * sj3);
                                                                                            IkReal x1013 = (cj5 * r21);
                                                                                            IkReal x1014 = (cj5 * r20);
                                                                                            IkReal x1015 = ((0.15) * x1013);
                                                                                            IkReal x1016 = (r20 * x1010);
                                                                                            IkReal x1017 = ((0.71) * (IKcos(j1)));
                                                                                            IkReal x1018 = ((0.71) * (IKsin(j1)));
                                                                                            IkReal x1019 = (r10 * x1010);
                                                                                            IkReal x1020 = ((0.15) * x1008);
                                                                                            IkReal x1021 = (x1015 + x1016 + pz);
                                                                                            IkReal x1022 = (x1018 + x1019 + x1020);
                                                                                            evalcond[0] = (x1021 + (((-1.0) * x1017)) + (((-1.0) * x1005 * x1011)) + ((x1005 * x1014)) + ((r22 * x1009)));
                                                                                            evalcond[1] = (x1022 + (((-1.0) * x1005 * x1006)) + py + ((x1005 * x1007)) + ((r12 * x1009)));
                                                                                            evalcond[2] = (x1021 + (((-1.0) * x1017)) + ((r10 * sj5 * x1012)) + ((cj3 * r12 * x1005)) + (((-1.0) * cj3 * x1007 * x1009)) + ((cj3 * x1006 * x1009)) + ((x1008 * x1012)));
                                                                                            evalcond[3] = (((cj3 * r22 * x1005)) + (((-1.0) * x1022)) + (((-1.0) * py)) + ((x1012 * x1013)) + ((r20 * sj5 * x1012)) + ((cj3 * x1009 * x1011)) + (((-1.0) * cj3 * x1009 * x1014)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            IkReal x1023 = (cj4 * r22);
                                                                                            IkReal x1024 = ((1.0) * cj1);
                                                                                            IkReal x1025 = (cj4 * r12);
                                                                                            IkReal x1026 = (sj1 * sj4);
                                                                                            IkReal x1027 = (cj5 * r10);
                                                                                            IkReal x1028 = (r11 * sj5);
                                                                                            IkReal x1029 = (cj1 * sj4);
                                                                                            IkReal x1030 = (r21 * sj5);
                                                                                            IkReal x1031 = (cj5 * r20);
                                                                                            if (IKabs((((sj1 * x1025)) + (((-1.0) * x1026 * x1028)) + (((-1.0) * x1023 * x1024)) + ((x1026 * x1027)) + ((x1029 * x1030)) + (((-1.0) * sj4 * x1024 * x1031)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1 * x1023)) + ((x1026 * x1031)) + (((-1.0) * x1026 * x1030)) + (((-1.0) * sj4 * x1024 * x1028)) + ((x1027 * x1029)) + ((cj1 * x1025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1 * x1025)) + (((-1.0) * x1026 * x1028)) + (((-1.0) * x1023 * x1024)) + ((x1026 * x1027)) + ((x1029 * x1030)) + (((-1.0) * sj4 * x1024 * x1031)))) + IKsqr((((sj1 * x1023)) + ((x1026 * x1031)) + (((-1.0) * x1026 * x1030)) + (((-1.0) * sj4 * x1024 * x1028)) + ((x1027 * x1029)) + ((cj1 * x1025)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j2array[0] = IKatan2((((sj1 * x1025)) + (((-1.0) * x1026 * x1028)) + (((-1.0) * x1023 * x1024)) + ((x1026 * x1027)) + ((x1029 * x1030)) + (((-1.0) * sj4 * x1024 * x1031))), (((sj1 * x1023)) + ((x1026 * x1031)) + (((-1.0) * x1026 * x1030)) + (((-1.0) * sj4 * x1024 * x1028)) + ((x1027 * x1029)) + ((cj1 * x1025))));
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[6];
                                                                                                    IkReal x1032 = IKcos(j2);
                                                                                                    IkReal x1033 = IKsin(j2);
                                                                                                    IkReal x1034 = (sj4 * sj5);
                                                                                                    IkReal x1035 = ((1.0) * cj5);
                                                                                                    IkReal x1036 = (cj3 * cj4);
                                                                                                    IkReal x1037 = (cj5 * r11);
                                                                                                    IkReal x1038 = ((0.15) * sj5);
                                                                                                    IkReal x1039 = (cj3 * sj4);
                                                                                                    IkReal x1040 = ((1.0) * cj4);
                                                                                                    IkReal x1041 = (cj5 * r21);
                                                                                                    IkReal x1042 = (sj3 * sj5);
                                                                                                    IkReal x1043 = (cj1 * x1032);
                                                                                                    IkReal x1044 = (sj1 * x1033);
                                                                                                    IkReal x1045 = (sj5 * x1036);
                                                                                                    IkReal x1046 = (cj1 * x1033);
                                                                                                    IkReal x1047 = (sj1 * x1032);
                                                                                                    IkReal x1048 = (x1043 + x1044);
                                                                                                    evalcond[0] = (x1048 + (((-1.0) * r12 * x1040)) + (((-1.0) * r10 * sj4 * x1035)) + ((r11 * x1034)));
                                                                                                    evalcond[1] = (x1047 + (((-1.0) * r22 * x1040)) + ((r21 * x1034)) + (((-1.0) * r20 * sj4 * x1035)) + (((-1.0) * x1046)));
                                                                                                    evalcond[2] = ((((0.71) * cj1)) + (((-1.0) * r20 * x1038)) + (((-1.0) * pz)) + (((0.54) * x1046)) + (((-0.54) * x1047)) + (((-0.15) * x1041)));
                                                                                                    evalcond[3] = ((((-1.0) * r10 * x1038)) + (((-0.71) * sj1)) + (((-1.0) * py)) + (((-0.15) * x1037)) + (((-0.54) * x1043)) + (((-0.54) * x1044)));
                                                                                                    evalcond[4] = (((r22 * x1039)) + x1048 + (((-1.0) * r20 * x1035 * x1036)) + ((sj3 * x1041)) + ((r20 * x1042)) + ((r21 * x1045)));
                                                                                                    evalcond[5] = (x1046 + ((r11 * x1045)) + ((sj3 * x1037)) + ((r10 * x1042)) + (((-1.0) * r10 * x1035 * x1036)) + (((-1.0) * x1047)) + ((r12 * x1039)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } while (0);
                                                        if (bgotonextstatement)
                                                        {
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                                if (1)
                                                                {
                                                                    bgotonextstatement = false;
                                                                    continue; // branch miss [j1, j2, j3]
                                                                }
                                                            } while (0);
                                                            if (bgotonextstatement)
                                                            {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        {
                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                            bool j3valid[1] = {false};
                                            _nj3 = 1;
                                            IkReal x1049 = ((1.0) * sj0);
                                            IkReal x1050 = (cj4 * cj5);
                                            IkReal x1051 = (cj0 * r00);
                                            IkReal x1052 = ((1.0) * sj4);
                                            IkReal x1053 = (cj4 * sj5);
                                            IkReal x1054 = ((1.0) * cj0 * r01);
                                            CheckValue<IkReal> x1055 = IKPowWithIntegerCheck(IKsign((((cj4 * r22)) + (((-1.0) * r21 * sj5 * x1052)) + ((cj5 * r20 * sj4)))), -1);
                                            if (!x1055.valid)
                                            {
                                                continue;
                                            }
                                            CheckValue<IkReal> x1056 = IKatan2WithCheck(IkReal(((((-1.0) * sj5 * x1051)) + (((-1.0) * cj5 * x1054)) + (((-1.0) * r10 * sj5 * x1049)) + (((-1.0) * cj5 * r11 * x1049)))), IkReal(((((-1.0) * cj0 * r02 * x1052)) + ((x1050 * x1051)) + (((-1.0) * r11 * x1049 * x1053)) + ((r10 * sj0 * x1050)) + (((-1.0) * x1053 * x1054)) + (((-1.0) * r12 * sj4 * x1049)))), IKFAST_ATAN2_MAGTHRESH);
                                            if (!x1056.valid)
                                            {
                                                continue;
                                            }
                                            j3array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x1055.value))) + (x1056.value));
                                            sj3array[0] = IKsin(j3array[0]);
                                            cj3array[0] = IKcos(j3array[0]);
                                            if (j3array[0] > IKPI)
                                            {
                                                j3array[0] -= IK2PI;
                                            }
                                            else if (j3array[0] < -IKPI)
                                            {
                                                j3array[0] += IK2PI;
                                            }
                                            j3valid[0] = true;
                                            for (int ij3 = 0; ij3 < 1; ++ij3)
                                            {
                                                if (!j3valid[ij3])
                                                {
                                                    continue;
                                                }
                                                _ij3[0] = ij3;
                                                _ij3[1] = -1;
                                                for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                                {
                                                    if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                                    {
                                                        j3valid[iij3] = false;
                                                        _ij3[1] = iij3;
                                                        break;
                                                    }
                                                }
                                                j3 = j3array[ij3];
                                                cj3 = cj3array[ij3];
                                                sj3 = sj3array[ij3];
                                                {
                                                    IkReal evalcond[3];
                                                    IkReal x1057 = IKsin(j3);
                                                    IkReal x1058 = IKcos(j3);
                                                    IkReal x1059 = ((1.0) * cj5);
                                                    IkReal x1060 = (cj4 * x1057);
                                                    IkReal x1061 = (sj4 * x1057);
                                                    IkReal x1062 = ((1.0) * sj5 * x1058);
                                                    evalcond[0] = ((((-1.0) * r21 * x1058 * x1059)) + (((-1.0) * r20 * x1062)) + (((-1.0) * r20 * x1059 * x1060)) + ((r21 * sj5 * x1060)) + ((r22 * x1061)));
                                                    evalcond[1] = ((((-1.0) * r10 * x1059 * x1060)) + ((r11 * sj5 * x1060)) + ((r12 * x1061)) + cj0 + (((-1.0) * r10 * x1062)) + (((-1.0) * r11 * x1058 * x1059)));
                                                    evalcond[2] = ((((-1.0) * sj0)) + (((-1.0) * r00 * x1062)) + (((-1.0) * r00 * x1059 * x1060)) + ((r01 * sj5 * x1060)) + (((-1.0) * r01 * x1058 * x1059)) + ((r02 * x1061)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                        continue;
                                                    }
                                                }

                                                {
                                                    IkReal j1eval[1];
                                                    j1eval[0] = sj0;
                                                    if (IKabs(j1eval[0]) < 0.0000010000000000)
                                                    {
                                                        {
                                                            IkReal j1eval[1];
                                                            j1eval[0] = cj0;
                                                            if (IKabs(j1eval[0]) < 0.0000010000000000)
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                bool j1valid[1] = {false};
                                                                                _nj1 = 1;
                                                                                IkReal x1063 = ((0.76056338028169) * cj4);
                                                                                IkReal x1064 = ((0.211267605633803) * sj5);
                                                                                IkReal x1065 = ((0.211267605633803) * cj5);
                                                                                IkReal x1066 = ((0.76056338028169) * sj4 * sj5);
                                                                                IkReal x1067 = ((0.76056338028169) * cj5 * sj4);
                                                                                if (IKabs((((r12 * x1063)) + (((-1.0) * r11 * x1066)) + (((1.40845070422535) * py)) + ((r10 * x1064)) + ((r10 * x1067)) + ((r11 * x1065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * r21 * x1066)) + ((r20 * x1064)) + ((r20 * x1067)) + (((1.40845070422535) * pz)) + ((r22 * x1063)) + ((r21 * x1065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12 * x1063)) + (((-1.0) * r11 * x1066)) + (((1.40845070422535) * py)) + ((r10 * x1064)) + ((r10 * x1067)) + ((r11 * x1065)))) + IKsqr(((((-1.0) * r21 * x1066)) + ((r20 * x1064)) + ((r20 * x1067)) + (((1.40845070422535) * pz)) + ((r22 * x1063)) + ((r21 * x1065)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j1array[0] = IKatan2((((r12 * x1063)) + (((-1.0) * r11 * x1066)) + (((1.40845070422535) * py)) + ((r10 * x1064)) + ((r10 * x1067)) + ((r11 * x1065))), ((((-1.0) * r21 * x1066)) + ((r20 * x1064)) + ((r20 * x1067)) + (((1.40845070422535) * pz)) + ((r22 * x1063)) + ((r21 * x1065))));
                                                                                sj1array[0] = IKsin(j1array[0]);
                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                if (j1array[0] > IKPI)
                                                                                {
                                                                                    j1array[0] -= IK2PI;
                                                                                }
                                                                                else if (j1array[0] < -IKPI)
                                                                                {
                                                                                    j1array[0] += IK2PI;
                                                                                }
                                                                                j1valid[0] = true;
                                                                                for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                {
                                                                                    if (!j1valid[ij1])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij1[0] = ij1;
                                                                                    _ij1[1] = -1;
                                                                                    for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                    {
                                                                                        if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j1valid[iij1] = false;
                                                                                            _ij1[1] = iij1;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j1 = j1array[ij1];
                                                                                    cj1 = cj1array[ij1];
                                                                                    sj1 = sj1array[ij1];
                                                                                    {
                                                                                        IkReal evalcond[4];
                                                                                        IkReal x1068 = ((1.0) * py);
                                                                                        IkReal x1069 = ((0.54) * sj4);
                                                                                        IkReal x1070 = (r11 * sj5);
                                                                                        IkReal x1071 = (cj5 * r10);
                                                                                        IkReal x1072 = (cj5 * r11);
                                                                                        IkReal x1073 = ((0.54) * cj4);
                                                                                        IkReal x1074 = ((0.15) * sj5);
                                                                                        IkReal x1075 = (r21 * sj5);
                                                                                        IkReal x1076 = ((0.54) * sj3);
                                                                                        IkReal x1077 = (cj5 * r21);
                                                                                        IkReal x1078 = (cj5 * r20);
                                                                                        IkReal x1079 = ((0.71) * (IKsin(j1)));
                                                                                        IkReal x1080 = (r10 * x1074);
                                                                                        IkReal x1081 = ((0.15) * x1072);
                                                                                        IkReal x1082 = ((0.71) * (IKcos(j1)));
                                                                                        IkReal x1083 = ((0.15) * x1077);
                                                                                        IkReal x1084 = (r20 * x1074);
                                                                                        IkReal x1085 = (x1084 + x1083);
                                                                                        IkReal x1086 = (x1068 + x1081 + x1080);
                                                                                        evalcond[0] = (((x1069 * x1078)) + x1085 + pz + ((r22 * x1073)) + (((-1.0) * x1082)) + (((-1.0) * x1069 * x1075)));
                                                                                        evalcond[1] = (((x1069 * x1070)) + x1079 + (((-1.0) * r12 * x1073)) + (((-1.0) * x1086)) + (((-1.0) * x1069 * x1071)));
                                                                                        evalcond[2] = (x1079 + (((-1.0) * cj3 * x1073 * x1075)) + (((-1.0) * x1076 * x1077)) + (((-1.0) * r20 * sj5 * x1076)) + (((-1.0) * cj3 * r22 * x1069)) + ((cj3 * x1073 * x1078)) + (((-1.0) * x1086)));
                                                                                        evalcond[3] = (x1082 + ((cj3 * x1070 * x1073)) + (((-1.0) * pz)) + ((r10 * sj5 * x1076)) + ((cj3 * r12 * x1069)) + ((x1072 * x1076)) + (((-1.0) * cj3 * x1071 * x1073)) + (((-1.0) * x1085)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                        bool j2valid[1] = {false};
                                                                                        _nj2 = 1;
                                                                                        IkReal x1087 = (cj4 * r22);
                                                                                        IkReal x1088 = ((1.0) * cj1);
                                                                                        IkReal x1089 = (cj5 * sj4);
                                                                                        IkReal x1090 = (cj4 * r12);
                                                                                        IkReal x1091 = ((1.0) * sj1);
                                                                                        IkReal x1092 = (r11 * sj4 * sj5);
                                                                                        IkReal x1093 = (r21 * sj4 * sj5);
                                                                                        if (IKabs((((cj1 * x1093)) + ((sj1 * x1092)) + (((-1.0) * x1090 * x1091)) + (((-1.0) * x1087 * x1088)) + (((-1.0) * r10 * x1089 * x1091)) + (((-1.0) * r20 * x1088 * x1089)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * x1091 * x1093)) + ((cj1 * x1092)) + ((r20 * sj1 * x1089)) + (((-1.0) * x1088 * x1090)) + ((sj1 * x1087)) + (((-1.0) * r10 * x1088 * x1089)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1 * x1093)) + ((sj1 * x1092)) + (((-1.0) * x1090 * x1091)) + (((-1.0) * x1087 * x1088)) + (((-1.0) * r10 * x1089 * x1091)) + (((-1.0) * r20 * x1088 * x1089)))) + IKsqr(((((-1.0) * x1091 * x1093)) + ((cj1 * x1092)) + ((r20 * sj1 * x1089)) + (((-1.0) * x1088 * x1090)) + ((sj1 * x1087)) + (((-1.0) * r10 * x1088 * x1089)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j2array[0] = IKatan2((((cj1 * x1093)) + ((sj1 * x1092)) + (((-1.0) * x1090 * x1091)) + (((-1.0) * x1087 * x1088)) + (((-1.0) * r10 * x1089 * x1091)) + (((-1.0) * r20 * x1088 * x1089))), ((((-1.0) * x1091 * x1093)) + ((cj1 * x1092)) + ((r20 * sj1 * x1089)) + (((-1.0) * x1088 * x1090)) + ((sj1 * x1087)) + (((-1.0) * r10 * x1088 * x1089))));
                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                        if (j2array[0] > IKPI)
                                                                                        {
                                                                                            j2array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j2array[0] < -IKPI)
                                                                                        {
                                                                                            j2array[0] += IK2PI;
                                                                                        }
                                                                                        j2valid[0] = true;
                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                        {
                                                                                            if (!j2valid[ij2])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij2[0] = ij2;
                                                                                            _ij2[1] = -1;
                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                            {
                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j2valid[iij2] = false;
                                                                                                    _ij2[1] = iij2;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j2 = j2array[ij2];
                                                                                            cj2 = cj2array[ij2];
                                                                                            sj2 = sj2array[ij2];
                                                                                            {
                                                                                                IkReal evalcond[6];
                                                                                                IkReal x1094 = IKsin(j2);
                                                                                                IkReal x1095 = IKcos(j2);
                                                                                                IkReal x1096 = (sj4 * sj5);
                                                                                                IkReal x1097 = ((1.0) * cj5);
                                                                                                IkReal x1098 = (cj3 * cj4);
                                                                                                IkReal x1099 = (cj5 * r11);
                                                                                                IkReal x1100 = ((0.15) * sj5);
                                                                                                IkReal x1101 = (cj3 * sj4);
                                                                                                IkReal x1102 = ((1.0) * cj4);
                                                                                                IkReal x1103 = (cj5 * r21);
                                                                                                IkReal x1104 = (sj3 * sj5);
                                                                                                IkReal x1105 = (sj1 * x1095);
                                                                                                IkReal x1106 = (cj1 * x1095);
                                                                                                IkReal x1107 = (sj5 * x1098);
                                                                                                IkReal x1108 = ((0.54) * x1094);
                                                                                                IkReal x1109 = (sj1 * x1094);
                                                                                                IkReal x1110 = ((1.0) * cj1 * x1094);
                                                                                                evalcond[0] = (x1105 + (((-1.0) * r22 * x1102)) + ((r21 * x1096)) + (((-1.0) * r20 * sj4 * x1097)) + (((-1.0) * x1110)));
                                                                                                evalcond[1] = ((((-1.0) * r12 * x1102)) + (((-1.0) * r10 * sj4 * x1097)) + (((-1.0) * x1109)) + (((-1.0) * x1106)) + ((r11 * x1096)));
                                                                                                evalcond[2] = ((((0.71) * cj1)) + (((-0.15) * x1103)) + ((cj1 * x1108)) + (((-1.0) * r20 * x1100)) + (((-1.0) * pz)) + (((-0.54) * x1105)));
                                                                                                evalcond[3] = ((((-0.15) * x1099)) + (((-1.0) * py)) + ((sj1 * x1108)) + (((0.71) * sj1)) + (((0.54) * x1106)) + (((-1.0) * r10 * x1100)));
                                                                                                evalcond[4] = (x1106 + x1109 + ((sj3 * x1103)) + ((r20 * x1104)) + (((-1.0) * r20 * x1097 * x1098)) + ((r22 * x1101)) + ((r21 * x1107)));
                                                                                                evalcond[5] = (x1105 + (((-1.0) * r10 * x1097 * x1098)) + ((r12 * x1101)) + ((sj3 * x1099)) + (((-1.0) * x1110)) + ((r10 * x1104)) + ((r11 * x1107)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                    bool j1valid[1] = {false};
                                                                                    _nj1 = 1;
                                                                                    IkReal x1111 = ((0.76056338028169) * cj4);
                                                                                    IkReal x1112 = ((0.211267605633803) * sj5);
                                                                                    IkReal x1113 = ((0.211267605633803) * cj5);
                                                                                    IkReal x1114 = ((0.76056338028169) * sj4 * sj5);
                                                                                    IkReal x1115 = ((0.76056338028169) * cj5 * sj4);
                                                                                    if (IKabs(((((-1.0) * r11 * x1113)) + (((-1.0) * r12 * x1111)) + (((-1.40845070422535) * py)) + ((r11 * x1114)) + (((-1.0) * r10 * x1115)) + (((-1.0) * r10 * x1112)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * x1115)) + ((r20 * x1112)) + (((-1.0) * r21 * x1114)) + ((r22 * x1111)) + (((1.40845070422535) * pz)) + ((r21 * x1113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r11 * x1113)) + (((-1.0) * r12 * x1111)) + (((-1.40845070422535) * py)) + ((r11 * x1114)) + (((-1.0) * r10 * x1115)) + (((-1.0) * r10 * x1112)))) + IKsqr((((r20 * x1115)) + ((r20 * x1112)) + (((-1.0) * r21 * x1114)) + ((r22 * x1111)) + (((1.40845070422535) * pz)) + ((r21 * x1113)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j1array[0] = IKatan2(((((-1.0) * r11 * x1113)) + (((-1.0) * r12 * x1111)) + (((-1.40845070422535) * py)) + ((r11 * x1114)) + (((-1.0) * r10 * x1115)) + (((-1.0) * r10 * x1112))), (((r20 * x1115)) + ((r20 * x1112)) + (((-1.0) * r21 * x1114)) + ((r22 * x1111)) + (((1.40845070422535) * pz)) + ((r21 * x1113))));
                                                                                    sj1array[0] = IKsin(j1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    if (j1array[0] > IKPI)
                                                                                    {
                                                                                        j1array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j1array[0] < -IKPI)
                                                                                    {
                                                                                        j1array[0] += IK2PI;
                                                                                    }
                                                                                    j1valid[0] = true;
                                                                                    for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                    {
                                                                                        if (!j1valid[ij1])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij1[0] = ij1;
                                                                                        _ij1[1] = -1;
                                                                                        for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                        {
                                                                                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j1valid[iij1] = false;
                                                                                                _ij1[1] = iij1;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j1 = j1array[ij1];
                                                                                        cj1 = cj1array[ij1];
                                                                                        sj1 = sj1array[ij1];
                                                                                        {
                                                                                            IkReal evalcond[4];
                                                                                            IkReal x1116 = ((0.54) * sj4);
                                                                                            IkReal x1117 = (r11 * sj5);
                                                                                            IkReal x1118 = (cj5 * r10);
                                                                                            IkReal x1119 = (cj5 * r11);
                                                                                            IkReal x1120 = ((0.54) * cj4);
                                                                                            IkReal x1121 = ((0.15) * sj5);
                                                                                            IkReal x1122 = (r21 * sj5);
                                                                                            IkReal x1123 = ((0.54) * sj3);
                                                                                            IkReal x1124 = (cj5 * r21);
                                                                                            IkReal x1125 = (cj5 * r20);
                                                                                            IkReal x1126 = ((0.15) * x1124);
                                                                                            IkReal x1127 = (r20 * x1121);
                                                                                            IkReal x1128 = ((0.71) * (IKcos(j1)));
                                                                                            IkReal x1129 = ((0.71) * (IKsin(j1)));
                                                                                            IkReal x1130 = (r10 * x1121);
                                                                                            IkReal x1131 = ((0.15) * x1119);
                                                                                            IkReal x1132 = (x1126 + x1127 + pz);
                                                                                            IkReal x1133 = (x1129 + x1131 + x1130);
                                                                                            evalcond[0] = (x1132 + (((-1.0) * x1116 * x1122)) + ((r22 * x1120)) + (((-1.0) * x1128)) + ((x1116 * x1125)));
                                                                                            evalcond[1] = (x1133 + (((-1.0) * x1116 * x1117)) + py + ((x1116 * x1118)) + ((r12 * x1120)));
                                                                                            evalcond[2] = (((r10 * sj5 * x1123)) + x1132 + (((-1.0) * cj3 * x1118 * x1120)) + ((x1119 * x1123)) + ((cj3 * x1117 * x1120)) + ((cj3 * r12 * x1116)) + (((-1.0) * x1128)));
                                                                                            evalcond[3] = (((r20 * sj5 * x1123)) + (((-1.0) * cj3 * x1120 * x1125)) + (((-1.0) * py)) + (((-1.0) * x1133)) + ((x1123 * x1124)) + ((cj3 * x1120 * x1122)) + ((cj3 * r22 * x1116)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            IkReal x1134 = (cj4 * r22);
                                                                                            IkReal x1135 = ((1.0) * cj1);
                                                                                            IkReal x1136 = (cj4 * r12);
                                                                                            IkReal x1137 = (sj1 * sj4);
                                                                                            IkReal x1138 = (cj5 * r10);
                                                                                            IkReal x1139 = (r11 * sj5);
                                                                                            IkReal x1140 = (cj1 * sj4);
                                                                                            IkReal x1141 = (r21 * sj5);
                                                                                            IkReal x1142 = (cj5 * r20);
                                                                                            if (IKabs((((x1140 * x1141)) + ((sj1 * x1136)) + ((x1137 * x1138)) + (((-1.0) * x1134 * x1135)) + (((-1.0) * sj4 * x1135 * x1142)) + (((-1.0) * x1137 * x1139)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj4 * x1135 * x1139)) + ((x1137 * x1142)) + (((-1.0) * x1137 * x1141)) + ((sj1 * x1134)) + ((cj1 * x1136)) + ((x1138 * x1140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1140 * x1141)) + ((sj1 * x1136)) + ((x1137 * x1138)) + (((-1.0) * x1134 * x1135)) + (((-1.0) * sj4 * x1135 * x1142)) + (((-1.0) * x1137 * x1139)))) + IKsqr(((((-1.0) * sj4 * x1135 * x1139)) + ((x1137 * x1142)) + (((-1.0) * x1137 * x1141)) + ((sj1 * x1134)) + ((cj1 * x1136)) + ((x1138 * x1140)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j2array[0] = IKatan2((((x1140 * x1141)) + ((sj1 * x1136)) + ((x1137 * x1138)) + (((-1.0) * x1134 * x1135)) + (((-1.0) * sj4 * x1135 * x1142)) + (((-1.0) * x1137 * x1139))), ((((-1.0) * sj4 * x1135 * x1139)) + ((x1137 * x1142)) + (((-1.0) * x1137 * x1141)) + ((sj1 * x1134)) + ((cj1 * x1136)) + ((x1138 * x1140))));
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[6];
                                                                                                    IkReal x1143 = IKcos(j2);
                                                                                                    IkReal x1144 = IKsin(j2);
                                                                                                    IkReal x1145 = (sj4 * sj5);
                                                                                                    IkReal x1146 = ((1.0) * cj5);
                                                                                                    IkReal x1147 = (cj3 * cj4);
                                                                                                    IkReal x1148 = (cj5 * r11);
                                                                                                    IkReal x1149 = ((0.15) * sj5);
                                                                                                    IkReal x1150 = (cj3 * sj4);
                                                                                                    IkReal x1151 = ((1.0) * cj4);
                                                                                                    IkReal x1152 = (cj5 * r21);
                                                                                                    IkReal x1153 = (sj3 * sj5);
                                                                                                    IkReal x1154 = (cj1 * x1143);
                                                                                                    IkReal x1155 = (sj1 * x1144);
                                                                                                    IkReal x1156 = (sj5 * x1147);
                                                                                                    IkReal x1157 = (cj1 * x1144);
                                                                                                    IkReal x1158 = (sj1 * x1143);
                                                                                                    IkReal x1159 = (x1155 + x1154);
                                                                                                    evalcond[0] = (x1159 + ((r11 * x1145)) + (((-1.0) * r10 * sj4 * x1146)) + (((-1.0) * r12 * x1151)));
                                                                                                    evalcond[1] = (x1158 + (((-1.0) * r20 * sj4 * x1146)) + (((-1.0) * x1157)) + (((-1.0) * r22 * x1151)) + ((r21 * x1145)));
                                                                                                    evalcond[2] = ((((-0.54) * x1158)) + (((0.71) * cj1)) + (((-0.15) * x1152)) + (((0.54) * x1157)) + (((-1.0) * pz)) + (((-1.0) * r20 * x1149)));
                                                                                                    evalcond[3] = ((((-0.54) * x1155)) + (((-0.54) * x1154)) + (((-0.71) * sj1)) + (((-1.0) * r10 * x1149)) + (((-1.0) * py)) + (((-0.15) * x1148)));
                                                                                                    evalcond[4] = (x1159 + ((r22 * x1150)) + (((-1.0) * r20 * x1146 * x1147)) + ((sj3 * x1152)) + ((r20 * x1153)) + ((r21 * x1156)));
                                                                                                    evalcond[5] = (x1157 + ((r11 * x1156)) + ((r12 * x1150)) + ((sj3 * x1148)) + (((-1.0) * x1158)) + (((-1.0) * r10 * x1146 * x1147)) + ((r10 * x1153)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1] = {false};
                                                                                        _nj1 = 1;
                                                                                        IkReal x1160 = ((0.76056338028169) * cj4);
                                                                                        IkReal x1161 = ((0.211267605633803) * sj5);
                                                                                        IkReal x1162 = ((0.211267605633803) * cj5);
                                                                                        IkReal x1163 = ((0.76056338028169) * cj5 * sj4);
                                                                                        IkReal x1164 = ((0.76056338028169) * sj4 * sj5);
                                                                                        if (IKabs((((r02 * x1160)) + ((r00 * x1163)) + ((r00 * x1161)) + ((r01 * x1162)) + (((1.40845070422535) * px)) + (((-1.0) * r01 * x1164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * r21 * x1164)) + ((r20 * x1161)) + ((r20 * x1163)) + ((r21 * x1162)) + (((1.40845070422535) * pz)) + ((r22 * x1160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02 * x1160)) + ((r00 * x1163)) + ((r00 * x1161)) + ((r01 * x1162)) + (((1.40845070422535) * px)) + (((-1.0) * r01 * x1164)))) + IKsqr(((((-1.0) * r21 * x1164)) + ((r20 * x1161)) + ((r20 * x1163)) + ((r21 * x1162)) + (((1.40845070422535) * pz)) + ((r22 * x1160)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j1array[0] = IKatan2((((r02 * x1160)) + ((r00 * x1163)) + ((r00 * x1161)) + ((r01 * x1162)) + (((1.40845070422535) * px)) + (((-1.0) * r01 * x1164))), ((((-1.0) * r21 * x1164)) + ((r20 * x1161)) + ((r20 * x1163)) + ((r21 * x1162)) + (((1.40845070422535) * pz)) + ((r22 * x1160))));
                                                                                        sj1array[0] = IKsin(j1array[0]);
                                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                                        if (j1array[0] > IKPI)
                                                                                        {
                                                                                            j1array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j1array[0] < -IKPI)
                                                                                        {
                                                                                            j1array[0] += IK2PI;
                                                                                        }
                                                                                        j1valid[0] = true;
                                                                                        for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                            if (!j1valid[ij1])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij1[0] = ij1;
                                                                                            _ij1[1] = -1;
                                                                                            for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                            {
                                                                                                if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j1valid[iij1] = false;
                                                                                                    _ij1[1] = iij1;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j1 = j1array[ij1];
                                                                                            cj1 = cj1array[ij1];
                                                                                            sj1 = sj1array[ij1];
                                                                                            {
                                                                                                IkReal evalcond[4];
                                                                                                IkReal x1165 = ((1.0) * px);
                                                                                                IkReal x1166 = (cj5 * r00);
                                                                                                IkReal x1167 = (r01 * sj5);
                                                                                                IkReal x1168 = ((0.54) * sj4);
                                                                                                IkReal x1169 = ((0.15) * sj5);
                                                                                                IkReal x1170 = (r21 * sj5);
                                                                                                IkReal x1171 = ((0.54) * cj4);
                                                                                                IkReal x1172 = ((0.15) * cj5);
                                                                                                IkReal x1173 = (cj5 * r20);
                                                                                                IkReal x1174 = ((0.54) * sj3);
                                                                                                IkReal x1175 = ((0.71) * (IKsin(j1)));
                                                                                                IkReal x1176 = (r00 * x1169);
                                                                                                IkReal x1177 = (r01 * x1172);
                                                                                                IkReal x1178 = ((0.71) * (IKcos(j1)));
                                                                                                IkReal x1179 = (r21 * x1172);
                                                                                                IkReal x1180 = (r20 * x1169);
                                                                                                IkReal x1181 = (cj3 * x1171);
                                                                                                IkReal x1182 = (x1180 + x1179);
                                                                                                IkReal x1183 = (x1165 + x1177 + x1176);
                                                                                                evalcond[0] = (x1182 + (((-1.0) * x1168 * x1170)) + ((x1168 * x1173)) + pz + (((-1.0) * x1178)) + ((r22 * x1171)));
                                                                                                evalcond[1] = ((((-1.0) * x1166 * x1168)) + (((-1.0) * r02 * x1171)) + x1175 + (((-1.0) * x1183)) + ((x1167 * x1168)));
                                                                                                evalcond[2] = (x1175 + (((-1.0) * cj5 * r21 * x1174)) + (((-1.0) * r20 * sj5 * x1174)) + ((x1173 * x1181)) + (((-1.0) * x1183)) + (((-1.0) * cj3 * r22 * x1168)) + (((-1.0) * x1170 * x1181)));
                                                                                                evalcond[3] = (x1178 + ((cj3 * r02 * x1168)) + (((-1.0) * pz)) + (((-1.0) * x1182)) + ((x1167 * x1181)) + ((r00 * sj5 * x1174)) + (((-1.0) * x1166 * x1181)) + ((cj5 * r01 * x1174)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                IkReal x1184 = (sj1 * sj4);
                                                                                                IkReal x1185 = (r01 * sj5);
                                                                                                IkReal x1186 = (cj4 * r22);
                                                                                                IkReal x1187 = ((1.0) * cj1);
                                                                                                IkReal x1188 = (cj5 * r00);
                                                                                                IkReal x1189 = (cj1 * sj4);
                                                                                                IkReal x1190 = (cj4 * r02);
                                                                                                IkReal x1191 = (r21 * sj5);
                                                                                                IkReal x1192 = (cj5 * r20);
                                                                                                if (IKabs((((x1184 * x1185)) + (((-1.0) * x1186 * x1187)) + ((x1189 * x1191)) + (((-1.0) * sj4 * x1187 * x1192)) + (((-1.0) * x1184 * x1188)) + (((-1.0) * sj1 * x1190)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1184 * x1192)) + ((x1185 * x1189)) + ((sj1 * x1186)) + (((-1.0) * x1187 * x1190)) + (((-1.0) * x1184 * x1191)) + (((-1.0) * sj4 * x1187 * x1188)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1184 * x1185)) + (((-1.0) * x1186 * x1187)) + ((x1189 * x1191)) + (((-1.0) * sj4 * x1187 * x1192)) + (((-1.0) * x1184 * x1188)) + (((-1.0) * sj1 * x1190)))) + IKsqr((((x1184 * x1192)) + ((x1185 * x1189)) + ((sj1 * x1186)) + (((-1.0) * x1187 * x1190)) + (((-1.0) * x1184 * x1191)) + (((-1.0) * sj4 * x1187 * x1188)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j2array[0] = IKatan2((((x1184 * x1185)) + (((-1.0) * x1186 * x1187)) + ((x1189 * x1191)) + (((-1.0) * sj4 * x1187 * x1192)) + (((-1.0) * x1184 * x1188)) + (((-1.0) * sj1 * x1190))), (((x1184 * x1192)) + ((x1185 * x1189)) + ((sj1 * x1186)) + (((-1.0) * x1187 * x1190)) + (((-1.0) * x1184 * x1191)) + (((-1.0) * sj4 * x1187 * x1188))));
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[6];
                                                                                                        IkReal x1193 = IKsin(j2);
                                                                                                        IkReal x1194 = IKcos(j2);
                                                                                                        IkReal x1195 = (cj3 * sj4);
                                                                                                        IkReal x1196 = (cj3 * cj4);
                                                                                                        IkReal x1197 = (r21 * sj5);
                                                                                                        IkReal x1198 = ((1.0) * cj5);
                                                                                                        IkReal x1199 = (cj5 * r01);
                                                                                                        IkReal x1200 = ((0.15) * sj5);
                                                                                                        IkReal x1201 = (r01 * sj5);
                                                                                                        IkReal x1202 = (sj3 * sj5);
                                                                                                        IkReal x1203 = ((1.0) * cj4);
                                                                                                        IkReal x1204 = (cj5 * r21);
                                                                                                        IkReal x1205 = (sj1 * x1194);
                                                                                                        IkReal x1206 = (cj1 * x1194);
                                                                                                        IkReal x1207 = ((0.54) * x1193);
                                                                                                        IkReal x1208 = (sj1 * x1193);
                                                                                                        IkReal x1209 = ((1.0) * cj1 * x1193);
                                                                                                        evalcond[0] = ((((-1.0) * r20 * sj4 * x1198)) + x1205 + ((sj4 * x1197)) + (((-1.0) * r22 * x1203)) + (((-1.0) * x1209)));
                                                                                                        evalcond[1] = ((((-1.0) * r00 * sj4 * x1198)) + ((sj4 * x1201)) + (((-1.0) * r02 * x1203)) + (((-1.0) * x1208)) + (((-1.0) * x1206)));
                                                                                                        evalcond[2] = ((((-0.15) * x1204)) + (((0.71) * cj1)) + (((-0.54) * x1205)) + ((cj1 * x1207)) + (((-1.0) * pz)) + (((-1.0) * r20 * x1200)));
                                                                                                        evalcond[3] = ((((-1.0) * px)) + (((-1.0) * r00 * x1200)) + ((sj1 * x1207)) + (((0.71) * sj1)) + (((-0.15) * x1199)) + (((0.54) * x1206)));
                                                                                                        evalcond[4] = (x1208 + x1206 + ((r22 * x1195)) + ((r20 * x1202)) + ((x1196 * x1197)) + ((sj3 * x1204)) + (((-1.0) * r20 * x1196 * x1198)));
                                                                                                        evalcond[5] = (x1205 + (((-1.0) * r00 * x1196 * x1198)) + ((r02 * x1195)) + ((sj3 * x1199)) + ((r00 * x1202)) + (((-1.0) * x1209)) + ((x1196 * x1201)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                            bool j1valid[1] = {false};
                                                                                            _nj1 = 1;
                                                                                            IkReal x1210 = ((0.76056338028169) * cj4);
                                                                                            IkReal x1211 = ((0.211267605633803) * sj5);
                                                                                            IkReal x1212 = ((0.211267605633803) * cj5);
                                                                                            IkReal x1213 = ((0.76056338028169) * cj5 * sj4);
                                                                                            IkReal x1214 = ((0.76056338028169) * sj4 * sj5);
                                                                                            if (IKabs(((((-1.0) * r02 * x1210)) + (((-1.0) * r00 * x1213)) + (((-1.0) * r00 * x1211)) + ((r01 * x1214)) + (((-1.0) * r01 * x1212)) + (((-1.40845070422535) * px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22 * x1210)) + ((r20 * x1213)) + ((r20 * x1211)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x1214)) + ((r21 * x1212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r02 * x1210)) + (((-1.0) * r00 * x1213)) + (((-1.0) * r00 * x1211)) + ((r01 * x1214)) + (((-1.0) * r01 * x1212)) + (((-1.40845070422535) * px)))) + IKsqr((((r22 * x1210)) + ((r20 * x1213)) + ((r20 * x1211)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x1214)) + ((r21 * x1212)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j1array[0] = IKatan2(((((-1.0) * r02 * x1210)) + (((-1.0) * r00 * x1213)) + (((-1.0) * r00 * x1211)) + ((r01 * x1214)) + (((-1.0) * r01 * x1212)) + (((-1.40845070422535) * px))), (((r22 * x1210)) + ((r20 * x1213)) + ((r20 * x1211)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x1214)) + ((r21 * x1212))));
                                                                                            sj1array[0] = IKsin(j1array[0]);
                                                                                            cj1array[0] = IKcos(j1array[0]);
                                                                                            if (j1array[0] > IKPI)
                                                                                            {
                                                                                                j1array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j1array[0] < -IKPI)
                                                                                            {
                                                                                                j1array[0] += IK2PI;
                                                                                            }
                                                                                            j1valid[0] = true;
                                                                                            for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                            {
                                                                                                if (!j1valid[ij1])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij1[0] = ij1;
                                                                                                _ij1[1] = -1;
                                                                                                for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                                {
                                                                                                    if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j1valid[iij1] = false;
                                                                                                        _ij1[1] = iij1;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j1 = j1array[ij1];
                                                                                                cj1 = cj1array[ij1];
                                                                                                sj1 = sj1array[ij1];
                                                                                                {
                                                                                                    IkReal evalcond[4];
                                                                                                    IkReal x1215 = (cj5 * r00);
                                                                                                    IkReal x1216 = (r01 * sj5);
                                                                                                    IkReal x1217 = ((0.54) * sj4);
                                                                                                    IkReal x1218 = ((0.15) * sj5);
                                                                                                    IkReal x1219 = (r21 * sj5);
                                                                                                    IkReal x1220 = ((0.54) * cj4);
                                                                                                    IkReal x1221 = ((0.15) * cj5);
                                                                                                    IkReal x1222 = (cj5 * r20);
                                                                                                    IkReal x1223 = ((0.54) * sj3);
                                                                                                    IkReal x1224 = (r21 * x1221);
                                                                                                    IkReal x1225 = (r20 * x1218);
                                                                                                    IkReal x1226 = ((0.71) * (IKcos(j1)));
                                                                                                    IkReal x1227 = (r00 * x1218);
                                                                                                    IkReal x1228 = ((0.71) * (IKsin(j1)));
                                                                                                    IkReal x1229 = (r01 * x1221);
                                                                                                    IkReal x1230 = (cj3 * x1220);
                                                                                                    IkReal x1231 = (x1225 + x1224 + pz);
                                                                                                    IkReal x1232 = (x1227 + x1229 + x1228);
                                                                                                    evalcond[0] = (x1231 + ((x1217 * x1222)) + (((-1.0) * x1226)) + (((-1.0) * x1217 * x1219)) + ((r22 * x1220)));
                                                                                                    evalcond[1] = (x1232 + (((-1.0) * x1216 * x1217)) + ((r02 * x1220)) + px + ((x1215 * x1217)));
                                                                                                    evalcond[2] = (x1231 + (((-1.0) * x1226)) + ((r00 * sj5 * x1223)) + ((x1216 * x1230)) + (((-1.0) * x1215 * x1230)) + ((cj3 * r02 * x1217)) + ((cj5 * r01 * x1223)));
                                                                                                    evalcond[3] = (((cj5 * r21 * x1223)) + ((x1219 * x1230)) + (((-1.0) * x1232)) + ((cj3 * r22 * x1217)) + (((-1.0) * x1222 * x1230)) + (((-1.0) * px)) + ((r20 * sj5 * x1223)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    IkReal x1233 = (cj4 * r22);
                                                                                                    IkReal x1234 = ((1.0) * cj1);
                                                                                                    IkReal x1235 = (cj4 * r02);
                                                                                                    IkReal x1236 = (sj4 * sj5);
                                                                                                    IkReal x1237 = ((1.0) * sj1);
                                                                                                    IkReal x1238 = (cj5 * sj4);
                                                                                                    IkReal x1239 = (sj1 * x1238);
                                                                                                    if (IKabs((((sj1 * x1235)) + ((r00 * x1239)) + ((cj1 * r21 * x1236)) + (((-1.0) * r01 * x1236 * x1237)) + (((-1.0) * x1233 * x1234)) + (((-1.0) * r20 * x1234 * x1238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1 * x1233)) + ((r20 * x1239)) + (((-1.0) * r21 * x1236 * x1237)) + (((-1.0) * r01 * x1234 * x1236)) + ((cj1 * r00 * x1238)) + ((cj1 * x1235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1 * x1235)) + ((r00 * x1239)) + ((cj1 * r21 * x1236)) + (((-1.0) * r01 * x1236 * x1237)) + (((-1.0) * x1233 * x1234)) + (((-1.0) * r20 * x1234 * x1238)))) + IKsqr((((sj1 * x1233)) + ((r20 * x1239)) + (((-1.0) * r21 * x1236 * x1237)) + (((-1.0) * r01 * x1234 * x1236)) + ((cj1 * r00 * x1238)) + ((cj1 * x1235)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2((((sj1 * x1235)) + ((r00 * x1239)) + ((cj1 * r21 * x1236)) + (((-1.0) * r01 * x1236 * x1237)) + (((-1.0) * x1233 * x1234)) + (((-1.0) * r20 * x1234 * x1238))), (((sj1 * x1233)) + ((r20 * x1239)) + (((-1.0) * r21 * x1236 * x1237)) + (((-1.0) * r01 * x1234 * x1236)) + ((cj1 * r00 * x1238)) + ((cj1 * x1235))));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[6];
                                                                                                            IkReal x1240 = IKcos(j2);
                                                                                                            IkReal x1241 = IKsin(j2);
                                                                                                            IkReal x1242 = (cj3 * sj4);
                                                                                                            IkReal x1243 = (cj3 * cj4);
                                                                                                            IkReal x1244 = (r21 * sj5);
                                                                                                            IkReal x1245 = ((1.0) * cj5);
                                                                                                            IkReal x1246 = (cj5 * r01);
                                                                                                            IkReal x1247 = ((0.15) * sj5);
                                                                                                            IkReal x1248 = (r01 * sj5);
                                                                                                            IkReal x1249 = (sj3 * sj5);
                                                                                                            IkReal x1250 = ((1.0) * cj4);
                                                                                                            IkReal x1251 = (cj5 * r21);
                                                                                                            IkReal x1252 = (cj1 * x1240);
                                                                                                            IkReal x1253 = (sj1 * x1241);
                                                                                                            IkReal x1254 = (cj1 * x1241);
                                                                                                            IkReal x1255 = (sj1 * x1240);
                                                                                                            IkReal x1256 = (x1252 + x1253);
                                                                                                            evalcond[0] = (x1256 + (((-1.0) * r02 * x1250)) + (((-1.0) * r00 * sj4 * x1245)) + ((sj4 * x1248)));
                                                                                                            evalcond[1] = (x1255 + (((-1.0) * r22 * x1250)) + (((-1.0) * r20 * sj4 * x1245)) + (((-1.0) * x1254)) + ((sj4 * x1244)));
                                                                                                            evalcond[2] = ((((0.71) * cj1)) + (((-0.54) * x1255)) + (((-1.0) * r20 * x1247)) + (((-1.0) * pz)) + (((0.54) * x1254)) + (((-0.15) * x1251)));
                                                                                                            evalcond[3] = ((((-0.15) * x1246)) + (((-0.71) * sj1)) + (((-0.54) * x1253)) + (((-0.54) * x1252)) + (((-1.0) * px)) + (((-1.0) * r00 * x1247)));
                                                                                                            evalcond[4] = (x1256 + (((-1.0) * r20 * x1243 * x1245)) + ((r20 * x1249)) + ((x1243 * x1244)) + ((r22 * x1242)) + ((sj3 * x1251)));
                                                                                                            evalcond[5] = (x1254 + (((-1.0) * r00 * x1243 * x1245)) + ((sj3 * x1246)) + ((r00 * x1249)) + ((r02 * x1242)) + ((x1243 * x1248)) + (((-1.0) * x1255)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        if (1)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            continue; // branch miss [j1, j2]
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                    bool j1valid[1] = {false};
                                                                    _nj1 = 1;
                                                                    IkReal x1257 = (cj0 * r01);
                                                                    IkReal x1258 = (sj4 * sj5);
                                                                    IkReal x1259 = ((0.54) * cj0);
                                                                    IkReal x1260 = (cj5 * sj4);
                                                                    CheckValue<IkReal> x1261 = IKPowWithIntegerCheck(cj0, -2);
                                                                    if (!x1261.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if (IKabs(((-1.40845070422535) * (x1261.value) * (((((0.54) * x1257 * x1258)) + (((-0.15) * cj5 * x1257)) + (((-0.15) * cj0 * r00 * sj5)) + (((-1.0) * r00 * x1259 * x1260)) + (((-1.0) * cj4 * r02 * x1259)) + (((-1.0) * cj0 * px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.211267605633803) * r20 * sj5)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * r20 * x1260)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)) + (((-0.76056338028169) * r21 * x1258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535) * (x1261.value) * (((((0.54) * x1257 * x1258)) + (((-0.15) * cj5 * x1257)) + (((-0.15) * cj0 * r00 * sj5)) + (((-1.0) * r00 * x1259 * x1260)) + (((-1.0) * cj4 * r02 * x1259)) + (((-1.0) * cj0 * px)))))) + IKsqr(((((0.211267605633803) * r20 * sj5)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * r20 * x1260)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)) + (((-0.76056338028169) * r21 * x1258)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                    j1array[0] = IKatan2(((-1.40845070422535) * (x1261.value) * (((((0.54) * x1257 * x1258)) + (((-0.15) * cj5 * x1257)) + (((-0.15) * cj0 * r00 * sj5)) + (((-1.0) * r00 * x1259 * x1260)) + (((-1.0) * cj4 * r02 * x1259)) + (((-1.0) * cj0 * px))))), ((((0.211267605633803) * r20 * sj5)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * r20 * x1260)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)) + (((-0.76056338028169) * r21 * x1258))));
                                                                    sj1array[0] = IKsin(j1array[0]);
                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                    if (j1array[0] > IKPI)
                                                                    {
                                                                        j1array[0] -= IK2PI;
                                                                    }
                                                                    else if (j1array[0] < -IKPI)
                                                                    {
                                                                        j1array[0] += IK2PI;
                                                                    }
                                                                    j1valid[0] = true;
                                                                    for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                    {
                                                                        if (!j1valid[ij1])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij1[0] = ij1;
                                                                        _ij1[1] = -1;
                                                                        for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                        {
                                                                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j1valid[iij1] = false;
                                                                                _ij1[1] = iij1;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j1 = j1array[ij1];
                                                                        cj1 = cj1array[ij1];
                                                                        sj1 = sj1array[ij1];
                                                                        {
                                                                            IkReal evalcond[9];
                                                                            IkReal x1262 = IKsin(j1);
                                                                            IkReal x1263 = IKcos(j1);
                                                                            IkReal x1264 = ((0.54) * cj4);
                                                                            IkReal x1265 = (cj5 * r00);
                                                                            IkReal x1266 = ((1.0) * py);
                                                                            IkReal x1267 = ((0.15) * sj0);
                                                                            IkReal x1268 = (r10 * sj5);
                                                                            IkReal x1269 = ((1.0) * px);
                                                                            IkReal x1270 = (cj0 * cj5);
                                                                            IkReal x1271 = ((0.15) * r01);
                                                                            IkReal x1272 = (cj5 * r21);
                                                                            IkReal x1273 = ((0.54) * sj4);
                                                                            IkReal x1274 = (cj3 * sj5);
                                                                            IkReal x1275 = ((0.15) * r11);
                                                                            IkReal x1276 = (r00 * sj5);
                                                                            IkReal x1277 = (r01 * sj5);
                                                                            IkReal x1278 = ((0.54) * sj3);
                                                                            IkReal x1279 = (r20 * sj5);
                                                                            IkReal x1280 = (r11 * sj5);
                                                                            IkReal x1281 = (cj5 * r11);
                                                                            IkReal x1282 = (cj5 * r10);
                                                                            IkReal x1283 = (cj3 * r22);
                                                                            IkReal x1284 = ((0.15) * cj0);
                                                                            IkReal x1285 = (cj5 * r20);
                                                                            IkReal x1286 = ((1.0) * pz);
                                                                            IkReal x1287 = (cj5 * r01);
                                                                            IkReal x1288 = ((0.71) * x1262);
                                                                            IkReal x1289 = ((0.71) * x1263);
                                                                            IkReal x1290 = (cj0 * sj0 * x1288);
                                                                            evalcond[0] = (((r22 * x1264)) + (((-1.0) * r21 * sj5 * x1273)) + pz + (((-1.0) * x1289)) + (((0.15) * x1279)) + (((0.15) * x1272)) + ((x1273 * x1285)));
                                                                            evalcond[1] = (((x1288 * (sj0 * sj0))) + (((-1.0) * sj0 * x1273 * x1282)) + (((-1.0) * x1267 * x1281)) + ((sj0 * x1273 * x1280)) + (((-1.0) * x1267 * x1268)) + (((-1.0) * sj0 * x1266)) + (((-1.0) * r12 * sj0 * x1264)));
                                                                            evalcond[2] = ((((-1.0) * cj0 * x1269)) + (((-1.0) * x1276 * x1284)) + ((x1288 * (cj0 * cj0))) + (((-1.0) * cj0 * x1265 * x1273)) + (((-1.0) * x1270 * x1271)) + ((cj0 * x1273 * x1277)) + (((-1.0) * cj0 * r02 * x1264)));
                                                                            evalcond[3] = (((x1278 * x1281)) + (((-1.0) * cj3 * x1264 * x1282)) + (((-1.0) * x1267 * x1272)) + (((-1.0) * x1267 * x1279)) + ((cj3 * r12 * x1273)) + ((x1268 * x1278)) + ((sj0 * x1289)) + (((-1.0) * sj0 * x1286)) + ((r11 * x1264 * x1274)));
                                                                            evalcond[4] = (((x1276 * x1278)) + ((x1278 * x1287)) + ((cj3 * r02 * x1273)) + ((cj0 * x1289)) + (((-1.0) * cj3 * x1264 * x1265)) + (((-1.0) * cj0 * x1286)) + (((-0.15) * r21 * x1270)) + (((-1.0) * x1279 * x1284)) + ((r01 * x1264 * x1274)));
                                                                            evalcond[5] = ((((-1.0) * sj0 * x1272 * x1278)) + (((-1.0) * sj0 * x1273 * x1283)) + ((cj3 * sj0 * x1264 * x1285)) + ((sj0 * x1288)) + (((-1.0) * cj5 * x1275)) + (((-1.0) * r21 * sj0 * x1264 * x1274)) + (((-1.0) * sj0 * x1278 * x1279)) + (((-0.15) * x1268)) + (((-1.0) * x1266)));
                                                                            evalcond[6] = ((((-1.0) * cj0 * x1273 * x1283)) + ((cj0 * x1288)) + ((cj3 * r20 * x1264 * x1270)) + (((-1.0) * cj0 * x1278 * x1279)) + (((-1.0) * cj5 * x1271)) + (((-0.15) * x1276)) + (((-1.0) * cj0 * r21 * x1264 * x1274)) + (((-1.0) * r21 * x1270 * x1278)) + (((-1.0) * x1269)));
                                                                            evalcond[7] = (x1290 + ((cj0 * x1273 * x1280)) + (((-1.0) * x1267 * x1276)) + (((-1.0) * cj0 * r12 * x1264)) + (((-1.0) * x1267 * x1287)) + (((-1.0) * r10 * x1270 * x1273)) + (((-1.0) * sj0 * x1269)));
                                                                            evalcond[8] = (x1290 + (((-1.0) * cj0 * x1266)) + (((-1.0) * x1270 * x1275)) + (((-1.0) * sj0 * x1265 * x1273)) + (((-1.0) * r02 * sj0 * x1264)) + ((sj0 * x1273 * x1277)) + (((-1.0) * x1268 * x1284)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j2eval[2];
                                                                            j2eval[0] = cj0;
                                                                            j2eval[1] = IKsign(cj0);
                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                            {
                                                                                {
                                                                                    IkReal j2eval[2];
                                                                                    j2eval[0] = sj0;
                                                                                    j2eval[1] = IKsign(sj0);
                                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                                    {
                                                                                        {
                                                                                            IkReal evalcond[1];
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    {
                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                        bool j2valid[1] = {false};
                                                                                                        _nj2 = 1;
                                                                                                        IkReal x1291 = (sj1 * sj4);
                                                                                                        IkReal x1292 = (r01 * sj5);
                                                                                                        IkReal x1293 = (cj4 * r22);
                                                                                                        IkReal x1294 = ((1.0) * cj1);
                                                                                                        IkReal x1295 = (cj5 * r00);
                                                                                                        IkReal x1296 = (cj1 * sj4);
                                                                                                        IkReal x1297 = (cj4 * r02);
                                                                                                        IkReal x1298 = (r21 * sj5);
                                                                                                        IkReal x1299 = (cj5 * r20);
                                                                                                        if (IKabs((((x1296 * x1298)) + (((-1.0) * sj1 * x1297)) + (((-1.0) * sj4 * x1294 * x1299)) + ((x1291 * x1292)) + (((-1.0) * x1293 * x1294)) + (((-1.0) * x1291 * x1295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1 * x1293)) + (((-1.0) * sj4 * x1294 * x1295)) + ((x1291 * x1299)) + (((-1.0) * x1291 * x1298)) + (((-1.0) * x1294 * x1297)) + ((x1292 * x1296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1296 * x1298)) + (((-1.0) * sj1 * x1297)) + (((-1.0) * sj4 * x1294 * x1299)) + ((x1291 * x1292)) + (((-1.0) * x1293 * x1294)) + (((-1.0) * x1291 * x1295)))) + IKsqr((((sj1 * x1293)) + (((-1.0) * sj4 * x1294 * x1295)) + ((x1291 * x1299)) + (((-1.0) * x1291 * x1298)) + (((-1.0) * x1294 * x1297)) + ((x1292 * x1296)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                            continue;
                                                                                                        j2array[0] = IKatan2((((x1296 * x1298)) + (((-1.0) * sj1 * x1297)) + (((-1.0) * sj4 * x1294 * x1299)) + ((x1291 * x1292)) + (((-1.0) * x1293 * x1294)) + (((-1.0) * x1291 * x1295))), (((sj1 * x1293)) + (((-1.0) * sj4 * x1294 * x1295)) + ((x1291 * x1299)) + (((-1.0) * x1291 * x1298)) + (((-1.0) * x1294 * x1297)) + ((x1292 * x1296))));
                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                        if (j2array[0] > IKPI)
                                                                                                        {
                                                                                                            j2array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                        {
                                                                                                            j2array[0] += IK2PI;
                                                                                                        }
                                                                                                        j2valid[0] = true;
                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                        {
                                                                                                            if (!j2valid[ij2])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij2[0] = ij2;
                                                                                                            _ij2[1] = -1;
                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                            {
                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j2valid[iij2] = false;
                                                                                                                    _ij2[1] = iij2;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j2 = j2array[ij2];
                                                                                                            cj2 = cj2array[ij2];
                                                                                                            sj2 = sj2array[ij2];
                                                                                                            {
                                                                                                                IkReal evalcond[6];
                                                                                                                IkReal x1300 = IKsin(j2);
                                                                                                                IkReal x1301 = IKcos(j2);
                                                                                                                IkReal x1302 = (cj3 * sj4);
                                                                                                                IkReal x1303 = (cj3 * cj4);
                                                                                                                IkReal x1304 = (r21 * sj5);
                                                                                                                IkReal x1305 = ((1.0) * cj5);
                                                                                                                IkReal x1306 = (cj5 * r01);
                                                                                                                IkReal x1307 = ((0.15) * sj5);
                                                                                                                IkReal x1308 = (r01 * sj5);
                                                                                                                IkReal x1309 = (sj3 * sj5);
                                                                                                                IkReal x1310 = ((1.0) * cj4);
                                                                                                                IkReal x1311 = (cj5 * r21);
                                                                                                                IkReal x1312 = (sj1 * x1301);
                                                                                                                IkReal x1313 = (cj1 * x1301);
                                                                                                                IkReal x1314 = ((0.54) * x1300);
                                                                                                                IkReal x1315 = (sj1 * x1300);
                                                                                                                IkReal x1316 = ((1.0) * cj1 * x1300);
                                                                                                                evalcond[0] = (x1312 + (((-1.0) * r22 * x1310)) + (((-1.0) * x1316)) + ((sj4 * x1304)) + (((-1.0) * r20 * sj4 * x1305)));
                                                                                                                evalcond[1] = ((((-1.0) * r00 * sj4 * x1305)) + (((-1.0) * x1313)) + (((-1.0) * x1315)) + (((-1.0) * r02 * x1310)) + ((sj4 * x1308)));
                                                                                                                evalcond[2] = ((((0.71) * cj1)) + (((-0.54) * x1312)) + (((-1.0) * r20 * x1307)) + (((-1.0) * pz)) + ((cj1 * x1314)) + (((-0.15) * x1311)));
                                                                                                                evalcond[3] = ((((-1.0) * r00 * x1307)) + (((-1.0) * px)) + (((-0.15) * x1306)) + (((0.71) * sj1)) + ((sj1 * x1314)) + (((0.54) * x1313)));
                                                                                                                evalcond[4] = (x1315 + x1313 + (((-1.0) * r20 * x1303 * x1305)) + ((sj3 * x1311)) + ((x1303 * x1304)) + ((r22 * x1302)) + ((r20 * x1309)));
                                                                                                                evalcond[5] = (x1312 + ((sj3 * x1306)) + (((-1.0) * x1316)) + ((x1303 * x1308)) + (((-1.0) * r00 * x1303 * x1305)) + ((r02 * x1302)) + ((r00 * x1309)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j3;
                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j4;
                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j5;
                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                std::vector<int> vfree(0);
                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                                bool bgotonextstatement = true;
                                                                                                do
                                                                                                {
                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                    {
                                                                                                        bgotonextstatement = false;
                                                                                                        {
                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                            bool j2valid[1] = {false};
                                                                                                            _nj2 = 1;
                                                                                                            IkReal x1317 = (cj4 * r22);
                                                                                                            IkReal x1318 = ((1.0) * cj1);
                                                                                                            IkReal x1319 = (cj4 * r02);
                                                                                                            IkReal x1320 = (sj4 * sj5);
                                                                                                            IkReal x1321 = ((1.0) * sj1);
                                                                                                            IkReal x1322 = (cj5 * sj4);
                                                                                                            IkReal x1323 = (sj1 * x1322);
                                                                                                            if (IKabs(((((-1.0) * x1317 * x1318)) + ((r00 * x1323)) + (((-1.0) * r01 * x1320 * x1321)) + (((-1.0) * r20 * x1318 * x1322)) + ((cj1 * r21 * x1320)) + ((sj1 * x1319)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * r01 * x1318 * x1320)) + ((cj1 * r00 * x1322)) + ((cj1 * x1319)) + (((-1.0) * r21 * x1320 * x1321)) + ((r20 * x1323)) + ((sj1 * x1317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x1317 * x1318)) + ((r00 * x1323)) + (((-1.0) * r01 * x1320 * x1321)) + (((-1.0) * r20 * x1318 * x1322)) + ((cj1 * r21 * x1320)) + ((sj1 * x1319)))) + IKsqr(((((-1.0) * r01 * x1318 * x1320)) + ((cj1 * r00 * x1322)) + ((cj1 * x1319)) + (((-1.0) * r21 * x1320 * x1321)) + ((r20 * x1323)) + ((sj1 * x1317)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                continue;
                                                                                                            j2array[0] = IKatan2(((((-1.0) * x1317 * x1318)) + ((r00 * x1323)) + (((-1.0) * r01 * x1320 * x1321)) + (((-1.0) * r20 * x1318 * x1322)) + ((cj1 * r21 * x1320)) + ((sj1 * x1319))), ((((-1.0) * r01 * x1318 * x1320)) + ((cj1 * r00 * x1322)) + ((cj1 * x1319)) + (((-1.0) * r21 * x1320 * x1321)) + ((r20 * x1323)) + ((sj1 * x1317))));
                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                            if (j2array[0] > IKPI)
                                                                                                            {
                                                                                                                j2array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                            {
                                                                                                                j2array[0] += IK2PI;
                                                                                                            }
                                                                                                            j2valid[0] = true;
                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                            {
                                                                                                                if (!j2valid[ij2])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij2[0] = ij2;
                                                                                                                _ij2[1] = -1;
                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                {
                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j2valid[iij2] = false;
                                                                                                                        _ij2[1] = iij2;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j2 = j2array[ij2];
                                                                                                                cj2 = cj2array[ij2];
                                                                                                                sj2 = sj2array[ij2];
                                                                                                                {
                                                                                                                    IkReal evalcond[6];
                                                                                                                    IkReal x1324 = IKcos(j2);
                                                                                                                    IkReal x1325 = IKsin(j2);
                                                                                                                    IkReal x1326 = (cj3 * sj4);
                                                                                                                    IkReal x1327 = (cj3 * cj4);
                                                                                                                    IkReal x1328 = (r21 * sj5);
                                                                                                                    IkReal x1329 = ((1.0) * cj5);
                                                                                                                    IkReal x1330 = (cj5 * r01);
                                                                                                                    IkReal x1331 = ((0.15) * sj5);
                                                                                                                    IkReal x1332 = (r01 * sj5);
                                                                                                                    IkReal x1333 = (sj3 * sj5);
                                                                                                                    IkReal x1334 = ((1.0) * cj4);
                                                                                                                    IkReal x1335 = (cj5 * r21);
                                                                                                                    IkReal x1336 = (cj1 * x1324);
                                                                                                                    IkReal x1337 = (sj1 * x1325);
                                                                                                                    IkReal x1338 = (cj1 * x1325);
                                                                                                                    IkReal x1339 = (sj1 * x1324);
                                                                                                                    IkReal x1340 = (x1337 + x1336);
                                                                                                                    evalcond[0] = (x1340 + ((sj4 * x1332)) + (((-1.0) * r00 * sj4 * x1329)) + (((-1.0) * r02 * x1334)));
                                                                                                                    evalcond[1] = (x1339 + (((-1.0) * x1338)) + (((-1.0) * r22 * x1334)) + ((sj4 * x1328)) + (((-1.0) * r20 * sj4 * x1329)));
                                                                                                                    evalcond[2] = ((((0.54) * x1338)) + (((0.71) * cj1)) + (((-0.15) * x1335)) + (((-0.54) * x1339)) + (((-1.0) * pz)) + (((-1.0) * r20 * x1331)));
                                                                                                                    evalcond[3] = ((((-0.15) * x1330)) + (((-0.54) * x1336)) + (((-0.54) * x1337)) + (((-0.71) * sj1)) + (((-1.0) * px)) + (((-1.0) * r00 * x1331)));
                                                                                                                    evalcond[4] = (x1340 + (((-1.0) * r20 * x1327 * x1329)) + ((r20 * x1333)) + ((x1327 * x1328)) + ((sj3 * x1335)) + ((r22 * x1326)));
                                                                                                                    evalcond[5] = (x1338 + (((-1.0) * r00 * x1327 * x1329)) + (((-1.0) * x1339)) + ((r00 * x1333)) + ((sj3 * x1330)) + ((r02 * x1326)) + ((x1327 * x1332)));
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                    std::vector<int> vfree(0);
                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } while (0);
                                                                                                if (bgotonextstatement)
                                                                                                {
                                                                                                    bool bgotonextstatement = true;
                                                                                                    do
                                                                                                    {
                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                        {
                                                                                                            bgotonextstatement = false;
                                                                                                            {
                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                bool j2valid[1] = {false};
                                                                                                                _nj2 = 1;
                                                                                                                IkReal x1341 = (cj4 * r22);
                                                                                                                IkReal x1342 = ((1.0) * cj1);
                                                                                                                IkReal x1343 = (cj5 * sj4);
                                                                                                                IkReal x1344 = (cj4 * r12);
                                                                                                                IkReal x1345 = ((1.0) * sj1);
                                                                                                                IkReal x1346 = (r11 * sj4 * sj5);
                                                                                                                IkReal x1347 = (r21 * sj4 * sj5);
                                                                                                                if (IKabs((((sj1 * x1346)) + ((cj1 * x1347)) + (((-1.0) * x1341 * x1342)) + (((-1.0) * r20 * x1342 * x1343)) + (((-1.0) * r10 * x1343 * x1345)) + (((-1.0) * x1344 * x1345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * sj1 * x1343)) + (((-1.0) * r10 * x1342 * x1343)) + ((sj1 * x1341)) + ((cj1 * x1346)) + (((-1.0) * x1342 * x1344)) + (((-1.0) * x1345 * x1347)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1 * x1346)) + ((cj1 * x1347)) + (((-1.0) * x1341 * x1342)) + (((-1.0) * r20 * x1342 * x1343)) + (((-1.0) * r10 * x1343 * x1345)) + (((-1.0) * x1344 * x1345)))) + IKsqr((((r20 * sj1 * x1343)) + (((-1.0) * r10 * x1342 * x1343)) + ((sj1 * x1341)) + ((cj1 * x1346)) + (((-1.0) * x1342 * x1344)) + (((-1.0) * x1345 * x1347)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                    continue;
                                                                                                                j2array[0] = IKatan2((((sj1 * x1346)) + ((cj1 * x1347)) + (((-1.0) * x1341 * x1342)) + (((-1.0) * r20 * x1342 * x1343)) + (((-1.0) * r10 * x1343 * x1345)) + (((-1.0) * x1344 * x1345))), (((r20 * sj1 * x1343)) + (((-1.0) * r10 * x1342 * x1343)) + ((sj1 * x1341)) + ((cj1 * x1346)) + (((-1.0) * x1342 * x1344)) + (((-1.0) * x1345 * x1347))));
                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                if (j2array[0] > IKPI)
                                                                                                                {
                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                {
                                                                                                                    j2array[0] += IK2PI;
                                                                                                                }
                                                                                                                j2valid[0] = true;
                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                {
                                                                                                                    if (!j2valid[ij2])
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij2[0] = ij2;
                                                                                                                    _ij2[1] = -1;
                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                    {
                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                        {
                                                                                                                            j2valid[iij2] = false;
                                                                                                                            _ij2[1] = iij2;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j2 = j2array[ij2];
                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                    {
                                                                                                                        IkReal evalcond[6];
                                                                                                                        IkReal x1348 = IKsin(j2);
                                                                                                                        IkReal x1349 = IKcos(j2);
                                                                                                                        IkReal x1350 = (sj4 * sj5);
                                                                                                                        IkReal x1351 = ((1.0) * cj5);
                                                                                                                        IkReal x1352 = (cj3 * cj4);
                                                                                                                        IkReal x1353 = (cj5 * r11);
                                                                                                                        IkReal x1354 = ((0.15) * sj5);
                                                                                                                        IkReal x1355 = (cj3 * sj4);
                                                                                                                        IkReal x1356 = ((1.0) * cj4);
                                                                                                                        IkReal x1357 = (cj5 * r21);
                                                                                                                        IkReal x1358 = (sj3 * sj5);
                                                                                                                        IkReal x1359 = (sj1 * x1349);
                                                                                                                        IkReal x1360 = (cj1 * x1349);
                                                                                                                        IkReal x1361 = (sj5 * x1352);
                                                                                                                        IkReal x1362 = ((0.54) * x1348);
                                                                                                                        IkReal x1363 = (sj1 * x1348);
                                                                                                                        IkReal x1364 = ((1.0) * cj1 * x1348);
                                                                                                                        evalcond[0] = (x1359 + (((-1.0) * r20 * sj4 * x1351)) + (((-1.0) * r22 * x1356)) + ((r21 * x1350)) + (((-1.0) * x1364)));
                                                                                                                        evalcond[1] = ((((-1.0) * r12 * x1356)) + (((-1.0) * x1363)) + (((-1.0) * x1360)) + ((r11 * x1350)) + (((-1.0) * r10 * sj4 * x1351)));
                                                                                                                        evalcond[2] = ((((0.71) * cj1)) + (((-0.15) * x1357)) + (((-1.0) * r20 * x1354)) + ((cj1 * x1362)) + (((-1.0) * pz)) + (((-0.54) * x1359)));
                                                                                                                        evalcond[3] = ((((-1.0) * r10 * x1354)) + (((-0.15) * x1353)) + (((0.54) * x1360)) + ((sj1 * x1362)) + (((-1.0) * py)) + (((0.71) * sj1)));
                                                                                                                        evalcond[4] = (x1363 + x1360 + (((-1.0) * r20 * x1351 * x1352)) + ((r22 * x1355)) + ((r20 * x1358)) + ((sj3 * x1357)) + ((r21 * x1361)));
                                                                                                                        evalcond[5] = (x1359 + ((r10 * x1358)) + (((-1.0) * r10 * x1351 * x1352)) + ((r11 * x1361)) + ((r12 * x1355)) + ((sj3 * x1353)) + (((-1.0) * x1364)));
                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                        std::vector<int> vfree(0);
                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    } while (0);
                                                                                                    if (bgotonextstatement)
                                                                                                    {
                                                                                                        bool bgotonextstatement = true;
                                                                                                        do
                                                                                                        {
                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                            {
                                                                                                                bgotonextstatement = false;
                                                                                                                {
                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                    bool j2valid[1] = {false};
                                                                                                                    _nj2 = 1;
                                                                                                                    IkReal x1365 = (cj4 * r22);
                                                                                                                    IkReal x1366 = ((1.0) * cj1);
                                                                                                                    IkReal x1367 = (cj4 * r12);
                                                                                                                    IkReal x1368 = (sj1 * sj4);
                                                                                                                    IkReal x1369 = (cj5 * r10);
                                                                                                                    IkReal x1370 = (r11 * sj5);
                                                                                                                    IkReal x1371 = (cj1 * sj4);
                                                                                                                    IkReal x1372 = (r21 * sj5);
                                                                                                                    IkReal x1373 = (cj5 * r20);
                                                                                                                    if (IKabs((((sj1 * x1367)) + ((x1371 * x1372)) + (((-1.0) * x1365 * x1366)) + ((x1368 * x1369)) + (((-1.0) * sj4 * x1366 * x1373)) + (((-1.0) * x1368 * x1370)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1 * x1365)) + ((cj1 * x1367)) + ((x1368 * x1373)) + ((x1369 * x1371)) + (((-1.0) * sj4 * x1366 * x1370)) + (((-1.0) * x1368 * x1372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1 * x1367)) + ((x1371 * x1372)) + (((-1.0) * x1365 * x1366)) + ((x1368 * x1369)) + (((-1.0) * sj4 * x1366 * x1373)) + (((-1.0) * x1368 * x1370)))) + IKsqr((((sj1 * x1365)) + ((cj1 * x1367)) + ((x1368 * x1373)) + ((x1369 * x1371)) + (((-1.0) * sj4 * x1366 * x1370)) + (((-1.0) * x1368 * x1372)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                        continue;
                                                                                                                    j2array[0] = IKatan2((((sj1 * x1367)) + ((x1371 * x1372)) + (((-1.0) * x1365 * x1366)) + ((x1368 * x1369)) + (((-1.0) * sj4 * x1366 * x1373)) + (((-1.0) * x1368 * x1370))), (((sj1 * x1365)) + ((cj1 * x1367)) + ((x1368 * x1373)) + ((x1369 * x1371)) + (((-1.0) * sj4 * x1366 * x1370)) + (((-1.0) * x1368 * x1372))));
                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j2valid[0] = true;
                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                    {
                                                                                                                        if (!j2valid[ij2])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij2[0] = ij2;
                                                                                                                        _ij2[1] = -1;
                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                        {
                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j2valid[iij2] = false;
                                                                                                                                _ij2[1] = iij2;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j2 = j2array[ij2];
                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                        {
                                                                                                                            IkReal evalcond[6];
                                                                                                                            IkReal x1374 = IKcos(j2);
                                                                                                                            IkReal x1375 = IKsin(j2);
                                                                                                                            IkReal x1376 = (sj4 * sj5);
                                                                                                                            IkReal x1377 = ((1.0) * cj5);
                                                                                                                            IkReal x1378 = (cj3 * cj4);
                                                                                                                            IkReal x1379 = (cj5 * r11);
                                                                                                                            IkReal x1380 = ((0.15) * sj5);
                                                                                                                            IkReal x1381 = (cj3 * sj4);
                                                                                                                            IkReal x1382 = ((1.0) * cj4);
                                                                                                                            IkReal x1383 = (cj5 * r21);
                                                                                                                            IkReal x1384 = (sj3 * sj5);
                                                                                                                            IkReal x1385 = (cj1 * x1374);
                                                                                                                            IkReal x1386 = (sj1 * x1375);
                                                                                                                            IkReal x1387 = (sj5 * x1378);
                                                                                                                            IkReal x1388 = (cj1 * x1375);
                                                                                                                            IkReal x1389 = (sj1 * x1374);
                                                                                                                            IkReal x1390 = (x1385 + x1386);
                                                                                                                            evalcond[0] = ((((-1.0) * r12 * x1382)) + x1390 + (((-1.0) * r10 * sj4 * x1377)) + ((r11 * x1376)));
                                                                                                                            evalcond[1] = (x1389 + ((r21 * x1376)) + (((-1.0) * x1388)) + (((-1.0) * r22 * x1382)) + (((-1.0) * r20 * sj4 * x1377)));
                                                                                                                            evalcond[2] = ((((0.71) * cj1)) + (((-0.15) * x1383)) + (((-1.0) * r20 * x1380)) + (((-1.0) * pz)) + (((0.54) * x1388)) + (((-0.54) * x1389)));
                                                                                                                            evalcond[3] = ((((-0.71) * sj1)) + (((-1.0) * r10 * x1380)) + (((-1.0) * py)) + (((-0.15) * x1379)) + (((-0.54) * x1386)) + (((-0.54) * x1385)));
                                                                                                                            evalcond[4] = (x1390 + ((r21 * x1387)) + (((-1.0) * r20 * x1377 * x1378)) + ((r20 * x1384)) + ((sj3 * x1383)) + ((r22 * x1381)));
                                                                                                                            evalcond[5] = (x1388 + ((r10 * x1384)) + ((sj3 * x1379)) + ((r11 * x1387)) + (((-1.0) * x1389)) + (((-1.0) * r10 * x1377 * x1378)) + ((r12 * x1381)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                            std::vector<int> vfree(0);
                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } while (0);
                                                                                                        if (bgotonextstatement)
                                                                                                        {
                                                                                                            bool bgotonextstatement = true;
                                                                                                            do
                                                                                                            {
                                                                                                                if (1)
                                                                                                                {
                                                                                                                    bgotonextstatement = false;
                                                                                                                    continue; // branch miss [j2]
                                                                                                                }
                                                                                                            } while (0);
                                                                                                            if (bgotonextstatement)
                                                                                                            {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            IkReal x1391 = ((1.0) * sj1);
                                                                                            IkReal x1392 = (sj1 * sj4);
                                                                                            IkReal x1393 = (r11 * sj5);
                                                                                            IkReal x1394 = ((1.0) * cj1);
                                                                                            IkReal x1395 = (cj4 * r12);
                                                                                            IkReal x1396 = (cj5 * r20 * sj0);
                                                                                            IkReal x1397 = (cj5 * r10 * sj4);
                                                                                            IkReal x1398 = (cj4 * r22 * sj0);
                                                                                            IkReal x1399 = (r21 * sj0 * sj4 * sj5);
                                                                                            CheckValue<IkReal> x1400 = IKPowWithIntegerCheck(IKsign(sj0), -1);
                                                                                            if (!x1400.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x1401 = IKatan2WithCheck(IkReal(((((-1.0) * x1391 * x1395)) + (((-1.0) * x1391 * x1397)) + (((-1.0) * x1394 * x1398)) + ((x1392 * x1393)) + (((-1.0) * sj4 * x1394 * x1396)) + ((cj1 * x1399)))), IkReal((((cj1 * sj4 * x1393)) + (((-1.0) * x1391 * x1399)) + (((-1.0) * x1394 * x1395)) + (((-1.0) * x1394 * x1397)) + ((sj1 * x1398)) + ((x1392 * x1396)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (!x1401.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x1400.value))) + (x1401.value));
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[9];
                                                                                                    IkReal x1402 = IKsin(j2);
                                                                                                    IkReal x1403 = IKcos(j2);
                                                                                                    IkReal x1404 = (cj3 * sj4);
                                                                                                    IkReal x1405 = (cj3 * cj4);
                                                                                                    IkReal x1406 = (r21 * sj5);
                                                                                                    IkReal x1407 = ((1.0) * cj5);
                                                                                                    IkReal x1408 = (sj4 * sj5);
                                                                                                    IkReal x1409 = (cj5 * sj3);
                                                                                                    IkReal x1410 = ((0.15) * cj5);
                                                                                                    IkReal x1411 = ((1.0) * cj0);
                                                                                                    IkReal x1412 = ((0.15) * sj5);
                                                                                                    IkReal x1413 = ((0.54) * sj0);
                                                                                                    IkReal x1414 = (sj3 * sj5);
                                                                                                    IkReal x1415 = ((1.0) * cj4);
                                                                                                    IkReal x1416 = ((0.71) * sj1);
                                                                                                    IkReal x1417 = ((0.54) * cj0);
                                                                                                    IkReal x1418 = (cj1 * x1403);
                                                                                                    IkReal x1419 = (sj1 * x1402);
                                                                                                    IkReal x1420 = (cj1 * x1402);
                                                                                                    IkReal x1421 = (sj1 * x1403);
                                                                                                    IkReal x1422 = ((1.0) * sj0 * x1402);
                                                                                                    evalcond[0] = ((((-1.0) * r22 * x1415)) + (((-1.0) * r20 * sj4 * x1407)) + (((-1.0) * x1420)) + x1421 + ((sj4 * x1406)));
                                                                                                    evalcond[1] = ((((0.71) * cj1)) + (((0.54) * x1420)) + (((-0.54) * x1421)) + (((-1.0) * pz)) + (((-1.0) * r20 * x1412)) + (((-1.0) * r21 * x1410)));
                                                                                                    evalcond[2] = ((((-1.0) * r02 * x1415)) + (((-1.0) * r00 * sj4 * x1407)) + (((-1.0) * x1411 * x1419)) + (((-1.0) * x1411 * x1418)) + ((r01 * x1408)));
                                                                                                    evalcond[3] = ((((-1.0) * r10 * sj4 * x1407)) + (((-1.0) * sj0 * x1418)) + (((-1.0) * sj0 * x1419)) + ((r11 * x1408)) + (((-1.0) * r12 * x1415)));
                                                                                                    evalcond[4] = (((x1417 * x1418)) + ((x1417 * x1419)) + ((cj0 * x1416)) + (((-1.0) * px)) + (((-1.0) * r00 * x1412)) + (((-1.0) * r01 * x1410)));
                                                                                                    evalcond[5] = ((((-1.0) * r10 * x1412)) + ((x1413 * x1419)) + ((x1413 * x1418)) + (((-1.0) * py)) + (((-1.0) * r11 * x1410)) + ((sj0 * x1416)));
                                                                                                    evalcond[6] = (((r20 * x1414)) + ((x1405 * x1406)) + ((r21 * x1409)) + (((-1.0) * r20 * x1405 * x1407)) + x1418 + x1419 + ((r22 * x1404)));
                                                                                                    evalcond[7] = ((((-1.0) * r00 * x1405 * x1407)) + ((r02 * x1404)) + ((r00 * x1414)) + ((r01 * x1409)) + ((r01 * sj5 * x1405)) + (((-1.0) * x1411 * x1420)) + ((cj0 * x1421)));
                                                                                                    evalcond[8] = (((r12 * x1404)) + ((r11 * x1409)) + (((-1.0) * r10 * x1405 * x1407)) + (((-1.0) * sj0 * x1420)) + ((r11 * sj5 * x1405)) + ((r10 * x1414)) + ((sj0 * x1421)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                {
                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    IkReal x1423 = ((1.0) * cj0);
                                                                                    IkReal x1424 = ((1.0) * sj1);
                                                                                    IkReal x1425 = (cj5 * sj4);
                                                                                    IkReal x1426 = (cj4 * r22);
                                                                                    IkReal x1427 = (cj4 * r02);
                                                                                    IkReal x1428 = (cj0 * sj1);
                                                                                    IkReal x1429 = ((1.0) * cj1);
                                                                                    IkReal x1430 = (sj1 * sj4 * sj5);
                                                                                    IkReal x1431 = (cj1 * sj4 * sj5);
                                                                                    CheckValue<IkReal> x1432 = IKatan2WithCheck(IkReal(((((-1.0) * cj1 * x1423 * x1426)) + (((-1.0) * x1424 * x1427)) + ((r01 * x1430)) + (((-1.0) * cj1 * r20 * x1423 * x1425)) + ((cj0 * r21 * x1431)) + (((-1.0) * r00 * x1424 * x1425)))), IkReal(((((-1.0) * r00 * x1425 * x1429)) + (((-1.0) * r21 * x1423 * x1430)) + (((-1.0) * x1427 * x1429)) + ((x1426 * x1428)) + ((r01 * x1431)) + ((r20 * x1425 * x1428)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x1432.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x1433 = IKPowWithIntegerCheck(IKsign(cj0), -1);
                                                                                    if (!x1433.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    j2array[0] = ((-1.5707963267949) + (x1432.value) + (((1.5707963267949) * (x1433.value))));
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI)
                                                                                    {
                                                                                        j2array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j2array[0] < -IKPI)
                                                                                    {
                                                                                        j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                    {
                                                                                        if (!j2valid[ij2])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                        {
                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j2valid[iij2] = false;
                                                                                                _ij2[1] = iij2;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                            IkReal evalcond[9];
                                                                                            IkReal x1434 = IKsin(j2);
                                                                                            IkReal x1435 = IKcos(j2);
                                                                                            IkReal x1436 = (cj3 * sj4);
                                                                                            IkReal x1437 = (cj3 * cj4);
                                                                                            IkReal x1438 = (r21 * sj5);
                                                                                            IkReal x1439 = ((1.0) * cj5);
                                                                                            IkReal x1440 = (sj4 * sj5);
                                                                                            IkReal x1441 = (cj5 * sj3);
                                                                                            IkReal x1442 = ((0.15) * cj5);
                                                                                            IkReal x1443 = ((1.0) * cj0);
                                                                                            IkReal x1444 = ((0.15) * sj5);
                                                                                            IkReal x1445 = ((0.54) * sj0);
                                                                                            IkReal x1446 = (sj3 * sj5);
                                                                                            IkReal x1447 = ((1.0) * cj4);
                                                                                            IkReal x1448 = ((0.71) * sj1);
                                                                                            IkReal x1449 = ((0.54) * cj0);
                                                                                            IkReal x1450 = (cj1 * x1435);
                                                                                            IkReal x1451 = (sj1 * x1434);
                                                                                            IkReal x1452 = (cj1 * x1434);
                                                                                            IkReal x1453 = (sj1 * x1435);
                                                                                            IkReal x1454 = ((1.0) * sj0 * x1434);
                                                                                            evalcond[0] = ((((-1.0) * r22 * x1447)) + (((-1.0) * x1452)) + (((-1.0) * r20 * sj4 * x1439)) + x1453 + ((sj4 * x1438)));
                                                                                            evalcond[1] = ((((0.71) * cj1)) + (((-0.54) * x1453)) + (((-1.0) * r20 * x1444)) + (((-1.0) * r21 * x1442)) + (((0.54) * x1452)) + (((-1.0) * pz)));
                                                                                            evalcond[2] = ((((-1.0) * r00 * sj4 * x1439)) + (((-1.0) * r02 * x1447)) + ((r01 * x1440)) + (((-1.0) * x1443 * x1451)) + (((-1.0) * x1443 * x1450)));
                                                                                            evalcond[3] = ((((-1.0) * r10 * sj4 * x1439)) + ((r11 * x1440)) + (((-1.0) * sj0 * x1451)) + (((-1.0) * sj0 * x1450)) + (((-1.0) * r12 * x1447)));
                                                                                            evalcond[4] = ((((-1.0) * r00 * x1444)) + (((-1.0) * r01 * x1442)) + (((-1.0) * px)) + ((cj0 * x1448)) + ((x1449 * x1450)) + ((x1449 * x1451)));
                                                                                            evalcond[5] = (((x1445 * x1450)) + ((x1445 * x1451)) + ((sj0 * x1448)) + (((-1.0) * r10 * x1444)) + (((-1.0) * r11 * x1442)) + (((-1.0) * py)));
                                                                                            evalcond[6] = (((x1437 * x1438)) + ((r21 * x1441)) + x1450 + x1451 + (((-1.0) * r20 * x1437 * x1439)) + ((r20 * x1446)) + ((r22 * x1436)));
                                                                                            evalcond[7] = (((r01 * sj5 * x1437)) + ((r02 * x1436)) + ((cj0 * x1453)) + ((r00 * x1446)) + ((r01 * x1441)) + (((-1.0) * x1443 * x1452)) + (((-1.0) * r00 * x1437 * x1439)));
                                                                                            evalcond[8] = (((r10 * x1446)) + ((r11 * x1441)) + (((-1.0) * sj0 * x1452)) + ((r12 * x1436)) + (((-1.0) * r10 * x1437 * x1439)) + ((r11 * sj5 * x1437)) + ((sj0 * x1453)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                            bool j1valid[1] = {false};
                                                            _nj1 = 1;
                                                            IkReal x1455 = ((0.15) * sj0);
                                                            IkReal x1456 = ((0.76056338028169) * sj4);
                                                            IkReal x1457 = ((0.54) * sj0 * sj4);
                                                            CheckValue<IkReal> x1458 = IKPowWithIntegerCheck(sj0, -2);
                                                            if (!x1458.valid)
                                                            {
                                                                continue;
                                                            }
                                                            if (IKabs(((-1.40845070422535) * (x1458.value) * (((((-0.54) * cj4 * r12 * sj0)) + (((-1.0) * cj5 * r10 * x1457)) + (((-1.0) * r10 * sj5 * x1455)) + (((-1.0) * py * sj0)) + ((r11 * sj5 * x1457)) + (((-1.0) * cj5 * r11 * x1455)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.211267605633803) * r20 * sj5)) + (((-1.0) * r21 * sj5 * x1456)) + (((1.40845070422535) * pz)) + ((cj5 * r20 * x1456)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535) * (x1458.value) * (((((-0.54) * cj4 * r12 * sj0)) + (((-1.0) * cj5 * r10 * x1457)) + (((-1.0) * r10 * sj5 * x1455)) + (((-1.0) * py * sj0)) + ((r11 * sj5 * x1457)) + (((-1.0) * cj5 * r11 * x1455)))))) + IKsqr(((((0.211267605633803) * r20 * sj5)) + (((-1.0) * r21 * sj5 * x1456)) + (((1.40845070422535) * pz)) + ((cj5 * r20 * x1456)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                continue;
                                                            j1array[0] = IKatan2(((-1.40845070422535) * (x1458.value) * (((((-0.54) * cj4 * r12 * sj0)) + (((-1.0) * cj5 * r10 * x1457)) + (((-1.0) * r10 * sj5 * x1455)) + (((-1.0) * py * sj0)) + ((r11 * sj5 * x1457)) + (((-1.0) * cj5 * r11 * x1455))))), ((((0.211267605633803) * r20 * sj5)) + (((-1.0) * r21 * sj5 * x1456)) + (((1.40845070422535) * pz)) + ((cj5 * r20 * x1456)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21))));
                                                            sj1array[0] = IKsin(j1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            if (j1array[0] > IKPI)
                                                            {
                                                                j1array[0] -= IK2PI;
                                                            }
                                                            else if (j1array[0] < -IKPI)
                                                            {
                                                                j1array[0] += IK2PI;
                                                            }
                                                            j1valid[0] = true;
                                                            for (int ij1 = 0; ij1 < 1; ++ij1)
                                                            {
                                                                if (!j1valid[ij1])
                                                                {
                                                                    continue;
                                                                }
                                                                _ij1[0] = ij1;
                                                                _ij1[1] = -1;
                                                                for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                {
                                                                    if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                        j1valid[iij1] = false;
                                                                        _ij1[1] = iij1;
                                                                        break;
                                                                    }
                                                                }
                                                                j1 = j1array[ij1];
                                                                cj1 = cj1array[ij1];
                                                                sj1 = sj1array[ij1];
                                                                {
                                                                    IkReal evalcond[9];
                                                                    IkReal x1459 = IKsin(j1);
                                                                    IkReal x1460 = IKcos(j1);
                                                                    IkReal x1461 = ((0.54) * cj4);
                                                                    IkReal x1462 = (cj5 * r00);
                                                                    IkReal x1463 = ((1.0) * py);
                                                                    IkReal x1464 = ((0.15) * sj0);
                                                                    IkReal x1465 = (r10 * sj5);
                                                                    IkReal x1466 = ((1.0) * px);
                                                                    IkReal x1467 = (cj0 * cj5);
                                                                    IkReal x1468 = ((0.15) * r01);
                                                                    IkReal x1469 = (cj5 * r21);
                                                                    IkReal x1470 = ((0.54) * sj4);
                                                                    IkReal x1471 = (cj3 * sj5);
                                                                    IkReal x1472 = ((0.15) * r11);
                                                                    IkReal x1473 = (r00 * sj5);
                                                                    IkReal x1474 = (r01 * sj5);
                                                                    IkReal x1475 = ((0.54) * sj3);
                                                                    IkReal x1476 = (r20 * sj5);
                                                                    IkReal x1477 = (r11 * sj5);
                                                                    IkReal x1478 = (cj5 * r11);
                                                                    IkReal x1479 = (cj5 * r10);
                                                                    IkReal x1480 = (cj3 * r22);
                                                                    IkReal x1481 = ((0.15) * cj0);
                                                                    IkReal x1482 = (cj5 * r20);
                                                                    IkReal x1483 = ((1.0) * pz);
                                                                    IkReal x1484 = (cj5 * r01);
                                                                    IkReal x1485 = ((0.71) * x1459);
                                                                    IkReal x1486 = ((0.71) * x1460);
                                                                    IkReal x1487 = (cj0 * sj0 * x1485);
                                                                    evalcond[0] = ((((0.15) * x1476)) + (((-1.0) * r21 * sj5 * x1470)) + (((-1.0) * x1486)) + ((x1470 * x1482)) + (((0.15) * x1469)) + pz + ((r22 * x1461)));
                                                                    evalcond[1] = ((((-1.0) * sj0 * x1463)) + ((x1485 * (sj0 * sj0))) + (((-1.0) * r12 * sj0 * x1461)) + (((-1.0) * x1464 * x1465)) + ((sj0 * x1470 * x1477)) + (((-1.0) * sj0 * x1470 * x1479)) + (((-1.0) * x1464 * x1478)));
                                                                    evalcond[2] = ((((-1.0) * cj0 * r02 * x1461)) + (((-1.0) * x1467 * x1468)) + (((-1.0) * cj0 * x1466)) + ((x1485 * (cj0 * cj0))) + ((cj0 * x1470 * x1474)) + (((-1.0) * x1473 * x1481)) + (((-1.0) * cj0 * x1462 * x1470)));
                                                                    evalcond[3] = (((sj0 * x1486)) + (((-1.0) * x1464 * x1469)) + ((r11 * x1461 * x1471)) + (((-1.0) * sj0 * x1483)) + (((-1.0) * cj3 * x1461 * x1479)) + ((x1465 * x1475)) + ((cj3 * r12 * x1470)) + ((x1475 * x1478)) + (((-1.0) * x1464 * x1476)));
                                                                    evalcond[4] = (((r01 * x1461 * x1471)) + (((-1.0) * cj3 * x1461 * x1462)) + ((x1473 * x1475)) + ((cj0 * x1486)) + (((-1.0) * cj0 * x1483)) + (((-0.15) * r21 * x1467)) + ((x1475 * x1484)) + ((cj3 * r02 * x1470)) + (((-1.0) * x1476 * x1481)));
                                                                    evalcond[5] = ((((-1.0) * sj0 * x1469 * x1475)) + ((sj0 * x1485)) + (((-1.0) * sj0 * x1475 * x1476)) + (((-1.0) * x1463)) + (((-1.0) * r21 * sj0 * x1461 * x1471)) + (((-1.0) * sj0 * x1470 * x1480)) + (((-1.0) * cj5 * x1472)) + (((-0.15) * x1465)) + ((cj3 * sj0 * x1461 * x1482)));
                                                                    evalcond[6] = ((((-1.0) * cj0 * x1470 * x1480)) + (((-1.0) * cj5 * x1468)) + (((-0.15) * x1473)) + (((-1.0) * cj0 * r21 * x1461 * x1471)) + (((-1.0) * x1466)) + (((-1.0) * r21 * x1467 * x1475)) + ((cj0 * x1485)) + (((-1.0) * cj0 * x1475 * x1476)) + ((cj3 * r20 * x1461 * x1467)));
                                                                    evalcond[7] = ((((-1.0) * cj0 * r12 * x1461)) + (((-1.0) * sj0 * x1466)) + (((-1.0) * x1464 * x1484)) + x1487 + ((cj0 * x1470 * x1477)) + (((-1.0) * x1464 * x1473)) + (((-1.0) * r10 * x1467 * x1470)));
                                                                    evalcond[8] = ((((-1.0) * x1465 * x1481)) + (((-1.0) * r02 * sj0 * x1461)) + (((-1.0) * cj0 * x1463)) + (((-1.0) * x1467 * x1472)) + x1487 + (((-1.0) * sj0 * x1462 * x1470)) + ((sj0 * x1470 * x1474)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j2eval[2];
                                                                    j2eval[0] = cj0;
                                                                    j2eval[1] = IKsign(cj0);
                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                    {
                                                                        {
                                                                            IkReal j2eval[2];
                                                                            j2eval[0] = sj0;
                                                                            j2eval[1] = IKsign(sj0);
                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                            {
                                                                                {
                                                                                    IkReal evalcond[1];
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                IkReal x1488 = (sj1 * sj4);
                                                                                                IkReal x1489 = (r01 * sj5);
                                                                                                IkReal x1490 = (cj4 * r22);
                                                                                                IkReal x1491 = ((1.0) * cj1);
                                                                                                IkReal x1492 = (cj5 * r00);
                                                                                                IkReal x1493 = (cj1 * sj4);
                                                                                                IkReal x1494 = (cj4 * r02);
                                                                                                IkReal x1495 = (r21 * sj5);
                                                                                                IkReal x1496 = (cj5 * r20);
                                                                                                if (IKabs(((((-1.0) * sj1 * x1494)) + ((x1493 * x1495)) + (((-1.0) * x1490 * x1491)) + ((x1488 * x1489)) + (((-1.0) * sj4 * x1491 * x1496)) + (((-1.0) * x1488 * x1492)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1 * x1490)) + ((x1489 * x1493)) + (((-1.0) * x1491 * x1494)) + ((x1488 * x1496)) + (((-1.0) * sj4 * x1491 * x1492)) + (((-1.0) * x1488 * x1495)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * sj1 * x1494)) + ((x1493 * x1495)) + (((-1.0) * x1490 * x1491)) + ((x1488 * x1489)) + (((-1.0) * sj4 * x1491 * x1496)) + (((-1.0) * x1488 * x1492)))) + IKsqr((((sj1 * x1490)) + ((x1489 * x1493)) + (((-1.0) * x1491 * x1494)) + ((x1488 * x1496)) + (((-1.0) * sj4 * x1491 * x1492)) + (((-1.0) * x1488 * x1495)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j2array[0] = IKatan2(((((-1.0) * sj1 * x1494)) + ((x1493 * x1495)) + (((-1.0) * x1490 * x1491)) + ((x1488 * x1489)) + (((-1.0) * sj4 * x1491 * x1496)) + (((-1.0) * x1488 * x1492))), (((sj1 * x1490)) + ((x1489 * x1493)) + (((-1.0) * x1491 * x1494)) + ((x1488 * x1496)) + (((-1.0) * sj4 * x1491 * x1492)) + (((-1.0) * x1488 * x1495))));
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[6];
                                                                                                        IkReal x1497 = IKsin(j2);
                                                                                                        IkReal x1498 = IKcos(j2);
                                                                                                        IkReal x1499 = (cj3 * sj4);
                                                                                                        IkReal x1500 = (cj3 * cj4);
                                                                                                        IkReal x1501 = (r21 * sj5);
                                                                                                        IkReal x1502 = ((1.0) * cj5);
                                                                                                        IkReal x1503 = (cj5 * r01);
                                                                                                        IkReal x1504 = ((0.15) * sj5);
                                                                                                        IkReal x1505 = (r01 * sj5);
                                                                                                        IkReal x1506 = (sj3 * sj5);
                                                                                                        IkReal x1507 = ((1.0) * cj4);
                                                                                                        IkReal x1508 = (cj5 * r21);
                                                                                                        IkReal x1509 = (sj1 * x1498);
                                                                                                        IkReal x1510 = (cj1 * x1498);
                                                                                                        IkReal x1511 = ((0.54) * x1497);
                                                                                                        IkReal x1512 = (sj1 * x1497);
                                                                                                        IkReal x1513 = ((1.0) * cj1 * x1497);
                                                                                                        evalcond[0] = ((((-1.0) * r20 * sj4 * x1502)) + (((-1.0) * x1513)) + (((-1.0) * r22 * x1507)) + x1509 + ((sj4 * x1501)));
                                                                                                        evalcond[1] = ((((-1.0) * x1510)) + (((-1.0) * x1512)) + (((-1.0) * r00 * sj4 * x1502)) + (((-1.0) * r02 * x1507)) + ((sj4 * x1505)));
                                                                                                        evalcond[2] = ((((-1.0) * r20 * x1504)) + (((0.71) * cj1)) + ((cj1 * x1511)) + (((-1.0) * pz)) + (((-0.15) * x1508)) + (((-0.54) * x1509)));
                                                                                                        evalcond[3] = ((((-1.0) * r00 * x1504)) + (((-1.0) * px)) + ((sj1 * x1511)) + (((0.71) * sj1)) + (((-0.15) * x1503)) + (((0.54) * x1510)));
                                                                                                        evalcond[4] = (((sj3 * x1508)) + ((r20 * x1506)) + (((-1.0) * r20 * x1500 * x1502)) + x1510 + x1512 + ((x1500 * x1501)) + ((r22 * x1499)));
                                                                                                        evalcond[5] = ((((-1.0) * x1513)) + ((sj3 * x1503)) + ((r00 * x1506)) + (((-1.0) * r00 * x1500 * x1502)) + x1509 + ((x1500 * x1505)) + ((r02 * x1499)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    IkReal x1514 = (cj4 * r22);
                                                                                                    IkReal x1515 = ((1.0) * cj1);
                                                                                                    IkReal x1516 = (cj4 * r02);
                                                                                                    IkReal x1517 = (sj4 * sj5);
                                                                                                    IkReal x1518 = ((1.0) * sj1);
                                                                                                    IkReal x1519 = (cj5 * sj4);
                                                                                                    IkReal x1520 = (sj1 * x1519);
                                                                                                    if (IKabs(((((-1.0) * r01 * x1517 * x1518)) + ((r00 * x1520)) + ((cj1 * r21 * x1517)) + ((sj1 * x1516)) + (((-1.0) * x1514 * x1515)) + (((-1.0) * r20 * x1515 * x1519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1 * r00 * x1519)) + ((cj1 * x1516)) + ((r20 * x1520)) + ((sj1 * x1514)) + (((-1.0) * r01 * x1515 * x1517)) + (((-1.0) * r21 * x1517 * x1518)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r01 * x1517 * x1518)) + ((r00 * x1520)) + ((cj1 * r21 * x1517)) + ((sj1 * x1516)) + (((-1.0) * x1514 * x1515)) + (((-1.0) * r20 * x1515 * x1519)))) + IKsqr((((cj1 * r00 * x1519)) + ((cj1 * x1516)) + ((r20 * x1520)) + ((sj1 * x1514)) + (((-1.0) * r01 * x1515 * x1517)) + (((-1.0) * r21 * x1517 * x1518)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2(((((-1.0) * r01 * x1517 * x1518)) + ((r00 * x1520)) + ((cj1 * r21 * x1517)) + ((sj1 * x1516)) + (((-1.0) * x1514 * x1515)) + (((-1.0) * r20 * x1515 * x1519))), (((cj1 * r00 * x1519)) + ((cj1 * x1516)) + ((r20 * x1520)) + ((sj1 * x1514)) + (((-1.0) * r01 * x1515 * x1517)) + (((-1.0) * r21 * x1517 * x1518))));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[6];
                                                                                                            IkReal x1521 = IKcos(j2);
                                                                                                            IkReal x1522 = IKsin(j2);
                                                                                                            IkReal x1523 = (cj3 * sj4);
                                                                                                            IkReal x1524 = (cj3 * cj4);
                                                                                                            IkReal x1525 = (r21 * sj5);
                                                                                                            IkReal x1526 = ((1.0) * cj5);
                                                                                                            IkReal x1527 = (cj5 * r01);
                                                                                                            IkReal x1528 = ((0.15) * sj5);
                                                                                                            IkReal x1529 = (r01 * sj5);
                                                                                                            IkReal x1530 = (sj3 * sj5);
                                                                                                            IkReal x1531 = ((1.0) * cj4);
                                                                                                            IkReal x1532 = (cj5 * r21);
                                                                                                            IkReal x1533 = (cj1 * x1521);
                                                                                                            IkReal x1534 = (sj1 * x1522);
                                                                                                            IkReal x1535 = (cj1 * x1522);
                                                                                                            IkReal x1536 = (sj1 * x1521);
                                                                                                            IkReal x1537 = (x1534 + x1533);
                                                                                                            evalcond[0] = ((((-1.0) * r00 * sj4 * x1526)) + (((-1.0) * r02 * x1531)) + x1537 + ((sj4 * x1529)));
                                                                                                            evalcond[1] = ((((-1.0) * x1535)) + (((-1.0) * r22 * x1531)) + (((-1.0) * r20 * sj4 * x1526)) + x1536 + ((sj4 * x1525)));
                                                                                                            evalcond[2] = ((((0.71) * cj1)) + (((-1.0) * pz)) + (((-0.15) * x1532)) + (((-0.54) * x1536)) + (((-1.0) * r20 * x1528)) + (((0.54) * x1535)));
                                                                                                            evalcond[3] = ((((-1.0) * r00 * x1528)) + (((-0.71) * sj1)) + (((-1.0) * px)) + (((-0.54) * x1534)) + (((-0.54) * x1533)) + (((-0.15) * x1527)));
                                                                                                            evalcond[4] = (((x1524 * x1525)) + (((-1.0) * r20 * x1524 * x1526)) + ((sj3 * x1532)) + ((r20 * x1530)) + x1537 + ((r22 * x1523)));
                                                                                                            evalcond[5] = (((x1524 * x1529)) + (((-1.0) * x1536)) + ((sj3 * x1527)) + ((r00 * x1530)) + x1535 + (((-1.0) * r00 * x1524 * x1526)) + ((r02 * x1523)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    {
                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                        bool j2valid[1] = {false};
                                                                                                        _nj2 = 1;
                                                                                                        IkReal x1538 = (cj4 * r22);
                                                                                                        IkReal x1539 = ((1.0) * cj1);
                                                                                                        IkReal x1540 = (cj5 * sj4);
                                                                                                        IkReal x1541 = (cj4 * r12);
                                                                                                        IkReal x1542 = ((1.0) * sj1);
                                                                                                        IkReal x1543 = (r11 * sj4 * sj5);
                                                                                                        IkReal x1544 = (r21 * sj4 * sj5);
                                                                                                        if (IKabs((((cj1 * x1544)) + ((sj1 * x1543)) + (((-1.0) * r20 * x1539 * x1540)) + (((-1.0) * x1538 * x1539)) + (((-1.0) * x1541 * x1542)) + (((-1.0) * r10 * x1540 * x1542)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * r10 * x1539 * x1540)) + ((cj1 * x1543)) + ((sj1 * x1538)) + ((r20 * sj1 * x1540)) + (((-1.0) * x1539 * x1541)) + (((-1.0) * x1542 * x1544)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1 * x1544)) + ((sj1 * x1543)) + (((-1.0) * r20 * x1539 * x1540)) + (((-1.0) * x1538 * x1539)) + (((-1.0) * x1541 * x1542)) + (((-1.0) * r10 * x1540 * x1542)))) + IKsqr(((((-1.0) * r10 * x1539 * x1540)) + ((cj1 * x1543)) + ((sj1 * x1538)) + ((r20 * sj1 * x1540)) + (((-1.0) * x1539 * x1541)) + (((-1.0) * x1542 * x1544)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                            continue;
                                                                                                        j2array[0] = IKatan2((((cj1 * x1544)) + ((sj1 * x1543)) + (((-1.0) * r20 * x1539 * x1540)) + (((-1.0) * x1538 * x1539)) + (((-1.0) * x1541 * x1542)) + (((-1.0) * r10 * x1540 * x1542))), ((((-1.0) * r10 * x1539 * x1540)) + ((cj1 * x1543)) + ((sj1 * x1538)) + ((r20 * sj1 * x1540)) + (((-1.0) * x1539 * x1541)) + (((-1.0) * x1542 * x1544))));
                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                        if (j2array[0] > IKPI)
                                                                                                        {
                                                                                                            j2array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                        {
                                                                                                            j2array[0] += IK2PI;
                                                                                                        }
                                                                                                        j2valid[0] = true;
                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                        {
                                                                                                            if (!j2valid[ij2])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij2[0] = ij2;
                                                                                                            _ij2[1] = -1;
                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                            {
                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j2valid[iij2] = false;
                                                                                                                    _ij2[1] = iij2;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j2 = j2array[ij2];
                                                                                                            cj2 = cj2array[ij2];
                                                                                                            sj2 = sj2array[ij2];
                                                                                                            {
                                                                                                                IkReal evalcond[6];
                                                                                                                IkReal x1545 = IKsin(j2);
                                                                                                                IkReal x1546 = IKcos(j2);
                                                                                                                IkReal x1547 = (sj4 * sj5);
                                                                                                                IkReal x1548 = ((1.0) * cj5);
                                                                                                                IkReal x1549 = (cj3 * cj4);
                                                                                                                IkReal x1550 = (cj5 * r11);
                                                                                                                IkReal x1551 = ((0.15) * sj5);
                                                                                                                IkReal x1552 = (cj3 * sj4);
                                                                                                                IkReal x1553 = ((1.0) * cj4);
                                                                                                                IkReal x1554 = (cj5 * r21);
                                                                                                                IkReal x1555 = (sj3 * sj5);
                                                                                                                IkReal x1556 = (sj1 * x1546);
                                                                                                                IkReal x1557 = (cj1 * x1546);
                                                                                                                IkReal x1558 = (sj5 * x1549);
                                                                                                                IkReal x1559 = ((0.54) * x1545);
                                                                                                                IkReal x1560 = (sj1 * x1545);
                                                                                                                IkReal x1561 = ((1.0) * cj1 * x1545);
                                                                                                                evalcond[0] = ((((-1.0) * r22 * x1553)) + (((-1.0) * r20 * sj4 * x1548)) + x1556 + ((r21 * x1547)) + (((-1.0) * x1561)));
                                                                                                                evalcond[1] = ((((-1.0) * x1557)) + (((-1.0) * r10 * sj4 * x1548)) + ((r11 * x1547)) + (((-1.0) * r12 * x1553)) + (((-1.0) * x1560)));
                                                                                                                evalcond[2] = ((((0.71) * cj1)) + (((-0.15) * x1554)) + ((cj1 * x1559)) + (((-1.0) * pz)) + (((-0.54) * x1556)) + (((-1.0) * r20 * x1551)));
                                                                                                                evalcond[3] = ((((-0.15) * x1550)) + (((-1.0) * py)) + ((sj1 * x1559)) + (((0.71) * sj1)) + (((0.54) * x1557)) + (((-1.0) * r10 * x1551)));
                                                                                                                evalcond[4] = (((r22 * x1552)) + x1560 + x1557 + (((-1.0) * r20 * x1548 * x1549)) + ((sj3 * x1554)) + ((r21 * x1558)) + ((r20 * x1555)));
                                                                                                                evalcond[5] = (((r11 * x1558)) + ((r12 * x1552)) + x1556 + ((sj3 * x1550)) + (((-1.0) * r10 * x1548 * x1549)) + (((-1.0) * x1561)) + ((r10 * x1555)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j3;
                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j4;
                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j5;
                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                std::vector<int> vfree(0);
                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                                bool bgotonextstatement = true;
                                                                                                do
                                                                                                {
                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                    {
                                                                                                        bgotonextstatement = false;
                                                                                                        {
                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                            bool j2valid[1] = {false};
                                                                                                            _nj2 = 1;
                                                                                                            IkReal x1562 = (cj4 * r22);
                                                                                                            IkReal x1563 = ((1.0) * cj1);
                                                                                                            IkReal x1564 = (cj4 * r12);
                                                                                                            IkReal x1565 = (sj1 * sj4);
                                                                                                            IkReal x1566 = (cj5 * r10);
                                                                                                            IkReal x1567 = (r11 * sj5);
                                                                                                            IkReal x1568 = (cj1 * sj4);
                                                                                                            IkReal x1569 = (r21 * sj5);
                                                                                                            IkReal x1570 = (cj5 * r20);
                                                                                                            if (IKabs((((sj1 * x1564)) + (((-1.0) * x1562 * x1563)) + ((x1568 * x1569)) + (((-1.0) * x1565 * x1567)) + (((-1.0) * sj4 * x1563 * x1570)) + ((x1565 * x1566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1566 * x1568)) + ((cj1 * x1564)) + ((sj1 * x1562)) + (((-1.0) * sj4 * x1563 * x1567)) + (((-1.0) * x1565 * x1569)) + ((x1565 * x1570)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1 * x1564)) + (((-1.0) * x1562 * x1563)) + ((x1568 * x1569)) + (((-1.0) * x1565 * x1567)) + (((-1.0) * sj4 * x1563 * x1570)) + ((x1565 * x1566)))) + IKsqr((((x1566 * x1568)) + ((cj1 * x1564)) + ((sj1 * x1562)) + (((-1.0) * sj4 * x1563 * x1567)) + (((-1.0) * x1565 * x1569)) + ((x1565 * x1570)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                continue;
                                                                                                            j2array[0] = IKatan2((((sj1 * x1564)) + (((-1.0) * x1562 * x1563)) + ((x1568 * x1569)) + (((-1.0) * x1565 * x1567)) + (((-1.0) * sj4 * x1563 * x1570)) + ((x1565 * x1566))), (((x1566 * x1568)) + ((cj1 * x1564)) + ((sj1 * x1562)) + (((-1.0) * sj4 * x1563 * x1567)) + (((-1.0) * x1565 * x1569)) + ((x1565 * x1570))));
                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                            if (j2array[0] > IKPI)
                                                                                                            {
                                                                                                                j2array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                            {
                                                                                                                j2array[0] += IK2PI;
                                                                                                            }
                                                                                                            j2valid[0] = true;
                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                            {
                                                                                                                if (!j2valid[ij2])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij2[0] = ij2;
                                                                                                                _ij2[1] = -1;
                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                {
                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j2valid[iij2] = false;
                                                                                                                        _ij2[1] = iij2;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j2 = j2array[ij2];
                                                                                                                cj2 = cj2array[ij2];
                                                                                                                sj2 = sj2array[ij2];
                                                                                                                {
                                                                                                                    IkReal evalcond[6];
                                                                                                                    IkReal x1571 = IKcos(j2);
                                                                                                                    IkReal x1572 = IKsin(j2);
                                                                                                                    IkReal x1573 = (sj4 * sj5);
                                                                                                                    IkReal x1574 = ((1.0) * cj5);
                                                                                                                    IkReal x1575 = (cj3 * cj4);
                                                                                                                    IkReal x1576 = (cj5 * r11);
                                                                                                                    IkReal x1577 = ((0.15) * sj5);
                                                                                                                    IkReal x1578 = (cj3 * sj4);
                                                                                                                    IkReal x1579 = ((1.0) * cj4);
                                                                                                                    IkReal x1580 = (cj5 * r21);
                                                                                                                    IkReal x1581 = (sj3 * sj5);
                                                                                                                    IkReal x1582 = (cj1 * x1571);
                                                                                                                    IkReal x1583 = (sj1 * x1572);
                                                                                                                    IkReal x1584 = (sj5 * x1575);
                                                                                                                    IkReal x1585 = (cj1 * x1572);
                                                                                                                    IkReal x1586 = (sj1 * x1571);
                                                                                                                    IkReal x1587 = (x1582 + x1583);
                                                                                                                    evalcond[0] = ((((-1.0) * r10 * sj4 * x1574)) + x1587 + ((r11 * x1573)) + (((-1.0) * r12 * x1579)));
                                                                                                                    evalcond[1] = ((((-1.0) * r22 * x1579)) + (((-1.0) * r20 * sj4 * x1574)) + x1586 + ((r21 * x1573)) + (((-1.0) * x1585)));
                                                                                                                    evalcond[2] = ((((0.71) * cj1)) + (((0.54) * x1585)) + (((-1.0) * pz)) + (((-0.54) * x1586)) + (((-1.0) * r20 * x1577)) + (((-0.15) * x1580)));
                                                                                                                    evalcond[3] = ((((-0.71) * sj1)) + (((-1.0) * py)) + (((-0.54) * x1583)) + (((-0.54) * x1582)) + (((-1.0) * r10 * x1577)) + (((-0.15) * x1576)));
                                                                                                                    evalcond[4] = (((sj3 * x1580)) + (((-1.0) * r20 * x1574 * x1575)) + ((r20 * x1581)) + x1587 + ((r22 * x1578)) + ((r21 * x1584)));
                                                                                                                    evalcond[5] = (((r12 * x1578)) + ((r11 * x1584)) + x1585 + (((-1.0) * r10 * x1574 * x1575)) + (((-1.0) * x1586)) + ((r10 * x1581)) + ((sj3 * x1576)));
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                    std::vector<int> vfree(0);
                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } while (0);
                                                                                                if (bgotonextstatement)
                                                                                                {
                                                                                                    bool bgotonextstatement = true;
                                                                                                    do
                                                                                                    {
                                                                                                        if (1)
                                                                                                        {
                                                                                                            bgotonextstatement = false;
                                                                                                            continue; // branch miss [j2]
                                                                                                        }
                                                                                                    } while (0);
                                                                                                    if (bgotonextstatement)
                                                                                                    {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                {
                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    IkReal x1588 = ((1.0) * sj1);
                                                                                    IkReal x1589 = (sj1 * sj4);
                                                                                    IkReal x1590 = (r11 * sj5);
                                                                                    IkReal x1591 = ((1.0) * cj1);
                                                                                    IkReal x1592 = (cj4 * r12);
                                                                                    IkReal x1593 = (cj5 * r20 * sj0);
                                                                                    IkReal x1594 = (cj5 * r10 * sj4);
                                                                                    IkReal x1595 = (cj4 * r22 * sj0);
                                                                                    IkReal x1596 = (r21 * sj0 * sj4 * sj5);
                                                                                    CheckValue<IkReal> x1597 = IKatan2WithCheck(IkReal((((cj1 * x1596)) + ((x1589 * x1590)) + (((-1.0) * x1588 * x1594)) + (((-1.0) * x1588 * x1592)) + (((-1.0) * x1591 * x1595)) + (((-1.0) * sj4 * x1591 * x1593)))), IkReal((((cj1 * sj4 * x1590)) + ((x1589 * x1593)) + (((-1.0) * x1588 * x1596)) + (((-1.0) * x1591 * x1592)) + (((-1.0) * x1591 * x1594)) + ((sj1 * x1595)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x1597.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x1598 = IKPowWithIntegerCheck(IKsign(sj0), -1);
                                                                                    if (!x1598.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    j2array[0] = ((-1.5707963267949) + (x1597.value) + (((1.5707963267949) * (x1598.value))));
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI)
                                                                                    {
                                                                                        j2array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j2array[0] < -IKPI)
                                                                                    {
                                                                                        j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                    {
                                                                                        if (!j2valid[ij2])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                        {
                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j2valid[iij2] = false;
                                                                                                _ij2[1] = iij2;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                            IkReal evalcond[9];
                                                                                            IkReal x1599 = IKsin(j2);
                                                                                            IkReal x1600 = IKcos(j2);
                                                                                            IkReal x1601 = (cj3 * sj4);
                                                                                            IkReal x1602 = (cj3 * cj4);
                                                                                            IkReal x1603 = (r21 * sj5);
                                                                                            IkReal x1604 = ((1.0) * cj5);
                                                                                            IkReal x1605 = (sj4 * sj5);
                                                                                            IkReal x1606 = (cj5 * sj3);
                                                                                            IkReal x1607 = ((0.15) * cj5);
                                                                                            IkReal x1608 = ((1.0) * cj0);
                                                                                            IkReal x1609 = ((0.15) * sj5);
                                                                                            IkReal x1610 = ((0.54) * sj0);
                                                                                            IkReal x1611 = (sj3 * sj5);
                                                                                            IkReal x1612 = ((1.0) * cj4);
                                                                                            IkReal x1613 = ((0.71) * sj1);
                                                                                            IkReal x1614 = ((0.54) * cj0);
                                                                                            IkReal x1615 = (cj1 * x1600);
                                                                                            IkReal x1616 = (sj1 * x1599);
                                                                                            IkReal x1617 = (cj1 * x1599);
                                                                                            IkReal x1618 = (sj1 * x1600);
                                                                                            IkReal x1619 = ((1.0) * sj0 * x1599);
                                                                                            evalcond[0] = ((((-1.0) * x1617)) + (((-1.0) * r20 * sj4 * x1604)) + x1618 + ((sj4 * x1603)) + (((-1.0) * r22 * x1612)));
                                                                                            evalcond[1] = ((((0.71) * cj1)) + (((-1.0) * r20 * x1609)) + (((-1.0) * r21 * x1607)) + (((-0.54) * x1618)) + (((0.54) * x1617)) + (((-1.0) * pz)));
                                                                                            evalcond[2] = ((((-1.0) * r00 * sj4 * x1604)) + ((r01 * x1605)) + (((-1.0) * r02 * x1612)) + (((-1.0) * x1608 * x1615)) + (((-1.0) * x1608 * x1616)));
                                                                                            evalcond[3] = ((((-1.0) * r12 * x1612)) + ((r11 * x1605)) + (((-1.0) * sj0 * x1616)) + (((-1.0) * sj0 * x1615)) + (((-1.0) * r10 * sj4 * x1604)));
                                                                                            evalcond[4] = (((cj0 * x1613)) + ((x1614 * x1615)) + ((x1614 * x1616)) + (((-1.0) * r00 * x1609)) + (((-1.0) * px)) + (((-1.0) * r01 * x1607)));
                                                                                            evalcond[5] = (((sj0 * x1613)) + (((-1.0) * py)) + (((-1.0) * r10 * x1609)) + ((x1610 * x1615)) + ((x1610 * x1616)) + (((-1.0) * r11 * x1607)));
                                                                                            evalcond[6] = (((r20 * x1611)) + x1616 + x1615 + ((r21 * x1606)) + ((r22 * x1601)) + (((-1.0) * r20 * x1602 * x1604)) + ((x1602 * x1603)));
                                                                                            evalcond[7] = ((((-1.0) * r00 * x1602 * x1604)) + ((r01 * sj5 * x1602)) + ((r00 * x1611)) + ((cj0 * x1618)) + ((r01 * x1606)) + (((-1.0) * x1608 * x1617)) + ((r02 * x1601)));
                                                                                            evalcond[8] = (((r11 * sj5 * x1602)) + ((sj0 * x1618)) + ((r11 * x1606)) + ((r12 * x1601)) + (((-1.0) * r10 * x1602 * x1604)) + (((-1.0) * sj0 * x1617)) + ((r10 * x1611)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        {
                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                            bool j2valid[1] = {false};
                                                                            _nj2 = 1;
                                                                            IkReal x1620 = ((1.0) * cj0);
                                                                            IkReal x1621 = ((1.0) * sj1);
                                                                            IkReal x1622 = (cj5 * sj4);
                                                                            IkReal x1623 = (cj4 * r22);
                                                                            IkReal x1624 = (cj4 * r02);
                                                                            IkReal x1625 = (cj0 * sj1);
                                                                            IkReal x1626 = ((1.0) * cj1);
                                                                            IkReal x1627 = (sj1 * sj4 * sj5);
                                                                            IkReal x1628 = (cj1 * sj4 * sj5);
                                                                            CheckValue<IkReal> x1629 = IKPowWithIntegerCheck(IKsign(cj0), -1);
                                                                            if (!x1629.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x1630 = IKatan2WithCheck(IkReal(((((-1.0) * cj1 * x1620 * x1623)) + ((r01 * x1627)) + ((cj0 * r21 * x1628)) + (((-1.0) * cj1 * r20 * x1620 * x1622)) + (((-1.0) * x1621 * x1624)) + (((-1.0) * r00 * x1621 * x1622)))), IkReal((((r01 * x1628)) + ((r20 * x1622 * x1625)) + ((x1623 * x1625)) + (((-1.0) * r00 * x1622 * x1626)) + (((-1.0) * r21 * x1620 * x1627)) + (((-1.0) * x1624 * x1626)))), IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x1630.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x1629.value))) + (x1630.value));
                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                            if (j2array[0] > IKPI)
                                                                            {
                                                                                j2array[0] -= IK2PI;
                                                                            }
                                                                            else if (j2array[0] < -IKPI)
                                                                            {
                                                                                j2array[0] += IK2PI;
                                                                            }
                                                                            j2valid[0] = true;
                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                            {
                                                                                if (!j2valid[ij2])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij2[0] = ij2;
                                                                                _ij2[1] = -1;
                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                {
                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j2valid[iij2] = false;
                                                                                        _ij2[1] = iij2;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j2 = j2array[ij2];
                                                                                cj2 = cj2array[ij2];
                                                                                sj2 = sj2array[ij2];
                                                                                {
                                                                                    IkReal evalcond[9];
                                                                                    IkReal x1631 = IKsin(j2);
                                                                                    IkReal x1632 = IKcos(j2);
                                                                                    IkReal x1633 = (cj3 * sj4);
                                                                                    IkReal x1634 = (cj3 * cj4);
                                                                                    IkReal x1635 = (r21 * sj5);
                                                                                    IkReal x1636 = ((1.0) * cj5);
                                                                                    IkReal x1637 = (sj4 * sj5);
                                                                                    IkReal x1638 = (cj5 * sj3);
                                                                                    IkReal x1639 = ((0.15) * cj5);
                                                                                    IkReal x1640 = ((1.0) * cj0);
                                                                                    IkReal x1641 = ((0.15) * sj5);
                                                                                    IkReal x1642 = ((0.54) * sj0);
                                                                                    IkReal x1643 = (sj3 * sj5);
                                                                                    IkReal x1644 = ((1.0) * cj4);
                                                                                    IkReal x1645 = ((0.71) * sj1);
                                                                                    IkReal x1646 = ((0.54) * cj0);
                                                                                    IkReal x1647 = (cj1 * x1632);
                                                                                    IkReal x1648 = (sj1 * x1631);
                                                                                    IkReal x1649 = (cj1 * x1631);
                                                                                    IkReal x1650 = (sj1 * x1632);
                                                                                    IkReal x1651 = ((1.0) * sj0 * x1631);
                                                                                    evalcond[0] = ((((-1.0) * r22 * x1644)) + x1650 + (((-1.0) * x1649)) + (((-1.0) * r20 * sj4 * x1636)) + ((sj4 * x1635)));
                                                                                    evalcond[1] = ((((0.71) * cj1)) + (((0.54) * x1649)) + (((-1.0) * pz)) + (((-1.0) * r20 * x1641)) + (((-1.0) * r21 * x1639)) + (((-0.54) * x1650)));
                                                                                    evalcond[2] = ((((-1.0) * x1640 * x1647)) + (((-1.0) * x1640 * x1648)) + ((r01 * x1637)) + (((-1.0) * r00 * sj4 * x1636)) + (((-1.0) * r02 * x1644)));
                                                                                    evalcond[3] = ((((-1.0) * r12 * x1644)) + ((r11 * x1637)) + (((-1.0) * r10 * sj4 * x1636)) + (((-1.0) * sj0 * x1648)) + (((-1.0) * sj0 * x1647)));
                                                                                    evalcond[4] = ((((-1.0) * r00 * x1641)) + (((-1.0) * r01 * x1639)) + (((-1.0) * px)) + ((x1646 * x1648)) + ((x1646 * x1647)) + ((cj0 * x1645)));
                                                                                    evalcond[5] = ((((-1.0) * r11 * x1639)) + ((sj0 * x1645)) + (((-1.0) * py)) + (((-1.0) * r10 * x1641)) + ((x1642 * x1648)) + ((x1642 * x1647)));
                                                                                    evalcond[6] = (((r21 * x1638)) + x1647 + x1648 + ((r20 * x1643)) + (((-1.0) * r20 * x1634 * x1636)) + ((x1634 * x1635)) + ((r22 * x1633)));
                                                                                    evalcond[7] = (((r02 * x1633)) + (((-1.0) * x1640 * x1649)) + ((cj0 * x1650)) + ((r00 * x1643)) + ((r01 * x1638)) + (((-1.0) * r00 * x1634 * x1636)) + ((r01 * sj5 * x1634)));
                                                                                    evalcond[8] = (((sj0 * x1650)) + ((r10 * x1643)) + ((r11 * x1638)) + ((r12 * x1633)) + (((-1.0) * r10 * x1634 * x1636)) + (((-1.0) * sj0 * x1649)) + ((r11 * sj5 * x1634)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 1;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                {
                                    IkReal j3array[1], cj3array[1], sj3array[1];
                                    bool j3valid[1] = {false};
                                    _nj3 = 1;
                                    IkReal x1652 = ((1.0) * cj5);
                                    IkReal x1653 = (r21 * sj0);
                                    IkReal x1654 = (r20 * sj0);
                                    IkReal x1655 = ((1.0) * sj5);
                                    CheckValue<IkReal> x1656 = IKatan2WithCheck(IkReal(((((-1.0) * x1652 * x1653)) + (((-1.0) * x1654 * x1655)))), IkReal(((((-1.0) * cj4 * x1653 * x1655)) + ((cj4 * cj5 * x1654)) + (((-1.0) * r22 * sj0 * sj4)))), IKFAST_ATAN2_MAGTHRESH);
                                    if (!x1656.valid)
                                    {
                                        continue;
                                    }
                                    CheckValue<IkReal> x1657 = IKPowWithIntegerCheck(IKsign(((((-1.0) * r10 * sj4 * x1652)) + ((r11 * sj4 * sj5)) + (((-1.0) * cj4 * r12)))), -1);
                                    if (!x1657.valid)
                                    {
                                        continue;
                                    }
                                    j3array[0] = ((-1.5707963267949) + (x1656.value) + (((1.5707963267949) * (x1657.value))));
                                    sj3array[0] = IKsin(j3array[0]);
                                    cj3array[0] = IKcos(j3array[0]);
                                    if (j3array[0] > IKPI)
                                    {
                                        j3array[0] -= IK2PI;
                                    }
                                    else if (j3array[0] < -IKPI)
                                    {
                                        j3array[0] += IK2PI;
                                    }
                                    j3valid[0] = true;
                                    for (int ij3 = 0; ij3 < 1; ++ij3)
                                    {
                                        if (!j3valid[ij3])
                                        {
                                            continue;
                                        }
                                        _ij3[0] = ij3;
                                        _ij3[1] = -1;
                                        for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                        {
                                            if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                            {
                                                j3valid[iij3] = false;
                                                _ij3[1] = iij3;
                                                break;
                                            }
                                        }
                                        j3 = j3array[ij3];
                                        cj3 = cj3array[ij3];
                                        sj3 = sj3array[ij3];
                                        {
                                            IkReal evalcond[3];
                                            IkReal x1658 = IKsin(j3);
                                            IkReal x1659 = IKcos(j3);
                                            IkReal x1660 = ((1.0) * cj5);
                                            IkReal x1661 = (cj4 * x1658);
                                            IkReal x1662 = (sj4 * x1658);
                                            IkReal x1663 = ((1.0) * sj5 * x1659);
                                            evalcond[0] = ((((-1.0) * r20 * x1660 * x1661)) + (((-1.0) * r20 * x1663)) + (((-1.0) * r21 * x1659 * x1660)) + ((r21 * sj5 * x1661)) + ((r22 * x1662)));
                                            evalcond[1] = (cj0 + ((r12 * x1662)) + (((-1.0) * r11 * x1659 * x1660)) + (((-1.0) * r10 * x1663)) + ((r11 * sj5 * x1661)) + (((-1.0) * r10 * x1660 * x1661)));
                                            evalcond[2] = ((((-1.0) * r00 * x1663)) + (((-1.0) * sj0)) + (((-1.0) * r01 * x1659 * x1660)) + ((r02 * x1662)) + (((-1.0) * r00 * x1660 * x1661)) + ((r01 * sj5 * x1661)));
                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                            {
                                                continue;
                                            }
                                        }

                                        {
                                            IkReal j1eval[1];
                                            j1eval[0] = sj0;
                                            if (IKabs(j1eval[0]) < 0.0000010000000000)
                                            {
                                                {
                                                    IkReal j1eval[1];
                                                    j1eval[0] = cj0;
                                                    if (IKabs(j1eval[0]) < 0.0000010000000000)
                                                    {
                                                        {
                                                            IkReal evalcond[1];
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                        bool j1valid[1] = {false};
                                                                        _nj1 = 1;
                                                                        IkReal x1664 = ((0.76056338028169) * cj4);
                                                                        IkReal x1665 = ((0.211267605633803) * sj5);
                                                                        IkReal x1666 = ((0.211267605633803) * cj5);
                                                                        IkReal x1667 = ((0.76056338028169) * sj4 * sj5);
                                                                        IkReal x1668 = ((0.76056338028169) * cj5 * sj4);
                                                                        if (IKabs((((r10 * x1665)) + ((r10 * x1668)) + ((r12 * x1664)) + ((r11 * x1666)) + (((-1.0) * r11 * x1667)) + (((1.40845070422535) * py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * x1665)) + ((r20 * x1668)) + (((-1.0) * r21 * x1667)) + (((1.40845070422535) * pz)) + ((r21 * x1666)) + ((r22 * x1664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10 * x1665)) + ((r10 * x1668)) + ((r12 * x1664)) + ((r11 * x1666)) + (((-1.0) * r11 * x1667)) + (((1.40845070422535) * py)))) + IKsqr((((r20 * x1665)) + ((r20 * x1668)) + (((-1.0) * r21 * x1667)) + (((1.40845070422535) * pz)) + ((r21 * x1666)) + ((r22 * x1664)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                        j1array[0] = IKatan2((((r10 * x1665)) + ((r10 * x1668)) + ((r12 * x1664)) + ((r11 * x1666)) + (((-1.0) * r11 * x1667)) + (((1.40845070422535) * py))), (((r20 * x1665)) + ((r20 * x1668)) + (((-1.0) * r21 * x1667)) + (((1.40845070422535) * pz)) + ((r21 * x1666)) + ((r22 * x1664))));
                                                                        sj1array[0] = IKsin(j1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        if (j1array[0] > IKPI)
                                                                        {
                                                                            j1array[0] -= IK2PI;
                                                                        }
                                                                        else if (j1array[0] < -IKPI)
                                                                        {
                                                                            j1array[0] += IK2PI;
                                                                        }
                                                                        j1valid[0] = true;
                                                                        for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                        {
                                                                            if (!j1valid[ij1])
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij1[0] = ij1;
                                                                            _ij1[1] = -1;
                                                                            for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                            {
                                                                                if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                    j1valid[iij1] = false;
                                                                                    _ij1[1] = iij1;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            j1 = j1array[ij1];
                                                                            cj1 = cj1array[ij1];
                                                                            sj1 = sj1array[ij1];
                                                                            {
                                                                                IkReal evalcond[4];
                                                                                IkReal x1669 = ((1.0) * py);
                                                                                IkReal x1670 = ((0.54) * sj4);
                                                                                IkReal x1671 = (r11 * sj5);
                                                                                IkReal x1672 = (cj5 * r10);
                                                                                IkReal x1673 = (cj5 * r11);
                                                                                IkReal x1674 = ((0.54) * cj4);
                                                                                IkReal x1675 = ((0.15) * sj5);
                                                                                IkReal x1676 = (r21 * sj5);
                                                                                IkReal x1677 = ((0.54) * sj3);
                                                                                IkReal x1678 = (cj5 * r21);
                                                                                IkReal x1679 = (cj5 * r20);
                                                                                IkReal x1680 = ((0.71) * (IKsin(j1)));
                                                                                IkReal x1681 = (r10 * x1675);
                                                                                IkReal x1682 = ((0.15) * x1673);
                                                                                IkReal x1683 = ((0.71) * (IKcos(j1)));
                                                                                IkReal x1684 = ((0.15) * x1678);
                                                                                IkReal x1685 = (r20 * x1675);
                                                                                IkReal x1686 = (x1685 + x1684);
                                                                                IkReal x1687 = (x1669 + x1681 + x1682);
                                                                                evalcond[0] = ((((-1.0) * x1683)) + x1686 + pz + (((-1.0) * x1670 * x1676)) + ((r22 * x1674)) + ((x1670 * x1679)));
                                                                                evalcond[1] = ((((-1.0) * x1687)) + x1680 + (((-1.0) * r12 * x1674)) + (((-1.0) * x1670 * x1672)) + ((x1670 * x1671)));
                                                                                evalcond[2] = ((((-1.0) * x1687)) + x1680 + (((-1.0) * cj3 * r22 * x1670)) + ((cj3 * x1674 * x1679)) + (((-1.0) * cj3 * x1674 * x1676)) + (((-1.0) * x1677 * x1678)) + (((-1.0) * r20 * sj5 * x1677)));
                                                                                evalcond[3] = ((((-1.0) * x1686)) + ((cj3 * x1671 * x1674)) + x1683 + ((x1673 * x1677)) + (((-1.0) * cj3 * x1672 * x1674)) + (((-1.0) * pz)) + ((r10 * sj5 * x1677)) + ((cj3 * r12 * x1670)));
                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                bool j2valid[1] = {false};
                                                                                _nj2 = 1;
                                                                                IkReal x1688 = (cj4 * r22);
                                                                                IkReal x1689 = ((1.0) * cj1);
                                                                                IkReal x1690 = (cj5 * sj4);
                                                                                IkReal x1691 = (cj4 * r12);
                                                                                IkReal x1692 = ((1.0) * sj1);
                                                                                IkReal x1693 = (r11 * sj4 * sj5);
                                                                                IkReal x1694 = (r21 * sj4 * sj5);
                                                                                if (IKabs(((((-1.0) * r10 * x1690 * x1692)) + ((sj1 * x1693)) + (((-1.0) * x1691 * x1692)) + (((-1.0) * r20 * x1689 * x1690)) + (((-1.0) * x1688 * x1689)) + ((cj1 * x1694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * x1692 * x1694)) + ((sj1 * x1688)) + (((-1.0) * r10 * x1689 * x1690)) + ((r20 * sj1 * x1690)) + (((-1.0) * x1689 * x1691)) + ((cj1 * x1693)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r10 * x1690 * x1692)) + ((sj1 * x1693)) + (((-1.0) * x1691 * x1692)) + (((-1.0) * r20 * x1689 * x1690)) + (((-1.0) * x1688 * x1689)) + ((cj1 * x1694)))) + IKsqr(((((-1.0) * x1692 * x1694)) + ((sj1 * x1688)) + (((-1.0) * r10 * x1689 * x1690)) + ((r20 * sj1 * x1690)) + (((-1.0) * x1689 * x1691)) + ((cj1 * x1693)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j2array[0] = IKatan2(((((-1.0) * r10 * x1690 * x1692)) + ((sj1 * x1693)) + (((-1.0) * x1691 * x1692)) + (((-1.0) * r20 * x1689 * x1690)) + (((-1.0) * x1688 * x1689)) + ((cj1 * x1694))), ((((-1.0) * x1692 * x1694)) + ((sj1 * x1688)) + (((-1.0) * r10 * x1689 * x1690)) + ((r20 * sj1 * x1690)) + (((-1.0) * x1689 * x1691)) + ((cj1 * x1693))));
                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                if (j2array[0] > IKPI)
                                                                                {
                                                                                    j2array[0] -= IK2PI;
                                                                                }
                                                                                else if (j2array[0] < -IKPI)
                                                                                {
                                                                                    j2array[0] += IK2PI;
                                                                                }
                                                                                j2valid[0] = true;
                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                {
                                                                                    if (!j2valid[ij2])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij2[0] = ij2;
                                                                                    _ij2[1] = -1;
                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                    {
                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j2valid[iij2] = false;
                                                                                            _ij2[1] = iij2;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j2 = j2array[ij2];
                                                                                    cj2 = cj2array[ij2];
                                                                                    sj2 = sj2array[ij2];
                                                                                    {
                                                                                        IkReal evalcond[6];
                                                                                        IkReal x1695 = IKsin(j2);
                                                                                        IkReal x1696 = IKcos(j2);
                                                                                        IkReal x1697 = (sj4 * sj5);
                                                                                        IkReal x1698 = ((1.0) * cj5);
                                                                                        IkReal x1699 = (cj3 * cj4);
                                                                                        IkReal x1700 = (cj5 * r11);
                                                                                        IkReal x1701 = ((0.15) * sj5);
                                                                                        IkReal x1702 = (cj3 * sj4);
                                                                                        IkReal x1703 = ((1.0) * cj4);
                                                                                        IkReal x1704 = (cj5 * r21);
                                                                                        IkReal x1705 = (sj3 * sj5);
                                                                                        IkReal x1706 = (sj1 * x1696);
                                                                                        IkReal x1707 = (cj1 * x1696);
                                                                                        IkReal x1708 = (sj5 * x1699);
                                                                                        IkReal x1709 = ((0.54) * x1695);
                                                                                        IkReal x1710 = (sj1 * x1695);
                                                                                        IkReal x1711 = ((1.0) * cj1 * x1695);
                                                                                        evalcond[0] = (((r21 * x1697)) + x1706 + (((-1.0) * x1711)) + (((-1.0) * r20 * sj4 * x1698)) + (((-1.0) * r22 * x1703)));
                                                                                        evalcond[1] = ((((-1.0) * x1707)) + ((r11 * x1697)) + (((-1.0) * r10 * sj4 * x1698)) + (((-1.0) * x1710)) + (((-1.0) * r12 * x1703)));
                                                                                        evalcond[2] = ((((0.71) * cj1)) + ((cj1 * x1709)) + (((-0.15) * x1704)) + (((-1.0) * r20 * x1701)) + (((-1.0) * pz)) + (((-0.54) * x1706)));
                                                                                        evalcond[3] = ((((-0.15) * x1700)) + (((-1.0) * r10 * x1701)) + (((-1.0) * py)) + (((0.71) * sj1)) + ((sj1 * x1709)) + (((0.54) * x1707)));
                                                                                        evalcond[4] = (((r22 * x1702)) + x1707 + x1710 + ((r20 * x1705)) + ((r21 * x1708)) + ((sj3 * x1704)) + (((-1.0) * r20 * x1698 * x1699)));
                                                                                        evalcond[5] = (((r12 * x1702)) + x1706 + (((-1.0) * r10 * x1698 * x1699)) + (((-1.0) * x1711)) + ((r11 * x1708)) + ((r10 * x1705)) + ((sj3 * x1700)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 1;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 1;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 1;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            } while (0);
                                                            if (bgotonextstatement)
                                                            {
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                    {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1] = {false};
                                                                            _nj1 = 1;
                                                                            IkReal x1712 = ((0.76056338028169) * cj4);
                                                                            IkReal x1713 = ((0.211267605633803) * sj5);
                                                                            IkReal x1714 = ((0.211267605633803) * cj5);
                                                                            IkReal x1715 = ((0.76056338028169) * sj4 * sj5);
                                                                            IkReal x1716 = ((0.76056338028169) * cj5 * sj4);
                                                                            if (IKabs((((r11 * x1715)) + (((-1.40845070422535) * py)) + (((-1.0) * r10 * x1716)) + (((-1.0) * r10 * x1713)) + (((-1.0) * r11 * x1714)) + (((-1.0) * r12 * x1712)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22 * x1712)) + ((r20 * x1713)) + ((r20 * x1716)) + (((-1.0) * r21 * x1715)) + ((r21 * x1714)) + (((1.40845070422535) * pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11 * x1715)) + (((-1.40845070422535) * py)) + (((-1.0) * r10 * x1716)) + (((-1.0) * r10 * x1713)) + (((-1.0) * r11 * x1714)) + (((-1.0) * r12 * x1712)))) + IKsqr((((r22 * x1712)) + ((r20 * x1713)) + ((r20 * x1716)) + (((-1.0) * r21 * x1715)) + ((r21 * x1714)) + (((1.40845070422535) * pz)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                continue;
                                                                            j1array[0] = IKatan2((((r11 * x1715)) + (((-1.40845070422535) * py)) + (((-1.0) * r10 * x1716)) + (((-1.0) * r10 * x1713)) + (((-1.0) * r11 * x1714)) + (((-1.0) * r12 * x1712))), (((r22 * x1712)) + ((r20 * x1713)) + ((r20 * x1716)) + (((-1.0) * r21 * x1715)) + ((r21 * x1714)) + (((1.40845070422535) * pz))));
                                                                            sj1array[0] = IKsin(j1array[0]);
                                                                            cj1array[0] = IKcos(j1array[0]);
                                                                            if (j1array[0] > IKPI)
                                                                            {
                                                                                j1array[0] -= IK2PI;
                                                                            }
                                                                            else if (j1array[0] < -IKPI)
                                                                            {
                                                                                j1array[0] += IK2PI;
                                                                            }
                                                                            j1valid[0] = true;
                                                                            for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                                if (!j1valid[ij1])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij1[0] = ij1;
                                                                                _ij1[1] = -1;
                                                                                for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                {
                                                                                    if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j1valid[iij1] = false;
                                                                                        _ij1[1] = iij1;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j1 = j1array[ij1];
                                                                                cj1 = cj1array[ij1];
                                                                                sj1 = sj1array[ij1];
                                                                                {
                                                                                    IkReal evalcond[4];
                                                                                    IkReal x1717 = ((0.54) * sj4);
                                                                                    IkReal x1718 = (r11 * sj5);
                                                                                    IkReal x1719 = (cj5 * r10);
                                                                                    IkReal x1720 = (cj5 * r11);
                                                                                    IkReal x1721 = ((0.54) * cj4);
                                                                                    IkReal x1722 = ((0.15) * sj5);
                                                                                    IkReal x1723 = (r21 * sj5);
                                                                                    IkReal x1724 = ((0.54) * sj3);
                                                                                    IkReal x1725 = (cj5 * r21);
                                                                                    IkReal x1726 = (cj5 * r20);
                                                                                    IkReal x1727 = ((0.15) * x1725);
                                                                                    IkReal x1728 = (r20 * x1722);
                                                                                    IkReal x1729 = ((0.71) * (IKcos(j1)));
                                                                                    IkReal x1730 = ((0.71) * (IKsin(j1)));
                                                                                    IkReal x1731 = (r10 * x1722);
                                                                                    IkReal x1732 = ((0.15) * x1720);
                                                                                    IkReal x1733 = (x1728 + x1727 + pz);
                                                                                    IkReal x1734 = (x1731 + x1730 + x1732);
                                                                                    evalcond[0] = (x1733 + ((x1717 * x1726)) + ((r22 * x1721)) + (((-1.0) * x1717 * x1723)) + (((-1.0) * x1729)));
                                                                                    evalcond[1] = (x1734 + py + ((r12 * x1721)) + (((-1.0) * x1717 * x1718)) + ((x1717 * x1719)));
                                                                                    evalcond[2] = (x1733 + (((-1.0) * cj3 * x1719 * x1721)) + ((cj3 * x1718 * x1721)) + ((cj3 * r12 * x1717)) + ((x1720 * x1724)) + ((r10 * sj5 * x1724)) + (((-1.0) * x1729)));
                                                                                    evalcond[3] = (((x1724 * x1725)) + (((-1.0) * py)) + ((cj3 * x1721 * x1723)) + ((r20 * sj5 * x1724)) + ((cj3 * r22 * x1717)) + (((-1.0) * x1734)) + (((-1.0) * cj3 * x1721 * x1726)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    IkReal x1735 = (cj4 * r22);
                                                                                    IkReal x1736 = ((1.0) * cj1);
                                                                                    IkReal x1737 = (cj4 * r12);
                                                                                    IkReal x1738 = (sj1 * sj4);
                                                                                    IkReal x1739 = (cj5 * r10);
                                                                                    IkReal x1740 = (r11 * sj5);
                                                                                    IkReal x1741 = (cj1 * sj4);
                                                                                    IkReal x1742 = (r21 * sj5);
                                                                                    IkReal x1743 = (cj5 * r20);
                                                                                    if (IKabs((((sj1 * x1737)) + (((-1.0) * sj4 * x1736 * x1743)) + (((-1.0) * x1738 * x1740)) + ((x1738 * x1739)) + (((-1.0) * x1735 * x1736)) + ((x1741 * x1742)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1739 * x1741)) + ((sj1 * x1735)) + (((-1.0) * sj4 * x1736 * x1740)) + (((-1.0) * x1738 * x1742)) + ((cj1 * x1737)) + ((x1738 * x1743)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1 * x1737)) + (((-1.0) * sj4 * x1736 * x1743)) + (((-1.0) * x1738 * x1740)) + ((x1738 * x1739)) + (((-1.0) * x1735 * x1736)) + ((x1741 * x1742)))) + IKsqr((((x1739 * x1741)) + ((sj1 * x1735)) + (((-1.0) * sj4 * x1736 * x1740)) + (((-1.0) * x1738 * x1742)) + ((cj1 * x1737)) + ((x1738 * x1743)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j2array[0] = IKatan2((((sj1 * x1737)) + (((-1.0) * sj4 * x1736 * x1743)) + (((-1.0) * x1738 * x1740)) + ((x1738 * x1739)) + (((-1.0) * x1735 * x1736)) + ((x1741 * x1742))), (((x1739 * x1741)) + ((sj1 * x1735)) + (((-1.0) * sj4 * x1736 * x1740)) + (((-1.0) * x1738 * x1742)) + ((cj1 * x1737)) + ((x1738 * x1743))));
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI)
                                                                                    {
                                                                                        j2array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j2array[0] < -IKPI)
                                                                                    {
                                                                                        j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                    {
                                                                                        if (!j2valid[ij2])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                        {
                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j2valid[iij2] = false;
                                                                                                _ij2[1] = iij2;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                            IkReal evalcond[6];
                                                                                            IkReal x1744 = IKcos(j2);
                                                                                            IkReal x1745 = IKsin(j2);
                                                                                            IkReal x1746 = (sj4 * sj5);
                                                                                            IkReal x1747 = ((1.0) * cj5);
                                                                                            IkReal x1748 = (cj3 * cj4);
                                                                                            IkReal x1749 = (cj5 * r11);
                                                                                            IkReal x1750 = ((0.15) * sj5);
                                                                                            IkReal x1751 = (cj3 * sj4);
                                                                                            IkReal x1752 = ((1.0) * cj4);
                                                                                            IkReal x1753 = (cj5 * r21);
                                                                                            IkReal x1754 = (sj3 * sj5);
                                                                                            IkReal x1755 = (cj1 * x1744);
                                                                                            IkReal x1756 = (sj1 * x1745);
                                                                                            IkReal x1757 = (sj5 * x1748);
                                                                                            IkReal x1758 = (cj1 * x1745);
                                                                                            IkReal x1759 = (sj1 * x1744);
                                                                                            IkReal x1760 = (x1756 + x1755);
                                                                                            evalcond[0] = ((((-1.0) * r12 * x1752)) + x1760 + (((-1.0) * r10 * sj4 * x1747)) + ((r11 * x1746)));
                                                                                            evalcond[1] = ((((-1.0) * r20 * sj4 * x1747)) + x1759 + (((-1.0) * r22 * x1752)) + ((r21 * x1746)) + (((-1.0) * x1758)));
                                                                                            evalcond[2] = ((((0.71) * cj1)) + (((-0.54) * x1759)) + (((-0.15) * x1753)) + (((0.54) * x1758)) + (((-1.0) * pz)) + (((-1.0) * r20 * x1750)));
                                                                                            evalcond[3] = ((((-0.54) * x1756)) + (((-0.54) * x1755)) + (((-1.0) * r10 * x1750)) + (((-0.15) * x1749)) + (((-0.71) * sj1)) + (((-1.0) * py)));
                                                                                            evalcond[4] = (x1760 + ((r22 * x1751)) + ((r21 * x1757)) + ((r20 * x1754)) + (((-1.0) * r20 * x1747 * x1748)) + ((sj3 * x1753)));
                                                                                            evalcond[5] = ((((-1.0) * r10 * x1747 * x1748)) + x1758 + (((-1.0) * x1759)) + ((sj3 * x1749)) + ((r11 * x1757)) + ((r12 * x1751)) + ((r10 * x1754)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                bool j1valid[1] = {false};
                                                                                _nj1 = 1;
                                                                                IkReal x1761 = ((0.76056338028169) * cj4);
                                                                                IkReal x1762 = ((0.211267605633803) * sj5);
                                                                                IkReal x1763 = ((0.211267605633803) * cj5);
                                                                                IkReal x1764 = ((0.76056338028169) * cj5 * sj4);
                                                                                IkReal x1765 = ((0.76056338028169) * sj4 * sj5);
                                                                                if (IKabs(((((-1.0) * r01 * x1765)) + ((r01 * x1763)) + ((r00 * x1764)) + ((r00 * x1762)) + (((1.40845070422535) * px)) + ((r02 * x1761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21 * x1763)) + ((r20 * x1762)) + ((r20 * x1764)) + (((-1.0) * r21 * x1765)) + (((1.40845070422535) * pz)) + ((r22 * x1761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r01 * x1765)) + ((r01 * x1763)) + ((r00 * x1764)) + ((r00 * x1762)) + (((1.40845070422535) * px)) + ((r02 * x1761)))) + IKsqr((((r21 * x1763)) + ((r20 * x1762)) + ((r20 * x1764)) + (((-1.0) * r21 * x1765)) + (((1.40845070422535) * pz)) + ((r22 * x1761)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j1array[0] = IKatan2(((((-1.0) * r01 * x1765)) + ((r01 * x1763)) + ((r00 * x1764)) + ((r00 * x1762)) + (((1.40845070422535) * px)) + ((r02 * x1761))), (((r21 * x1763)) + ((r20 * x1762)) + ((r20 * x1764)) + (((-1.0) * r21 * x1765)) + (((1.40845070422535) * pz)) + ((r22 * x1761))));
                                                                                sj1array[0] = IKsin(j1array[0]);
                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                if (j1array[0] > IKPI)
                                                                                {
                                                                                    j1array[0] -= IK2PI;
                                                                                }
                                                                                else if (j1array[0] < -IKPI)
                                                                                {
                                                                                    j1array[0] += IK2PI;
                                                                                }
                                                                                j1valid[0] = true;
                                                                                for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                {
                                                                                    if (!j1valid[ij1])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij1[0] = ij1;
                                                                                    _ij1[1] = -1;
                                                                                    for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                    {
                                                                                        if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j1valid[iij1] = false;
                                                                                            _ij1[1] = iij1;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j1 = j1array[ij1];
                                                                                    cj1 = cj1array[ij1];
                                                                                    sj1 = sj1array[ij1];
                                                                                    {
                                                                                        IkReal evalcond[4];
                                                                                        IkReal x1766 = ((1.0) * px);
                                                                                        IkReal x1767 = (cj5 * r00);
                                                                                        IkReal x1768 = (r01 * sj5);
                                                                                        IkReal x1769 = ((0.54) * sj4);
                                                                                        IkReal x1770 = ((0.15) * sj5);
                                                                                        IkReal x1771 = (r21 * sj5);
                                                                                        IkReal x1772 = ((0.54) * cj4);
                                                                                        IkReal x1773 = ((0.15) * cj5);
                                                                                        IkReal x1774 = (cj5 * r20);
                                                                                        IkReal x1775 = ((0.54) * sj3);
                                                                                        IkReal x1776 = ((0.71) * (IKsin(j1)));
                                                                                        IkReal x1777 = (r00 * x1770);
                                                                                        IkReal x1778 = (r01 * x1773);
                                                                                        IkReal x1779 = ((0.71) * (IKcos(j1)));
                                                                                        IkReal x1780 = (r21 * x1773);
                                                                                        IkReal x1781 = (r20 * x1770);
                                                                                        IkReal x1782 = (cj3 * x1772);
                                                                                        IkReal x1783 = (x1780 + x1781);
                                                                                        IkReal x1784 = (x1766 + x1777 + x1778);
                                                                                        evalcond[0] = (((r22 * x1772)) + x1783 + (((-1.0) * x1779)) + pz + (((-1.0) * x1769 * x1771)) + ((x1769 * x1774)));
                                                                                        evalcond[1] = ((((-1.0) * x1784)) + x1776 + (((-1.0) * r02 * x1772)) + (((-1.0) * x1767 * x1769)) + ((x1768 * x1769)));
                                                                                        evalcond[2] = ((((-1.0) * r20 * sj5 * x1775)) + (((-1.0) * x1784)) + x1776 + ((x1774 * x1782)) + (((-1.0) * cj3 * r22 * x1769)) + (((-1.0) * cj5 * r21 * x1775)) + (((-1.0) * x1771 * x1782)));
                                                                                        evalcond[3] = ((((-1.0) * x1783)) + x1779 + ((x1768 * x1782)) + ((cj3 * r02 * x1769)) + (((-1.0) * pz)) + ((cj5 * r01 * x1775)) + ((r00 * sj5 * x1775)) + (((-1.0) * x1767 * x1782)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                        bool j2valid[1] = {false};
                                                                                        _nj2 = 1;
                                                                                        IkReal x1785 = (sj1 * sj4);
                                                                                        IkReal x1786 = (r01 * sj5);
                                                                                        IkReal x1787 = (cj4 * r22);
                                                                                        IkReal x1788 = ((1.0) * cj1);
                                                                                        IkReal x1789 = (cj5 * r00);
                                                                                        IkReal x1790 = (cj1 * sj4);
                                                                                        IkReal x1791 = (cj4 * r02);
                                                                                        IkReal x1792 = (r21 * sj5);
                                                                                        IkReal x1793 = (cj5 * r20);
                                                                                        if (IKabs(((((-1.0) * sj4 * x1788 * x1793)) + (((-1.0) * x1787 * x1788)) + ((x1785 * x1786)) + (((-1.0) * sj1 * x1791)) + (((-1.0) * x1785 * x1789)) + ((x1790 * x1792)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj4 * x1788 * x1789)) + ((sj1 * x1787)) + (((-1.0) * x1788 * x1791)) + (((-1.0) * x1785 * x1792)) + ((x1786 * x1790)) + ((x1785 * x1793)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * sj4 * x1788 * x1793)) + (((-1.0) * x1787 * x1788)) + ((x1785 * x1786)) + (((-1.0) * sj1 * x1791)) + (((-1.0) * x1785 * x1789)) + ((x1790 * x1792)))) + IKsqr(((((-1.0) * sj4 * x1788 * x1789)) + ((sj1 * x1787)) + (((-1.0) * x1788 * x1791)) + (((-1.0) * x1785 * x1792)) + ((x1786 * x1790)) + ((x1785 * x1793)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j2array[0] = IKatan2(((((-1.0) * sj4 * x1788 * x1793)) + (((-1.0) * x1787 * x1788)) + ((x1785 * x1786)) + (((-1.0) * sj1 * x1791)) + (((-1.0) * x1785 * x1789)) + ((x1790 * x1792))), ((((-1.0) * sj4 * x1788 * x1789)) + ((sj1 * x1787)) + (((-1.0) * x1788 * x1791)) + (((-1.0) * x1785 * x1792)) + ((x1786 * x1790)) + ((x1785 * x1793))));
                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                        if (j2array[0] > IKPI)
                                                                                        {
                                                                                            j2array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j2array[0] < -IKPI)
                                                                                        {
                                                                                            j2array[0] += IK2PI;
                                                                                        }
                                                                                        j2valid[0] = true;
                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                        {
                                                                                            if (!j2valid[ij2])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij2[0] = ij2;
                                                                                            _ij2[1] = -1;
                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                            {
                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j2valid[iij2] = false;
                                                                                                    _ij2[1] = iij2;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j2 = j2array[ij2];
                                                                                            cj2 = cj2array[ij2];
                                                                                            sj2 = sj2array[ij2];
                                                                                            {
                                                                                                IkReal evalcond[6];
                                                                                                IkReal x1794 = IKsin(j2);
                                                                                                IkReal x1795 = IKcos(j2);
                                                                                                IkReal x1796 = (cj3 * sj4);
                                                                                                IkReal x1797 = (cj3 * cj4);
                                                                                                IkReal x1798 = (r21 * sj5);
                                                                                                IkReal x1799 = ((1.0) * cj5);
                                                                                                IkReal x1800 = (cj5 * r01);
                                                                                                IkReal x1801 = ((0.15) * sj5);
                                                                                                IkReal x1802 = (r01 * sj5);
                                                                                                IkReal x1803 = (sj3 * sj5);
                                                                                                IkReal x1804 = ((1.0) * cj4);
                                                                                                IkReal x1805 = (cj5 * r21);
                                                                                                IkReal x1806 = (sj1 * x1795);
                                                                                                IkReal x1807 = (cj1 * x1795);
                                                                                                IkReal x1808 = ((0.54) * x1794);
                                                                                                IkReal x1809 = (sj1 * x1794);
                                                                                                IkReal x1810 = ((1.0) * cj1 * x1794);
                                                                                                evalcond[0] = ((((-1.0) * x1810)) + (((-1.0) * r20 * sj4 * x1799)) + x1806 + ((sj4 * x1798)) + (((-1.0) * r22 * x1804)));
                                                                                                evalcond[1] = (((sj4 * x1802)) + (((-1.0) * r02 * x1804)) + (((-1.0) * r00 * sj4 * x1799)) + (((-1.0) * x1809)) + (((-1.0) * x1807)));
                                                                                                evalcond[2] = ((((-1.0) * r20 * x1801)) + (((0.71) * cj1)) + (((-1.0) * pz)) + (((-0.54) * x1806)) + ((cj1 * x1808)) + (((-0.15) * x1805)));
                                                                                                evalcond[3] = ((((-1.0) * r00 * x1801)) + ((sj1 * x1808)) + (((-1.0) * px)) + (((0.71) * sj1)) + (((-0.15) * x1800)) + (((0.54) * x1807)));
                                                                                                evalcond[4] = ((((-1.0) * r20 * x1797 * x1799)) + ((sj3 * x1805)) + ((x1797 * x1798)) + ((r22 * x1796)) + x1807 + x1809 + ((r20 * x1803)));
                                                                                                evalcond[5] = ((((-1.0) * x1810)) + (((-1.0) * r00 * x1797 * x1799)) + ((x1797 * x1802)) + ((sj3 * x1800)) + ((r02 * x1796)) + x1806 + ((r00 * x1803)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                    bool j1valid[1] = {false};
                                                                                    _nj1 = 1;
                                                                                    IkReal x1811 = ((0.76056338028169) * cj4);
                                                                                    IkReal x1812 = ((0.211267605633803) * sj5);
                                                                                    IkReal x1813 = ((0.211267605633803) * cj5);
                                                                                    IkReal x1814 = ((0.76056338028169) * cj5 * sj4);
                                                                                    IkReal x1815 = ((0.76056338028169) * sj4 * sj5);
                                                                                    if (IKabs(((((-1.0) * r02 * x1811)) + (((-1.0) * r01 * x1813)) + (((-1.0) * r00 * x1814)) + (((-1.0) * r00 * x1812)) + (((-1.40845070422535) * px)) + ((r01 * x1815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22 * x1811)) + ((r20 * x1812)) + ((r20 * x1814)) + (((1.40845070422535) * pz)) + ((r21 * x1813)) + (((-1.0) * r21 * x1815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r02 * x1811)) + (((-1.0) * r01 * x1813)) + (((-1.0) * r00 * x1814)) + (((-1.0) * r00 * x1812)) + (((-1.40845070422535) * px)) + ((r01 * x1815)))) + IKsqr((((r22 * x1811)) + ((r20 * x1812)) + ((r20 * x1814)) + (((1.40845070422535) * pz)) + ((r21 * x1813)) + (((-1.0) * r21 * x1815)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j1array[0] = IKatan2(((((-1.0) * r02 * x1811)) + (((-1.0) * r01 * x1813)) + (((-1.0) * r00 * x1814)) + (((-1.0) * r00 * x1812)) + (((-1.40845070422535) * px)) + ((r01 * x1815))), (((r22 * x1811)) + ((r20 * x1812)) + ((r20 * x1814)) + (((1.40845070422535) * pz)) + ((r21 * x1813)) + (((-1.0) * r21 * x1815))));
                                                                                    sj1array[0] = IKsin(j1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    if (j1array[0] > IKPI)
                                                                                    {
                                                                                        j1array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j1array[0] < -IKPI)
                                                                                    {
                                                                                        j1array[0] += IK2PI;
                                                                                    }
                                                                                    j1valid[0] = true;
                                                                                    for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                                    {
                                                                                        if (!j1valid[ij1])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij1[0] = ij1;
                                                                                        _ij1[1] = -1;
                                                                                        for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                        {
                                                                                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j1valid[iij1] = false;
                                                                                                _ij1[1] = iij1;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j1 = j1array[ij1];
                                                                                        cj1 = cj1array[ij1];
                                                                                        sj1 = sj1array[ij1];
                                                                                        {
                                                                                            IkReal evalcond[4];
                                                                                            IkReal x1816 = (cj5 * r00);
                                                                                            IkReal x1817 = (r01 * sj5);
                                                                                            IkReal x1818 = ((0.54) * sj4);
                                                                                            IkReal x1819 = ((0.15) * sj5);
                                                                                            IkReal x1820 = (r21 * sj5);
                                                                                            IkReal x1821 = ((0.54) * cj4);
                                                                                            IkReal x1822 = ((0.15) * cj5);
                                                                                            IkReal x1823 = (cj5 * r20);
                                                                                            IkReal x1824 = ((0.54) * sj3);
                                                                                            IkReal x1825 = (r21 * x1822);
                                                                                            IkReal x1826 = (r20 * x1819);
                                                                                            IkReal x1827 = ((0.71) * (IKcos(j1)));
                                                                                            IkReal x1828 = (r00 * x1819);
                                                                                            IkReal x1829 = ((0.71) * (IKsin(j1)));
                                                                                            IkReal x1830 = (r01 * x1822);
                                                                                            IkReal x1831 = (cj3 * x1821);
                                                                                            IkReal x1832 = (pz + x1825 + x1826);
                                                                                            IkReal x1833 = (x1829 + x1828 + x1830);
                                                                                            evalcond[0] = ((((-1.0) * x1827)) + ((x1818 * x1823)) + (((-1.0) * x1818 * x1820)) + ((r22 * x1821)) + x1832);
                                                                                            evalcond[1] = (((x1816 * x1818)) + px + x1833 + ((r02 * x1821)) + (((-1.0) * x1817 * x1818)));
                                                                                            evalcond[2] = ((((-1.0) * x1827)) + ((cj5 * r01 * x1824)) + x1832 + ((r00 * sj5 * x1824)) + (((-1.0) * x1816 * x1831)) + ((cj3 * r02 * x1818)) + ((x1817 * x1831)));
                                                                                            evalcond[3] = (((cj3 * r22 * x1818)) + (((-1.0) * x1833)) + ((x1820 * x1831)) + (((-1.0) * px)) + ((r20 * sj5 * x1824)) + (((-1.0) * x1823 * x1831)) + ((cj5 * r21 * x1824)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            IkReal x1834 = (cj4 * r22);
                                                                                            IkReal x1835 = ((1.0) * cj1);
                                                                                            IkReal x1836 = (cj4 * r02);
                                                                                            IkReal x1837 = (sj4 * sj5);
                                                                                            IkReal x1838 = ((1.0) * sj1);
                                                                                            IkReal x1839 = (cj5 * sj4);
                                                                                            IkReal x1840 = (sj1 * x1839);
                                                                                            if (IKabs(((((-1.0) * x1834 * x1835)) + ((sj1 * x1836)) + (((-1.0) * r01 * x1837 * x1838)) + ((cj1 * r21 * x1837)) + ((r00 * x1840)) + (((-1.0) * r20 * x1835 * x1839)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1 * x1834)) + (((-1.0) * r21 * x1837 * x1838)) + ((cj1 * r00 * x1839)) + ((r20 * x1840)) + (((-1.0) * r01 * x1835 * x1837)) + ((cj1 * x1836)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x1834 * x1835)) + ((sj1 * x1836)) + (((-1.0) * r01 * x1837 * x1838)) + ((cj1 * r21 * x1837)) + ((r00 * x1840)) + (((-1.0) * r20 * x1835 * x1839)))) + IKsqr((((sj1 * x1834)) + (((-1.0) * r21 * x1837 * x1838)) + ((cj1 * r00 * x1839)) + ((r20 * x1840)) + (((-1.0) * r01 * x1835 * x1837)) + ((cj1 * x1836)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j2array[0] = IKatan2(((((-1.0) * x1834 * x1835)) + ((sj1 * x1836)) + (((-1.0) * r01 * x1837 * x1838)) + ((cj1 * r21 * x1837)) + ((r00 * x1840)) + (((-1.0) * r20 * x1835 * x1839))), (((sj1 * x1834)) + (((-1.0) * r21 * x1837 * x1838)) + ((cj1 * r00 * x1839)) + ((r20 * x1840)) + (((-1.0) * r01 * x1835 * x1837)) + ((cj1 * x1836))));
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[6];
                                                                                                    IkReal x1841 = IKcos(j2);
                                                                                                    IkReal x1842 = IKsin(j2);
                                                                                                    IkReal x1843 = (cj3 * sj4);
                                                                                                    IkReal x1844 = (cj3 * cj4);
                                                                                                    IkReal x1845 = (r21 * sj5);
                                                                                                    IkReal x1846 = ((1.0) * cj5);
                                                                                                    IkReal x1847 = (cj5 * r01);
                                                                                                    IkReal x1848 = ((0.15) * sj5);
                                                                                                    IkReal x1849 = (r01 * sj5);
                                                                                                    IkReal x1850 = (sj3 * sj5);
                                                                                                    IkReal x1851 = ((1.0) * cj4);
                                                                                                    IkReal x1852 = (cj5 * r21);
                                                                                                    IkReal x1853 = (cj1 * x1841);
                                                                                                    IkReal x1854 = (sj1 * x1842);
                                                                                                    IkReal x1855 = (cj1 * x1842);
                                                                                                    IkReal x1856 = (sj1 * x1841);
                                                                                                    IkReal x1857 = (x1853 + x1854);
                                                                                                    evalcond[0] = ((((-1.0) * r00 * sj4 * x1846)) + (((-1.0) * r02 * x1851)) + x1857 + ((sj4 * x1849)));
                                                                                                    evalcond[1] = ((((-1.0) * x1855)) + (((-1.0) * r22 * x1851)) + x1856 + ((sj4 * x1845)) + (((-1.0) * r20 * sj4 * x1846)));
                                                                                                    evalcond[2] = ((((0.71) * cj1)) + (((-0.54) * x1856)) + (((-0.15) * x1852)) + (((-1.0) * pz)) + (((0.54) * x1855)) + (((-1.0) * r20 * x1848)));
                                                                                                    evalcond[3] = ((((-0.15) * x1847)) + (((-1.0) * r00 * x1848)) + (((-0.54) * x1853)) + (((-0.54) * x1854)) + (((-0.71) * sj1)) + (((-1.0) * px)));
                                                                                                    evalcond[4] = (((r22 * x1843)) + ((x1844 * x1845)) + x1857 + ((sj3 * x1852)) + (((-1.0) * r20 * x1844 * x1846)) + ((r20 * x1850)));
                                                                                                    evalcond[5] = (((sj3 * x1847)) + ((r02 * x1843)) + ((x1844 * x1849)) + (((-1.0) * x1856)) + ((r00 * x1850)) + (((-1.0) * r00 * x1844 * x1846)) + x1855);
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                if (1)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    continue; // branch miss [j1, j2]
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                            bool j1valid[1] = {false};
                                                            _nj1 = 1;
                                                            IkReal x1858 = (cj0 * r01);
                                                            IkReal x1859 = (sj4 * sj5);
                                                            IkReal x1860 = ((0.54) * cj0);
                                                            IkReal x1861 = (cj5 * sj4);
                                                            CheckValue<IkReal> x1862 = IKPowWithIntegerCheck(cj0, -2);
                                                            if (!x1862.valid)
                                                            {
                                                                continue;
                                                            }
                                                            if (IKabs(((-1.40845070422535) * (x1862.value) * (((((-1.0) * r00 * x1860 * x1861)) + (((0.54) * x1858 * x1859)) + (((-0.15) * cj0 * r00 * sj5)) + (((-1.0) * cj4 * r02 * x1860)) + (((-0.15) * cj5 * x1858)) + (((-1.0) * cj0 * px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.211267605633803) * r20 * sj5)) + (((-0.76056338028169) * r21 * x1859)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)) + (((0.76056338028169) * r20 * x1861)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535) * (x1862.value) * (((((-1.0) * r00 * x1860 * x1861)) + (((0.54) * x1858 * x1859)) + (((-0.15) * cj0 * r00 * sj5)) + (((-1.0) * cj4 * r02 * x1860)) + (((-0.15) * cj5 * x1858)) + (((-1.0) * cj0 * px)))))) + IKsqr(((((0.211267605633803) * r20 * sj5)) + (((-0.76056338028169) * r21 * x1859)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)) + (((0.76056338028169) * r20 * x1861)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                continue;
                                                            j1array[0] = IKatan2(((-1.40845070422535) * (x1862.value) * (((((-1.0) * r00 * x1860 * x1861)) + (((0.54) * x1858 * x1859)) + (((-0.15) * cj0 * r00 * sj5)) + (((-1.0) * cj4 * r02 * x1860)) + (((-0.15) * cj5 * x1858)) + (((-1.0) * cj0 * px))))), ((((0.211267605633803) * r20 * sj5)) + (((-0.76056338028169) * r21 * x1859)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)) + (((0.76056338028169) * r20 * x1861))));
                                                            sj1array[0] = IKsin(j1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            if (j1array[0] > IKPI)
                                                            {
                                                                j1array[0] -= IK2PI;
                                                            }
                                                            else if (j1array[0] < -IKPI)
                                                            {
                                                                j1array[0] += IK2PI;
                                                            }
                                                            j1valid[0] = true;
                                                            for (int ij1 = 0; ij1 < 1; ++ij1)
                                                            {
                                                                if (!j1valid[ij1])
                                                                {
                                                                    continue;
                                                                }
                                                                _ij1[0] = ij1;
                                                                _ij1[1] = -1;
                                                                for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                {
                                                                    if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                        j1valid[iij1] = false;
                                                                        _ij1[1] = iij1;
                                                                        break;
                                                                    }
                                                                }
                                                                j1 = j1array[ij1];
                                                                cj1 = cj1array[ij1];
                                                                sj1 = sj1array[ij1];
                                                                {
                                                                    IkReal evalcond[9];
                                                                    IkReal x1863 = IKsin(j1);
                                                                    IkReal x1864 = IKcos(j1);
                                                                    IkReal x1865 = ((0.54) * cj4);
                                                                    IkReal x1866 = (cj5 * r00);
                                                                    IkReal x1867 = ((1.0) * py);
                                                                    IkReal x1868 = ((0.15) * sj0);
                                                                    IkReal x1869 = (r10 * sj5);
                                                                    IkReal x1870 = ((1.0) * px);
                                                                    IkReal x1871 = (cj0 * cj5);
                                                                    IkReal x1872 = ((0.15) * r01);
                                                                    IkReal x1873 = (cj5 * r21);
                                                                    IkReal x1874 = ((0.54) * sj4);
                                                                    IkReal x1875 = (cj3 * sj5);
                                                                    IkReal x1876 = ((0.15) * r11);
                                                                    IkReal x1877 = (r00 * sj5);
                                                                    IkReal x1878 = (r01 * sj5);
                                                                    IkReal x1879 = ((0.54) * sj3);
                                                                    IkReal x1880 = (r20 * sj5);
                                                                    IkReal x1881 = (r11 * sj5);
                                                                    IkReal x1882 = (cj5 * r11);
                                                                    IkReal x1883 = (cj5 * r10);
                                                                    IkReal x1884 = (cj3 * r22);
                                                                    IkReal x1885 = ((0.15) * cj0);
                                                                    IkReal x1886 = (cj5 * r20);
                                                                    IkReal x1887 = ((1.0) * pz);
                                                                    IkReal x1888 = (cj5 * r01);
                                                                    IkReal x1889 = ((0.71) * x1863);
                                                                    IkReal x1890 = ((0.71) * x1864);
                                                                    IkReal x1891 = (cj0 * sj0 * x1889);
                                                                    evalcond[0] = ((((0.15) * x1880)) + (((0.15) * x1873)) + ((x1874 * x1886)) + ((r22 * x1865)) + (((-1.0) * r21 * sj5 * x1874)) + pz + (((-1.0) * x1890)));
                                                                    evalcond[1] = (((x1889 * (sj0 * sj0))) + (((-1.0) * x1868 * x1882)) + (((-1.0) * r12 * sj0 * x1865)) + ((sj0 * x1874 * x1881)) + (((-1.0) * sj0 * x1874 * x1883)) + (((-1.0) * x1868 * x1869)) + (((-1.0) * sj0 * x1867)));
                                                                    evalcond[2] = (((cj0 * x1874 * x1878)) + (((-1.0) * cj0 * r02 * x1865)) + (((-1.0) * cj0 * x1866 * x1874)) + ((x1889 * (cj0 * cj0))) + (((-1.0) * x1871 * x1872)) + (((-1.0) * cj0 * x1870)) + (((-1.0) * x1877 * x1885)));
                                                                    evalcond[3] = (((cj3 * r12 * x1874)) + ((x1879 * x1882)) + (((-1.0) * cj3 * x1865 * x1883)) + (((-1.0) * x1868 * x1873)) + (((-1.0) * x1868 * x1880)) + ((sj0 * x1890)) + ((x1869 * x1879)) + (((-1.0) * sj0 * x1887)) + ((r11 * x1865 * x1875)));
                                                                    evalcond[4] = ((((-1.0) * cj0 * x1887)) + ((x1879 * x1888)) + (((-1.0) * x1880 * x1885)) + ((x1877 * x1879)) + (((-1.0) * cj3 * x1865 * x1866)) + ((cj3 * r02 * x1874)) + ((cj0 * x1890)) + ((r01 * x1865 * x1875)) + (((-0.15) * r21 * x1871)));
                                                                    evalcond[5] = ((((-1.0) * cj5 * x1876)) + (((-0.15) * x1869)) + (((-1.0) * sj0 * x1873 * x1879)) + (((-1.0) * r21 * sj0 * x1865 * x1875)) + (((-1.0) * sj0 * x1874 * x1884)) + (((-1.0) * x1867)) + ((sj0 * x1889)) + ((cj3 * sj0 * x1865 * x1886)) + (((-1.0) * sj0 * x1879 * x1880)));
                                                                    evalcond[6] = ((((-1.0) * cj5 * x1872)) + (((-0.15) * x1877)) + (((-1.0) * x1870)) + (((-1.0) * cj0 * x1874 * x1884)) + (((-1.0) * cj0 * x1879 * x1880)) + (((-1.0) * cj0 * r21 * x1865 * x1875)) + ((cj3 * r20 * x1865 * x1871)) + ((cj0 * x1889)) + (((-1.0) * r21 * x1871 * x1879)));
                                                                    evalcond[7] = ((((-1.0) * r10 * x1871 * x1874)) + (((-1.0) * x1868 * x1877)) + (((-1.0) * x1868 * x1888)) + (((-1.0) * cj0 * r12 * x1865)) + (((-1.0) * sj0 * x1870)) + x1891 + ((cj0 * x1874 * x1881)));
                                                                    evalcond[8] = ((((-1.0) * cj0 * x1867)) + (((-1.0) * x1869 * x1885)) + x1891 + (((-1.0) * sj0 * x1866 * x1874)) + (((-1.0) * x1871 * x1876)) + (((-1.0) * r02 * sj0 * x1865)) + ((sj0 * x1874 * x1878)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j2eval[2];
                                                                    j2eval[0] = cj0;
                                                                    j2eval[1] = IKsign(cj0);
                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                    {
                                                                        {
                                                                            IkReal j2eval[2];
                                                                            j2eval[0] = sj0;
                                                                            j2eval[1] = IKsign(sj0);
                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                            {
                                                                                {
                                                                                    IkReal evalcond[1];
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                IkReal x1892 = (sj1 * sj4);
                                                                                                IkReal x1893 = (r01 * sj5);
                                                                                                IkReal x1894 = (cj4 * r22);
                                                                                                IkReal x1895 = ((1.0) * cj1);
                                                                                                IkReal x1896 = (cj5 * r00);
                                                                                                IkReal x1897 = (cj1 * sj4);
                                                                                                IkReal x1898 = (cj4 * r02);
                                                                                                IkReal x1899 = (r21 * sj5);
                                                                                                IkReal x1900 = (cj5 * r20);
                                                                                                if (IKabs((((x1892 * x1893)) + ((x1897 * x1899)) + (((-1.0) * sj1 * x1898)) + (((-1.0) * sj4 * x1895 * x1900)) + (((-1.0) * x1894 * x1895)) + (((-1.0) * x1892 * x1896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1892 * x1900)) + ((x1893 * x1897)) + (((-1.0) * sj4 * x1895 * x1896)) + (((-1.0) * x1895 * x1898)) + (((-1.0) * x1892 * x1899)) + ((sj1 * x1894)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1892 * x1893)) + ((x1897 * x1899)) + (((-1.0) * sj1 * x1898)) + (((-1.0) * sj4 * x1895 * x1900)) + (((-1.0) * x1894 * x1895)) + (((-1.0) * x1892 * x1896)))) + IKsqr((((x1892 * x1900)) + ((x1893 * x1897)) + (((-1.0) * sj4 * x1895 * x1896)) + (((-1.0) * x1895 * x1898)) + (((-1.0) * x1892 * x1899)) + ((sj1 * x1894)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j2array[0] = IKatan2((((x1892 * x1893)) + ((x1897 * x1899)) + (((-1.0) * sj1 * x1898)) + (((-1.0) * sj4 * x1895 * x1900)) + (((-1.0) * x1894 * x1895)) + (((-1.0) * x1892 * x1896))), (((x1892 * x1900)) + ((x1893 * x1897)) + (((-1.0) * sj4 * x1895 * x1896)) + (((-1.0) * x1895 * x1898)) + (((-1.0) * x1892 * x1899)) + ((sj1 * x1894))));
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[6];
                                                                                                        IkReal x1901 = IKsin(j2);
                                                                                                        IkReal x1902 = IKcos(j2);
                                                                                                        IkReal x1903 = (cj3 * sj4);
                                                                                                        IkReal x1904 = (cj3 * cj4);
                                                                                                        IkReal x1905 = (r21 * sj5);
                                                                                                        IkReal x1906 = ((1.0) * cj5);
                                                                                                        IkReal x1907 = (cj5 * r01);
                                                                                                        IkReal x1908 = ((0.15) * sj5);
                                                                                                        IkReal x1909 = (r01 * sj5);
                                                                                                        IkReal x1910 = (sj3 * sj5);
                                                                                                        IkReal x1911 = ((1.0) * cj4);
                                                                                                        IkReal x1912 = (cj5 * r21);
                                                                                                        IkReal x1913 = (sj1 * x1902);
                                                                                                        IkReal x1914 = (cj1 * x1902);
                                                                                                        IkReal x1915 = ((0.54) * x1901);
                                                                                                        IkReal x1916 = (sj1 * x1901);
                                                                                                        IkReal x1917 = ((1.0) * cj1 * x1901);
                                                                                                        evalcond[0] = ((((-1.0) * r22 * x1911)) + ((sj4 * x1905)) + (((-1.0) * r20 * sj4 * x1906)) + x1913 + (((-1.0) * x1917)));
                                                                                                        evalcond[1] = ((((-1.0) * r02 * x1911)) + ((sj4 * x1909)) + (((-1.0) * x1914)) + (((-1.0) * x1916)) + (((-1.0) * r00 * sj4 * x1906)));
                                                                                                        evalcond[2] = ((((0.71) * cj1)) + ((cj1 * x1915)) + (((-0.15) * x1912)) + (((-1.0) * pz)) + (((-1.0) * r20 * x1908)) + (((-0.54) * x1913)));
                                                                                                        evalcond[3] = ((((-0.15) * x1907)) + (((-1.0) * px)) + ((sj1 * x1915)) + (((0.71) * sj1)) + (((0.54) * x1914)) + (((-1.0) * r00 * x1908)));
                                                                                                        evalcond[4] = (((x1904 * x1905)) + (((-1.0) * r20 * x1904 * x1906)) + x1914 + x1916 + ((r22 * x1903)) + ((r20 * x1910)) + ((sj3 * x1912)));
                                                                                                        evalcond[5] = (((x1904 * x1909)) + ((r00 * x1910)) + (((-1.0) * r00 * x1904 * x1906)) + x1913 + (((-1.0) * x1917)) + ((r02 * x1903)) + ((sj3 * x1907)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    IkReal x1918 = (cj4 * r22);
                                                                                                    IkReal x1919 = ((1.0) * cj1);
                                                                                                    IkReal x1920 = (cj4 * r02);
                                                                                                    IkReal x1921 = (sj4 * sj5);
                                                                                                    IkReal x1922 = ((1.0) * sj1);
                                                                                                    IkReal x1923 = (cj5 * sj4);
                                                                                                    IkReal x1924 = (sj1 * x1923);
                                                                                                    if (IKabs((((r00 * x1924)) + (((-1.0) * r01 * x1921 * x1922)) + ((cj1 * r21 * x1921)) + (((-1.0) * x1918 * x1919)) + (((-1.0) * r20 * x1919 * x1923)) + ((sj1 * x1920)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1 * x1920)) + (((-1.0) * r21 * x1921 * x1922)) + (((-1.0) * r01 * x1919 * x1921)) + ((r20 * x1924)) + ((sj1 * x1918)) + ((cj1 * r00 * x1923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00 * x1924)) + (((-1.0) * r01 * x1921 * x1922)) + ((cj1 * r21 * x1921)) + (((-1.0) * x1918 * x1919)) + (((-1.0) * r20 * x1919 * x1923)) + ((sj1 * x1920)))) + IKsqr((((cj1 * x1920)) + (((-1.0) * r21 * x1921 * x1922)) + (((-1.0) * r01 * x1919 * x1921)) + ((r20 * x1924)) + ((sj1 * x1918)) + ((cj1 * r00 * x1923)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2((((r00 * x1924)) + (((-1.0) * r01 * x1921 * x1922)) + ((cj1 * r21 * x1921)) + (((-1.0) * x1918 * x1919)) + (((-1.0) * r20 * x1919 * x1923)) + ((sj1 * x1920))), (((cj1 * x1920)) + (((-1.0) * r21 * x1921 * x1922)) + (((-1.0) * r01 * x1919 * x1921)) + ((r20 * x1924)) + ((sj1 * x1918)) + ((cj1 * r00 * x1923))));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[6];
                                                                                                            IkReal x1925 = IKcos(j2);
                                                                                                            IkReal x1926 = IKsin(j2);
                                                                                                            IkReal x1927 = (cj3 * sj4);
                                                                                                            IkReal x1928 = (cj3 * cj4);
                                                                                                            IkReal x1929 = (r21 * sj5);
                                                                                                            IkReal x1930 = ((1.0) * cj5);
                                                                                                            IkReal x1931 = (cj5 * r01);
                                                                                                            IkReal x1932 = ((0.15) * sj5);
                                                                                                            IkReal x1933 = (r01 * sj5);
                                                                                                            IkReal x1934 = (sj3 * sj5);
                                                                                                            IkReal x1935 = ((1.0) * cj4);
                                                                                                            IkReal x1936 = (cj5 * r21);
                                                                                                            IkReal x1937 = (cj1 * x1925);
                                                                                                            IkReal x1938 = (sj1 * x1926);
                                                                                                            IkReal x1939 = (cj1 * x1926);
                                                                                                            IkReal x1940 = (sj1 * x1925);
                                                                                                            IkReal x1941 = (x1937 + x1938);
                                                                                                            evalcond[0] = (((sj4 * x1933)) + x1941 + (((-1.0) * r00 * sj4 * x1930)) + (((-1.0) * r02 * x1935)));
                                                                                                            evalcond[1] = (((sj4 * x1929)) + (((-1.0) * x1939)) + (((-1.0) * r22 * x1935)) + x1940 + (((-1.0) * r20 * sj4 * x1930)));
                                                                                                            evalcond[2] = ((((0.71) * cj1)) + (((-0.15) * x1936)) + (((-1.0) * r20 * x1932)) + (((-1.0) * pz)) + (((-0.54) * x1940)) + (((0.54) * x1939)));
                                                                                                            evalcond[3] = ((((-0.15) * x1931)) + (((-0.71) * sj1)) + (((-1.0) * px)) + (((-0.54) * x1938)) + (((-0.54) * x1937)) + (((-1.0) * r00 * x1932)));
                                                                                                            evalcond[4] = (((x1928 * x1929)) + (((-1.0) * r20 * x1928 * x1930)) + ((r22 * x1927)) + x1941 + ((r20 * x1934)) + ((sj3 * x1936)));
                                                                                                            evalcond[5] = ((((-1.0) * r00 * x1928 * x1930)) + ((r00 * x1934)) + ((r02 * x1927)) + x1939 + (((-1.0) * x1940)) + ((x1928 * x1933)) + ((sj3 * x1931)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    {
                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                        bool j2valid[1] = {false};
                                                                                                        _nj2 = 1;
                                                                                                        IkReal x1942 = (cj4 * r22);
                                                                                                        IkReal x1943 = ((1.0) * cj1);
                                                                                                        IkReal x1944 = (cj5 * sj4);
                                                                                                        IkReal x1945 = (cj4 * r12);
                                                                                                        IkReal x1946 = ((1.0) * sj1);
                                                                                                        IkReal x1947 = (r11 * sj4 * sj5);
                                                                                                        IkReal x1948 = (r21 * sj4 * sj5);
                                                                                                        if (IKabs(((((-1.0) * r20 * x1943 * x1944)) + (((-1.0) * r10 * x1944 * x1946)) + (((-1.0) * x1945 * x1946)) + (((-1.0) * x1942 * x1943)) + ((cj1 * x1948)) + ((sj1 * x1947)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * x1943 * x1945)) + ((cj1 * x1947)) + ((sj1 * x1942)) + (((-1.0) * x1946 * x1948)) + (((-1.0) * r10 * x1943 * x1944)) + ((r20 * sj1 * x1944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r20 * x1943 * x1944)) + (((-1.0) * r10 * x1944 * x1946)) + (((-1.0) * x1945 * x1946)) + (((-1.0) * x1942 * x1943)) + ((cj1 * x1948)) + ((sj1 * x1947)))) + IKsqr(((((-1.0) * x1943 * x1945)) + ((cj1 * x1947)) + ((sj1 * x1942)) + (((-1.0) * x1946 * x1948)) + (((-1.0) * r10 * x1943 * x1944)) + ((r20 * sj1 * x1944)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                            continue;
                                                                                                        j2array[0] = IKatan2(((((-1.0) * r20 * x1943 * x1944)) + (((-1.0) * r10 * x1944 * x1946)) + (((-1.0) * x1945 * x1946)) + (((-1.0) * x1942 * x1943)) + ((cj1 * x1948)) + ((sj1 * x1947))), ((((-1.0) * x1943 * x1945)) + ((cj1 * x1947)) + ((sj1 * x1942)) + (((-1.0) * x1946 * x1948)) + (((-1.0) * r10 * x1943 * x1944)) + ((r20 * sj1 * x1944))));
                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                        if (j2array[0] > IKPI)
                                                                                                        {
                                                                                                            j2array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                        {
                                                                                                            j2array[0] += IK2PI;
                                                                                                        }
                                                                                                        j2valid[0] = true;
                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                        {
                                                                                                            if (!j2valid[ij2])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij2[0] = ij2;
                                                                                                            _ij2[1] = -1;
                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                            {
                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j2valid[iij2] = false;
                                                                                                                    _ij2[1] = iij2;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j2 = j2array[ij2];
                                                                                                            cj2 = cj2array[ij2];
                                                                                                            sj2 = sj2array[ij2];
                                                                                                            {
                                                                                                                IkReal evalcond[6];
                                                                                                                IkReal x1949 = IKsin(j2);
                                                                                                                IkReal x1950 = IKcos(j2);
                                                                                                                IkReal x1951 = (sj4 * sj5);
                                                                                                                IkReal x1952 = ((1.0) * cj5);
                                                                                                                IkReal x1953 = (cj3 * cj4);
                                                                                                                IkReal x1954 = (cj5 * r11);
                                                                                                                IkReal x1955 = ((0.15) * sj5);
                                                                                                                IkReal x1956 = (cj3 * sj4);
                                                                                                                IkReal x1957 = ((1.0) * cj4);
                                                                                                                IkReal x1958 = (cj5 * r21);
                                                                                                                IkReal x1959 = (sj3 * sj5);
                                                                                                                IkReal x1960 = (sj1 * x1950);
                                                                                                                IkReal x1961 = (cj1 * x1950);
                                                                                                                IkReal x1962 = (sj5 * x1953);
                                                                                                                IkReal x1963 = ((0.54) * x1949);
                                                                                                                IkReal x1964 = (sj1 * x1949);
                                                                                                                IkReal x1965 = ((1.0) * cj1 * x1949);
                                                                                                                evalcond[0] = ((((-1.0) * r20 * sj4 * x1952)) + (((-1.0) * r22 * x1957)) + (((-1.0) * x1965)) + ((r21 * x1951)) + x1960);
                                                                                                                evalcond[1] = (((r11 * x1951)) + (((-1.0) * x1961)) + (((-1.0) * x1964)) + (((-1.0) * r12 * x1957)) + (((-1.0) * r10 * sj4 * x1952)));
                                                                                                                evalcond[2] = ((((0.71) * cj1)) + ((cj1 * x1963)) + (((-1.0) * pz)) + (((-0.54) * x1960)) + (((-0.15) * x1958)) + (((-1.0) * r20 * x1955)));
                                                                                                                evalcond[3] = (((sj1 * x1963)) + (((-1.0) * py)) + (((-1.0) * r10 * x1955)) + (((0.71) * sj1)) + (((0.54) * x1961)) + (((-0.15) * x1954)));
                                                                                                                evalcond[4] = (((r20 * x1959)) + ((sj3 * x1958)) + ((r21 * x1962)) + ((r22 * x1956)) + x1964 + x1961 + (((-1.0) * r20 * x1952 * x1953)));
                                                                                                                evalcond[5] = (((sj3 * x1954)) + ((r12 * x1956)) + ((r11 * x1962)) + (((-1.0) * x1965)) + ((r10 * x1959)) + (((-1.0) * r10 * x1952 * x1953)) + x1960);
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j3;
                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j4;
                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j5;
                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                std::vector<int> vfree(0);
                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                                bool bgotonextstatement = true;
                                                                                                do
                                                                                                {
                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                    {
                                                                                                        bgotonextstatement = false;
                                                                                                        {
                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                            bool j2valid[1] = {false};
                                                                                                            _nj2 = 1;
                                                                                                            IkReal x1966 = (cj4 * r22);
                                                                                                            IkReal x1967 = ((1.0) * cj1);
                                                                                                            IkReal x1968 = (cj4 * r12);
                                                                                                            IkReal x1969 = (sj1 * sj4);
                                                                                                            IkReal x1970 = (cj5 * r10);
                                                                                                            IkReal x1971 = (r11 * sj5);
                                                                                                            IkReal x1972 = (cj1 * sj4);
                                                                                                            IkReal x1973 = (r21 * sj5);
                                                                                                            IkReal x1974 = (cj5 * r20);
                                                                                                            if (IKabs((((x1969 * x1970)) + ((x1972 * x1973)) + (((-1.0) * sj4 * x1967 * x1974)) + ((sj1 * x1968)) + (((-1.0) * x1966 * x1967)) + (((-1.0) * x1969 * x1971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1969 * x1974)) + (((-1.0) * sj4 * x1967 * x1971)) + ((cj1 * x1968)) + ((sj1 * x1966)) + ((x1970 * x1972)) + (((-1.0) * x1969 * x1973)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1969 * x1970)) + ((x1972 * x1973)) + (((-1.0) * sj4 * x1967 * x1974)) + ((sj1 * x1968)) + (((-1.0) * x1966 * x1967)) + (((-1.0) * x1969 * x1971)))) + IKsqr((((x1969 * x1974)) + (((-1.0) * sj4 * x1967 * x1971)) + ((cj1 * x1968)) + ((sj1 * x1966)) + ((x1970 * x1972)) + (((-1.0) * x1969 * x1973)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                continue;
                                                                                                            j2array[0] = IKatan2((((x1969 * x1970)) + ((x1972 * x1973)) + (((-1.0) * sj4 * x1967 * x1974)) + ((sj1 * x1968)) + (((-1.0) * x1966 * x1967)) + (((-1.0) * x1969 * x1971))), (((x1969 * x1974)) + (((-1.0) * sj4 * x1967 * x1971)) + ((cj1 * x1968)) + ((sj1 * x1966)) + ((x1970 * x1972)) + (((-1.0) * x1969 * x1973))));
                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                            if (j2array[0] > IKPI)
                                                                                                            {
                                                                                                                j2array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                            {
                                                                                                                j2array[0] += IK2PI;
                                                                                                            }
                                                                                                            j2valid[0] = true;
                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                            {
                                                                                                                if (!j2valid[ij2])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij2[0] = ij2;
                                                                                                                _ij2[1] = -1;
                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                {
                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j2valid[iij2] = false;
                                                                                                                        _ij2[1] = iij2;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j2 = j2array[ij2];
                                                                                                                cj2 = cj2array[ij2];
                                                                                                                sj2 = sj2array[ij2];
                                                                                                                {
                                                                                                                    IkReal evalcond[6];
                                                                                                                    IkReal x1975 = IKcos(j2);
                                                                                                                    IkReal x1976 = IKsin(j2);
                                                                                                                    IkReal x1977 = (sj4 * sj5);
                                                                                                                    IkReal x1978 = ((1.0) * cj5);
                                                                                                                    IkReal x1979 = (cj3 * cj4);
                                                                                                                    IkReal x1980 = (cj5 * r11);
                                                                                                                    IkReal x1981 = ((0.15) * sj5);
                                                                                                                    IkReal x1982 = (cj3 * sj4);
                                                                                                                    IkReal x1983 = ((1.0) * cj4);
                                                                                                                    IkReal x1984 = (cj5 * r21);
                                                                                                                    IkReal x1985 = (sj3 * sj5);
                                                                                                                    IkReal x1986 = (cj1 * x1975);
                                                                                                                    IkReal x1987 = (sj1 * x1976);
                                                                                                                    IkReal x1988 = (sj5 * x1979);
                                                                                                                    IkReal x1989 = (cj1 * x1976);
                                                                                                                    IkReal x1990 = (sj1 * x1975);
                                                                                                                    IkReal x1991 = (x1986 + x1987);
                                                                                                                    evalcond[0] = ((((-1.0) * r10 * sj4 * x1978)) + ((r11 * x1977)) + (((-1.0) * r12 * x1983)) + x1991);
                                                                                                                    evalcond[1] = ((((-1.0) * r20 * sj4 * x1978)) + ((r21 * x1977)) + x1990 + (((-1.0) * x1989)) + (((-1.0) * r22 * x1983)));
                                                                                                                    evalcond[2] = ((((-0.15) * x1984)) + (((0.71) * cj1)) + (((-1.0) * pz)) + (((0.54) * x1989)) + (((-1.0) * r20 * x1981)) + (((-0.54) * x1990)));
                                                                                                                    evalcond[3] = ((((-0.15) * x1980)) + (((-1.0) * r10 * x1981)) + (((-0.71) * sj1)) + (((-1.0) * py)) + (((-0.54) * x1986)) + (((-0.54) * x1987)));
                                                                                                                    evalcond[4] = (((sj3 * x1984)) + (((-1.0) * r20 * x1978 * x1979)) + ((r21 * x1988)) + x1991 + ((r22 * x1982)) + ((r20 * x1985)));
                                                                                                                    evalcond[5] = (((sj3 * x1980)) + (((-1.0) * r10 * x1978 * x1979)) + ((r11 * x1988)) + ((r10 * x1985)) + ((r12 * x1982)) + x1989 + (((-1.0) * x1990)));
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                    std::vector<int> vfree(0);
                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } while (0);
                                                                                                if (bgotonextstatement)
                                                                                                {
                                                                                                    bool bgotonextstatement = true;
                                                                                                    do
                                                                                                    {
                                                                                                        if (1)
                                                                                                        {
                                                                                                            bgotonextstatement = false;
                                                                                                            continue; // branch miss [j2]
                                                                                                        }
                                                                                                    } while (0);
                                                                                                    if (bgotonextstatement)
                                                                                                    {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                {
                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    IkReal x1992 = ((1.0) * sj1);
                                                                                    IkReal x1993 = (sj1 * sj4);
                                                                                    IkReal x1994 = (r11 * sj5);
                                                                                    IkReal x1995 = ((1.0) * cj1);
                                                                                    IkReal x1996 = (cj4 * r12);
                                                                                    IkReal x1997 = (cj5 * r20 * sj0);
                                                                                    IkReal x1998 = (cj5 * r10 * sj4);
                                                                                    IkReal x1999 = (cj4 * r22 * sj0);
                                                                                    IkReal x2000 = (r21 * sj0 * sj4 * sj5);
                                                                                    CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal(((((-1.0) * sj4 * x1995 * x1997)) + (((-1.0) * x1995 * x1999)) + (((-1.0) * x1992 * x1998)) + (((-1.0) * x1992 * x1996)) + ((x1993 * x1994)) + ((cj1 * x2000)))), IkReal((((sj1 * x1999)) + ((cj1 * sj4 * x1994)) + (((-1.0) * x1992 * x2000)) + (((-1.0) * x1995 * x1996)) + (((-1.0) * x1995 * x1998)) + ((x1993 * x1997)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x2001.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x2002 = IKPowWithIntegerCheck(IKsign(sj0), -1);
                                                                                    if (!x2002.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    j2array[0] = ((-1.5707963267949) + (x2001.value) + (((1.5707963267949) * (x2002.value))));
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI)
                                                                                    {
                                                                                        j2array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j2array[0] < -IKPI)
                                                                                    {
                                                                                        j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                    {
                                                                                        if (!j2valid[ij2])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                        {
                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j2valid[iij2] = false;
                                                                                                _ij2[1] = iij2;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                            IkReal evalcond[9];
                                                                                            IkReal x2003 = IKsin(j2);
                                                                                            IkReal x2004 = IKcos(j2);
                                                                                            IkReal x2005 = (cj3 * sj4);
                                                                                            IkReal x2006 = (cj3 * cj4);
                                                                                            IkReal x2007 = (r21 * sj5);
                                                                                            IkReal x2008 = ((1.0) * cj5);
                                                                                            IkReal x2009 = (sj4 * sj5);
                                                                                            IkReal x2010 = (cj5 * sj3);
                                                                                            IkReal x2011 = ((0.15) * cj5);
                                                                                            IkReal x2012 = ((1.0) * cj0);
                                                                                            IkReal x2013 = ((0.15) * sj5);
                                                                                            IkReal x2014 = ((0.54) * sj0);
                                                                                            IkReal x2015 = (sj3 * sj5);
                                                                                            IkReal x2016 = ((1.0) * cj4);
                                                                                            IkReal x2017 = ((0.71) * sj1);
                                                                                            IkReal x2018 = ((0.54) * cj0);
                                                                                            IkReal x2019 = (cj1 * x2004);
                                                                                            IkReal x2020 = (sj1 * x2003);
                                                                                            IkReal x2021 = (cj1 * x2003);
                                                                                            IkReal x2022 = (sj1 * x2004);
                                                                                            IkReal x2023 = ((1.0) * sj0 * x2003);
                                                                                            evalcond[0] = (x2022 + (((-1.0) * x2021)) + ((sj4 * x2007)) + (((-1.0) * r20 * sj4 * x2008)) + (((-1.0) * r22 * x2016)));
                                                                                            evalcond[1] = ((((-1.0) * r20 * x2013)) + (((0.71) * cj1)) + (((-1.0) * r21 * x2011)) + (((-1.0) * pz)) + (((0.54) * x2021)) + (((-0.54) * x2022)));
                                                                                            evalcond[2] = (((r01 * x2009)) + (((-1.0) * x2012 * x2019)) + (((-1.0) * r02 * x2016)) + (((-1.0) * x2012 * x2020)) + (((-1.0) * r00 * sj4 * x2008)));
                                                                                            evalcond[3] = (((r11 * x2009)) + (((-1.0) * sj0 * x2019)) + (((-1.0) * sj0 * x2020)) + (((-1.0) * r12 * x2016)) + (((-1.0) * r10 * sj4 * x2008)));
                                                                                            evalcond[4] = (((x2018 * x2020)) + (((-1.0) * px)) + ((cj0 * x2017)) + (((-1.0) * r00 * x2013)) + ((x2018 * x2019)) + (((-1.0) * r01 * x2011)));
                                                                                            evalcond[5] = (((sj0 * x2017)) + ((x2014 * x2019)) + (((-1.0) * py)) + (((-1.0) * r11 * x2011)) + (((-1.0) * r10 * x2013)) + ((x2014 * x2020)));
                                                                                            evalcond[6] = (((r22 * x2005)) + (((-1.0) * r20 * x2006 * x2008)) + ((r20 * x2015)) + x2020 + x2019 + ((x2006 * x2007)) + ((r21 * x2010)));
                                                                                            evalcond[7] = (((r00 * x2015)) + ((r02 * x2005)) + ((r01 * x2010)) + ((cj0 * x2022)) + (((-1.0) * r00 * x2006 * x2008)) + (((-1.0) * x2012 * x2021)) + ((r01 * sj5 * x2006)));
                                                                                            evalcond[8] = (((r11 * sj5 * x2006)) + ((r12 * x2005)) + ((r10 * x2015)) + (((-1.0) * sj0 * x2021)) + ((sj0 * x2022)) + (((-1.0) * r10 * x2006 * x2008)) + ((r11 * x2010)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        {
                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                            bool j2valid[1] = {false};
                                                                            _nj2 = 1;
                                                                            IkReal x2024 = ((1.0) * cj0);
                                                                            IkReal x2025 = ((1.0) * sj1);
                                                                            IkReal x2026 = (cj5 * sj4);
                                                                            IkReal x2027 = (cj4 * r22);
                                                                            IkReal x2028 = (cj4 * r02);
                                                                            IkReal x2029 = (cj0 * sj1);
                                                                            IkReal x2030 = ((1.0) * cj1);
                                                                            IkReal x2031 = (sj1 * sj4 * sj5);
                                                                            IkReal x2032 = (cj1 * sj4 * sj5);
                                                                            CheckValue<IkReal> x2033 = IKatan2WithCheck(IkReal(((((-1.0) * cj1 * r20 * x2024 * x2026)) + (((-1.0) * cj1 * x2024 * x2027)) + ((r01 * x2031)) + ((cj0 * r21 * x2032)) + (((-1.0) * x2025 * x2028)) + (((-1.0) * r00 * x2025 * x2026)))), IkReal((((r01 * x2032)) + (((-1.0) * r00 * x2026 * x2030)) + ((x2027 * x2029)) + (((-1.0) * x2028 * x2030)) + ((r20 * x2026 * x2029)) + (((-1.0) * r21 * x2024 * x2031)))), IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x2033.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x2034 = IKPowWithIntegerCheck(IKsign(cj0), -1);
                                                                            if (!x2034.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            j2array[0] = ((-1.5707963267949) + (x2033.value) + (((1.5707963267949) * (x2034.value))));
                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                            if (j2array[0] > IKPI)
                                                                            {
                                                                                j2array[0] -= IK2PI;
                                                                            }
                                                                            else if (j2array[0] < -IKPI)
                                                                            {
                                                                                j2array[0] += IK2PI;
                                                                            }
                                                                            j2valid[0] = true;
                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                            {
                                                                                if (!j2valid[ij2])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij2[0] = ij2;
                                                                                _ij2[1] = -1;
                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                {
                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j2valid[iij2] = false;
                                                                                        _ij2[1] = iij2;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j2 = j2array[ij2];
                                                                                cj2 = cj2array[ij2];
                                                                                sj2 = sj2array[ij2];
                                                                                {
                                                                                    IkReal evalcond[9];
                                                                                    IkReal x2035 = IKsin(j2);
                                                                                    IkReal x2036 = IKcos(j2);
                                                                                    IkReal x2037 = (cj3 * sj4);
                                                                                    IkReal x2038 = (cj3 * cj4);
                                                                                    IkReal x2039 = (r21 * sj5);
                                                                                    IkReal x2040 = ((1.0) * cj5);
                                                                                    IkReal x2041 = (sj4 * sj5);
                                                                                    IkReal x2042 = (cj5 * sj3);
                                                                                    IkReal x2043 = ((0.15) * cj5);
                                                                                    IkReal x2044 = ((1.0) * cj0);
                                                                                    IkReal x2045 = ((0.15) * sj5);
                                                                                    IkReal x2046 = ((0.54) * sj0);
                                                                                    IkReal x2047 = (sj3 * sj5);
                                                                                    IkReal x2048 = ((1.0) * cj4);
                                                                                    IkReal x2049 = ((0.71) * sj1);
                                                                                    IkReal x2050 = ((0.54) * cj0);
                                                                                    IkReal x2051 = (cj1 * x2036);
                                                                                    IkReal x2052 = (sj1 * x2035);
                                                                                    IkReal x2053 = (cj1 * x2035);
                                                                                    IkReal x2054 = (sj1 * x2036);
                                                                                    IkReal x2055 = ((1.0) * sj0 * x2035);
                                                                                    evalcond[0] = ((((-1.0) * r22 * x2048)) + (((-1.0) * r20 * sj4 * x2040)) + x2054 + (((-1.0) * x2053)) + ((sj4 * x2039)));
                                                                                    evalcond[1] = ((((0.71) * cj1)) + (((-1.0) * pz)) + (((-1.0) * r21 * x2043)) + (((-1.0) * r20 * x2045)) + (((0.54) * x2053)) + (((-0.54) * x2054)));
                                                                                    evalcond[2] = ((((-1.0) * x2044 * x2052)) + (((-1.0) * x2044 * x2051)) + (((-1.0) * r02 * x2048)) + (((-1.0) * r00 * sj4 * x2040)) + ((r01 * x2041)));
                                                                                    evalcond[3] = ((((-1.0) * r10 * sj4 * x2040)) + ((r11 * x2041)) + (((-1.0) * sj0 * x2052)) + (((-1.0) * sj0 * x2051)) + (((-1.0) * r12 * x2048)));
                                                                                    evalcond[4] = (((cj0 * x2049)) + (((-1.0) * px)) + ((x2050 * x2052)) + ((x2050 * x2051)) + (((-1.0) * r01 * x2043)) + (((-1.0) * r00 * x2045)));
                                                                                    evalcond[5] = ((((-1.0) * r10 * x2045)) + (((-1.0) * py)) + ((x2046 * x2051)) + ((x2046 * x2052)) + ((sj0 * x2049)) + (((-1.0) * r11 * x2043)));
                                                                                    evalcond[6] = (((r22 * x2037)) + ((r21 * x2042)) + x2051 + x2052 + ((r20 * x2047)) + (((-1.0) * r20 * x2038 * x2040)) + ((x2038 * x2039)));
                                                                                    evalcond[7] = ((((-1.0) * x2044 * x2053)) + ((r02 * x2037)) + (((-1.0) * r00 * x2038 * x2040)) + ((cj0 * x2054)) + ((r01 * x2042)) + ((r01 * sj5 * x2038)) + ((r00 * x2047)));
                                                                                    evalcond[8] = (((r12 * x2037)) + ((r11 * x2042)) + (((-1.0) * sj0 * x2053)) + ((sj0 * x2054)) + (((-1.0) * r10 * x2038 * x2040)) + ((r10 * x2047)) + ((r11 * sj5 * x2038)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 1;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                {
                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1] = {false};
                                                    _nj1 = 1;
                                                    IkReal x2056 = ((0.15) * sj0);
                                                    IkReal x2057 = ((0.76056338028169) * sj4);
                                                    IkReal x2058 = ((0.54) * sj0 * sj4);
                                                    CheckValue<IkReal> x2059 = IKPowWithIntegerCheck(sj0, -2);
                                                    if (!x2059.valid)
                                                    {
                                                        continue;
                                                    }
                                                    if (IKabs(((-1.40845070422535) * (x2059.value) * (((((-0.54) * cj4 * r12 * sj0)) + (((-1.0) * cj5 * r10 * x2058)) + (((-1.0) * r10 * sj5 * x2056)) + (((-1.0) * py * sj0)) + ((r11 * sj5 * x2058)) + (((-1.0) * cj5 * r11 * x2056)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * r21 * sj5 * x2057)) + (((0.211267605633803) * r20 * sj5)) + ((cj5 * r20 * x2057)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535) * (x2059.value) * (((((-0.54) * cj4 * r12 * sj0)) + (((-1.0) * cj5 * r10 * x2058)) + (((-1.0) * r10 * sj5 * x2056)) + (((-1.0) * py * sj0)) + ((r11 * sj5 * x2058)) + (((-1.0) * cj5 * r11 * x2056)))))) + IKsqr(((((-1.0) * r21 * sj5 * x2057)) + (((0.211267605633803) * r20 * sj5)) + ((cj5 * r20 * x2057)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                        continue;
                                                    j1array[0] = IKatan2(((-1.40845070422535) * (x2059.value) * (((((-0.54) * cj4 * r12 * sj0)) + (((-1.0) * cj5 * r10 * x2058)) + (((-1.0) * r10 * sj5 * x2056)) + (((-1.0) * py * sj0)) + ((r11 * sj5 * x2058)) + (((-1.0) * cj5 * r11 * x2056))))), ((((-1.0) * r21 * sj5 * x2057)) + (((0.211267605633803) * r20 * sj5)) + ((cj5 * r20 * x2057)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21))));
                                                    sj1array[0] = IKsin(j1array[0]);
                                                    cj1array[0] = IKcos(j1array[0]);
                                                    if (j1array[0] > IKPI)
                                                    {
                                                        j1array[0] -= IK2PI;
                                                    }
                                                    else if (j1array[0] < -IKPI)
                                                    {
                                                        j1array[0] += IK2PI;
                                                    }
                                                    j1valid[0] = true;
                                                    for (int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                        if (!j1valid[ij1])
                                                        {
                                                            continue;
                                                        }
                                                        _ij1[0] = ij1;
                                                        _ij1[1] = -1;
                                                        for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                        {
                                                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                            {
                                                                j1valid[iij1] = false;
                                                                _ij1[1] = iij1;
                                                                break;
                                                            }
                                                        }
                                                        j1 = j1array[ij1];
                                                        cj1 = cj1array[ij1];
                                                        sj1 = sj1array[ij1];
                                                        {
                                                            IkReal evalcond[9];
                                                            IkReal x2060 = IKsin(j1);
                                                            IkReal x2061 = IKcos(j1);
                                                            IkReal x2062 = ((0.54) * cj4);
                                                            IkReal x2063 = (cj5 * r00);
                                                            IkReal x2064 = ((1.0) * py);
                                                            IkReal x2065 = ((0.15) * sj0);
                                                            IkReal x2066 = (r10 * sj5);
                                                            IkReal x2067 = ((1.0) * px);
                                                            IkReal x2068 = (cj0 * cj5);
                                                            IkReal x2069 = ((0.15) * r01);
                                                            IkReal x2070 = (cj5 * r21);
                                                            IkReal x2071 = ((0.54) * sj4);
                                                            IkReal x2072 = (cj3 * sj5);
                                                            IkReal x2073 = ((0.15) * r11);
                                                            IkReal x2074 = (r00 * sj5);
                                                            IkReal x2075 = (r01 * sj5);
                                                            IkReal x2076 = ((0.54) * sj3);
                                                            IkReal x2077 = (r20 * sj5);
                                                            IkReal x2078 = (r11 * sj5);
                                                            IkReal x2079 = (cj5 * r11);
                                                            IkReal x2080 = (cj5 * r10);
                                                            IkReal x2081 = (cj3 * r22);
                                                            IkReal x2082 = ((0.15) * cj0);
                                                            IkReal x2083 = (cj5 * r20);
                                                            IkReal x2084 = ((1.0) * pz);
                                                            IkReal x2085 = (cj5 * r01);
                                                            IkReal x2086 = ((0.71) * x2060);
                                                            IkReal x2087 = ((0.71) * x2061);
                                                            IkReal x2088 = (cj0 * sj0 * x2086);
                                                            evalcond[0] = (((r22 * x2062)) + (((-1.0) * x2087)) + pz + ((x2071 * x2083)) + (((0.15) * x2070)) + (((0.15) * x2077)) + (((-1.0) * r21 * sj5 * x2071)));
                                                            evalcond[1] = ((((-1.0) * sj0 * x2064)) + ((x2086 * (sj0 * sj0))) + ((sj0 * x2071 * x2078)) + (((-1.0) * sj0 * x2071 * x2080)) + (((-1.0) * x2065 * x2066)) + (((-1.0) * x2065 * x2079)) + (((-1.0) * r12 * sj0 * x2062)));
                                                            evalcond[2] = (((cj0 * x2071 * x2075)) + (((-1.0) * cj0 * x2063 * x2071)) + (((-1.0) * cj0 * r02 * x2062)) + (((-1.0) * x2074 * x2082)) + (((-1.0) * cj0 * x2067)) + ((x2086 * (cj0 * cj0))) + (((-1.0) * x2068 * x2069)));
                                                            evalcond[3] = (((x2066 * x2076)) + ((cj3 * r12 * x2071)) + ((sj0 * x2087)) + ((x2076 * x2079)) + (((-1.0) * sj0 * x2084)) + ((r11 * x2062 * x2072)) + (((-1.0) * x2065 * x2077)) + (((-1.0) * x2065 * x2070)) + (((-1.0) * cj3 * x2062 * x2080)));
                                                            evalcond[4] = (((cj3 * r02 * x2071)) + (((-1.0) * x2077 * x2082)) + ((r01 * x2062 * x2072)) + (((-1.0) * cj0 * x2084)) + ((x2076 * x2085)) + (((-1.0) * cj3 * x2062 * x2063)) + ((cj0 * x2087)) + ((x2074 * x2076)) + (((-0.15) * r21 * x2068)));
                                                            evalcond[5] = ((((-1.0) * sj0 * x2070 * x2076)) + ((sj0 * x2086)) + (((-1.0) * sj0 * x2076 * x2077)) + (((-1.0) * x2064)) + ((cj3 * sj0 * x2062 * x2083)) + (((-1.0) * r21 * sj0 * x2062 * x2072)) + (((-1.0) * cj5 * x2073)) + (((-1.0) * sj0 * x2071 * x2081)) + (((-0.15) * x2066)));
                                                            evalcond[6] = ((((-1.0) * cj0 * x2076 * x2077)) + (((-1.0) * x2067)) + (((-1.0) * r21 * x2068 * x2076)) + (((-1.0) * cj5 * x2069)) + (((-0.15) * x2074)) + (((-1.0) * cj0 * x2071 * x2081)) + ((cj3 * r20 * x2062 * x2068)) + ((cj0 * x2086)) + (((-1.0) * cj0 * r21 * x2062 * x2072)));
                                                            evalcond[7] = ((((-1.0) * cj0 * r12 * x2062)) + (((-1.0) * sj0 * x2067)) + ((cj0 * x2071 * x2078)) + (((-1.0) * x2065 * x2085)) + x2088 + (((-1.0) * x2065 * x2074)) + (((-1.0) * r10 * x2068 * x2071)));
                                                            evalcond[8] = ((((-1.0) * x2066 * x2082)) + (((-1.0) * r02 * sj0 * x2062)) + (((-1.0) * sj0 * x2063 * x2071)) + x2088 + (((-1.0) * cj0 * x2064)) + ((sj0 * x2071 * x2075)) + (((-1.0) * x2068 * x2073)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                            {
                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j2eval[2];
                                                            j2eval[0] = cj0;
                                                            j2eval[1] = IKsign(cj0);
                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                            {
                                                                {
                                                                    IkReal j2eval[2];
                                                                    j2eval[0] = sj0;
                                                                    j2eval[1] = IKsign(sj0);
                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                    {
                                                                        {
                                                                            IkReal evalcond[1];
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                        bool j2valid[1] = {false};
                                                                                        _nj2 = 1;
                                                                                        IkReal x2089 = (sj1 * sj4);
                                                                                        IkReal x2090 = (r01 * sj5);
                                                                                        IkReal x2091 = (cj4 * r22);
                                                                                        IkReal x2092 = ((1.0) * cj1);
                                                                                        IkReal x2093 = (cj5 * r00);
                                                                                        IkReal x2094 = (cj1 * sj4);
                                                                                        IkReal x2095 = (cj4 * r02);
                                                                                        IkReal x2096 = (r21 * sj5);
                                                                                        IkReal x2097 = (cj5 * r20);
                                                                                        if (IKabs(((((-1.0) * sj4 * x2092 * x2097)) + ((x2094 * x2096)) + (((-1.0) * x2091 * x2092)) + (((-1.0) * x2089 * x2093)) + (((-1.0) * sj1 * x2095)) + ((x2089 * x2090)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj4 * x2092 * x2093)) + ((sj1 * x2091)) + (((-1.0) * x2089 * x2096)) + ((x2090 * x2094)) + ((x2089 * x2097)) + (((-1.0) * x2092 * x2095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * sj4 * x2092 * x2097)) + ((x2094 * x2096)) + (((-1.0) * x2091 * x2092)) + (((-1.0) * x2089 * x2093)) + (((-1.0) * sj1 * x2095)) + ((x2089 * x2090)))) + IKsqr(((((-1.0) * sj4 * x2092 * x2093)) + ((sj1 * x2091)) + (((-1.0) * x2089 * x2096)) + ((x2090 * x2094)) + ((x2089 * x2097)) + (((-1.0) * x2092 * x2095)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j2array[0] = IKatan2(((((-1.0) * sj4 * x2092 * x2097)) + ((x2094 * x2096)) + (((-1.0) * x2091 * x2092)) + (((-1.0) * x2089 * x2093)) + (((-1.0) * sj1 * x2095)) + ((x2089 * x2090))), ((((-1.0) * sj4 * x2092 * x2093)) + ((sj1 * x2091)) + (((-1.0) * x2089 * x2096)) + ((x2090 * x2094)) + ((x2089 * x2097)) + (((-1.0) * x2092 * x2095))));
                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                        if (j2array[0] > IKPI)
                                                                                        {
                                                                                            j2array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j2array[0] < -IKPI)
                                                                                        {
                                                                                            j2array[0] += IK2PI;
                                                                                        }
                                                                                        j2valid[0] = true;
                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                        {
                                                                                            if (!j2valid[ij2])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij2[0] = ij2;
                                                                                            _ij2[1] = -1;
                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                            {
                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j2valid[iij2] = false;
                                                                                                    _ij2[1] = iij2;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j2 = j2array[ij2];
                                                                                            cj2 = cj2array[ij2];
                                                                                            sj2 = sj2array[ij2];
                                                                                            {
                                                                                                IkReal evalcond[6];
                                                                                                IkReal x2098 = IKsin(j2);
                                                                                                IkReal x2099 = IKcos(j2);
                                                                                                IkReal x2100 = (cj3 * sj4);
                                                                                                IkReal x2101 = (cj3 * cj4);
                                                                                                IkReal x2102 = (r21 * sj5);
                                                                                                IkReal x2103 = ((1.0) * cj5);
                                                                                                IkReal x2104 = (cj5 * r01);
                                                                                                IkReal x2105 = ((0.15) * sj5);
                                                                                                IkReal x2106 = (r01 * sj5);
                                                                                                IkReal x2107 = (sj3 * sj5);
                                                                                                IkReal x2108 = ((1.0) * cj4);
                                                                                                IkReal x2109 = (cj5 * r21);
                                                                                                IkReal x2110 = (sj1 * x2099);
                                                                                                IkReal x2111 = (cj1 * x2099);
                                                                                                IkReal x2112 = ((0.54) * x2098);
                                                                                                IkReal x2113 = (sj1 * x2098);
                                                                                                IkReal x2114 = ((1.0) * cj1 * x2098);
                                                                                                evalcond[0] = ((((-1.0) * r22 * x2108)) + ((sj4 * x2102)) + x2110 + (((-1.0) * r20 * sj4 * x2103)) + (((-1.0) * x2114)));
                                                                                                evalcond[1] = ((((-1.0) * r02 * x2108)) + ((sj4 * x2106)) + (((-1.0) * x2113)) + (((-1.0) * x2111)) + (((-1.0) * r00 * sj4 * x2103)));
                                                                                                evalcond[2] = ((((-0.54) * x2110)) + (((0.71) * cj1)) + (((-1.0) * pz)) + (((-1.0) * r20 * x2105)) + (((-0.15) * x2109)) + ((cj1 * x2112)));
                                                                                                evalcond[3] = ((((0.54) * x2111)) + ((sj1 * x2112)) + (((-1.0) * r00 * x2105)) + (((-1.0) * px)) + (((0.71) * sj1)) + (((-0.15) * x2104)));
                                                                                                evalcond[4] = (((r20 * x2107)) + x2111 + x2113 + ((x2101 * x2102)) + ((r22 * x2100)) + (((-1.0) * r20 * x2101 * x2103)) + ((sj3 * x2109)));
                                                                                                evalcond[5] = (((r02 * x2100)) + x2110 + ((r00 * x2107)) + ((x2101 * x2106)) + (((-1.0) * r00 * x2101 * x2103)) + (((-1.0) * x2114)) + ((sj3 * x2104)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            IkReal x2115 = (cj4 * r22);
                                                                                            IkReal x2116 = ((1.0) * cj1);
                                                                                            IkReal x2117 = (cj4 * r02);
                                                                                            IkReal x2118 = (sj4 * sj5);
                                                                                            IkReal x2119 = ((1.0) * sj1);
                                                                                            IkReal x2120 = (cj5 * sj4);
                                                                                            IkReal x2121 = (sj1 * x2120);
                                                                                            if (IKabs((((cj1 * r21 * x2118)) + ((sj1 * x2117)) + (((-1.0) * r20 * x2116 * x2120)) + (((-1.0) * r01 * x2118 * x2119)) + ((r00 * x2121)) + (((-1.0) * x2115 * x2116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1 * x2115)) + (((-1.0) * r01 * x2116 * x2118)) + ((r20 * x2121)) + ((cj1 * x2117)) + ((cj1 * r00 * x2120)) + (((-1.0) * r21 * x2118 * x2119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1 * r21 * x2118)) + ((sj1 * x2117)) + (((-1.0) * r20 * x2116 * x2120)) + (((-1.0) * r01 * x2118 * x2119)) + ((r00 * x2121)) + (((-1.0) * x2115 * x2116)))) + IKsqr((((sj1 * x2115)) + (((-1.0) * r01 * x2116 * x2118)) + ((r20 * x2121)) + ((cj1 * x2117)) + ((cj1 * r00 * x2120)) + (((-1.0) * r21 * x2118 * x2119)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j2array[0] = IKatan2((((cj1 * r21 * x2118)) + ((sj1 * x2117)) + (((-1.0) * r20 * x2116 * x2120)) + (((-1.0) * r01 * x2118 * x2119)) + ((r00 * x2121)) + (((-1.0) * x2115 * x2116))), (((sj1 * x2115)) + (((-1.0) * r01 * x2116 * x2118)) + ((r20 * x2121)) + ((cj1 * x2117)) + ((cj1 * r00 * x2120)) + (((-1.0) * r21 * x2118 * x2119))));
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[6];
                                                                                                    IkReal x2122 = IKcos(j2);
                                                                                                    IkReal x2123 = IKsin(j2);
                                                                                                    IkReal x2124 = (cj3 * sj4);
                                                                                                    IkReal x2125 = (cj3 * cj4);
                                                                                                    IkReal x2126 = (r21 * sj5);
                                                                                                    IkReal x2127 = ((1.0) * cj5);
                                                                                                    IkReal x2128 = (cj5 * r01);
                                                                                                    IkReal x2129 = ((0.15) * sj5);
                                                                                                    IkReal x2130 = (r01 * sj5);
                                                                                                    IkReal x2131 = (sj3 * sj5);
                                                                                                    IkReal x2132 = ((1.0) * cj4);
                                                                                                    IkReal x2133 = (cj5 * r21);
                                                                                                    IkReal x2134 = (cj1 * x2122);
                                                                                                    IkReal x2135 = (sj1 * x2123);
                                                                                                    IkReal x2136 = (cj1 * x2123);
                                                                                                    IkReal x2137 = (sj1 * x2122);
                                                                                                    IkReal x2138 = (x2134 + x2135);
                                                                                                    evalcond[0] = ((((-1.0) * r00 * sj4 * x2127)) + ((sj4 * x2130)) + x2138 + (((-1.0) * r02 * x2132)));
                                                                                                    evalcond[1] = ((((-1.0) * r20 * sj4 * x2127)) + (((-1.0) * r22 * x2132)) + x2137 + ((sj4 * x2126)) + (((-1.0) * x2136)));
                                                                                                    evalcond[2] = ((((0.71) * cj1)) + (((-0.54) * x2137)) + (((-1.0) * pz)) + (((-0.15) * x2133)) + (((0.54) * x2136)) + (((-1.0) * r20 * x2129)));
                                                                                                    evalcond[3] = ((((-0.54) * x2134)) + (((-0.54) * x2135)) + (((-1.0) * r00 * x2129)) + (((-0.15) * x2128)) + (((-0.71) * sj1)) + (((-1.0) * px)));
                                                                                                    evalcond[4] = (((x2125 * x2126)) + x2138 + ((sj3 * x2133)) + ((r22 * x2124)) + ((r20 * x2131)) + (((-1.0) * r20 * x2125 * x2127)));
                                                                                                    evalcond[5] = ((((-1.0) * r00 * x2125 * x2127)) + ((sj3 * x2128)) + x2136 + ((r02 * x2124)) + ((r00 * x2131)) + (((-1.0) * x2137)) + ((x2125 * x2130)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                IkReal x2139 = (cj4 * r22);
                                                                                                IkReal x2140 = ((1.0) * cj1);
                                                                                                IkReal x2141 = (cj5 * sj4);
                                                                                                IkReal x2142 = (cj4 * r12);
                                                                                                IkReal x2143 = ((1.0) * sj1);
                                                                                                IkReal x2144 = (r11 * sj4 * sj5);
                                                                                                IkReal x2145 = (r21 * sj4 * sj5);
                                                                                                if (IKabs((((cj1 * x2145)) + (((-1.0) * x2142 * x2143)) + (((-1.0) * r20 * x2140 * x2141)) + ((sj1 * x2144)) + (((-1.0) * r10 * x2141 * x2143)) + (((-1.0) * x2139 * x2140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1 * x2144)) + (((-1.0) * x2143 * x2145)) + (((-1.0) * x2140 * x2142)) + ((r20 * sj1 * x2141)) + (((-1.0) * r10 * x2140 * x2141)) + ((sj1 * x2139)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1 * x2145)) + (((-1.0) * x2142 * x2143)) + (((-1.0) * r20 * x2140 * x2141)) + ((sj1 * x2144)) + (((-1.0) * r10 * x2141 * x2143)) + (((-1.0) * x2139 * x2140)))) + IKsqr((((cj1 * x2144)) + (((-1.0) * x2143 * x2145)) + (((-1.0) * x2140 * x2142)) + ((r20 * sj1 * x2141)) + (((-1.0) * r10 * x2140 * x2141)) + ((sj1 * x2139)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j2array[0] = IKatan2((((cj1 * x2145)) + (((-1.0) * x2142 * x2143)) + (((-1.0) * r20 * x2140 * x2141)) + ((sj1 * x2144)) + (((-1.0) * r10 * x2141 * x2143)) + (((-1.0) * x2139 * x2140))), (((cj1 * x2144)) + (((-1.0) * x2143 * x2145)) + (((-1.0) * x2140 * x2142)) + ((r20 * sj1 * x2141)) + (((-1.0) * r10 * x2140 * x2141)) + ((sj1 * x2139))));
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[6];
                                                                                                        IkReal x2146 = IKsin(j2);
                                                                                                        IkReal x2147 = IKcos(j2);
                                                                                                        IkReal x2148 = (sj4 * sj5);
                                                                                                        IkReal x2149 = ((1.0) * cj5);
                                                                                                        IkReal x2150 = (cj3 * cj4);
                                                                                                        IkReal x2151 = (cj5 * r11);
                                                                                                        IkReal x2152 = ((0.15) * sj5);
                                                                                                        IkReal x2153 = (cj3 * sj4);
                                                                                                        IkReal x2154 = ((1.0) * cj4);
                                                                                                        IkReal x2155 = (cj5 * r21);
                                                                                                        IkReal x2156 = (sj3 * sj5);
                                                                                                        IkReal x2157 = (sj1 * x2147);
                                                                                                        IkReal x2158 = (cj1 * x2147);
                                                                                                        IkReal x2159 = (sj5 * x2150);
                                                                                                        IkReal x2160 = ((0.54) * x2146);
                                                                                                        IkReal x2161 = (sj1 * x2146);
                                                                                                        IkReal x2162 = ((1.0) * cj1 * x2146);
                                                                                                        evalcond[0] = ((((-1.0) * r20 * sj4 * x2149)) + x2157 + (((-1.0) * x2162)) + ((r21 * x2148)) + (((-1.0) * r22 * x2154)));
                                                                                                        evalcond[1] = (((r11 * x2148)) + (((-1.0) * r12 * x2154)) + (((-1.0) * r10 * sj4 * x2149)) + (((-1.0) * x2161)) + (((-1.0) * x2158)));
                                                                                                        evalcond[2] = ((((0.71) * cj1)) + (((-0.15) * x2155)) + (((-0.54) * x2157)) + (((-1.0) * pz)) + ((cj1 * x2160)) + (((-1.0) * r20 * x2152)));
                                                                                                        evalcond[3] = (((sj1 * x2160)) + (((-0.15) * x2151)) + (((-1.0) * py)) + (((0.54) * x2158)) + (((-1.0) * r10 * x2152)) + (((0.71) * sj1)));
                                                                                                        evalcond[4] = ((((-1.0) * r20 * x2149 * x2150)) + ((r20 * x2156)) + x2161 + x2158 + ((r22 * x2153)) + ((r21 * x2159)) + ((sj3 * x2155)));
                                                                                                        evalcond[5] = (x2157 + (((-1.0) * r10 * x2149 * x2150)) + ((r10 * x2156)) + (((-1.0) * x2162)) + ((r12 * x2153)) + ((r11 * x2159)) + ((sj3 * x2151)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    IkReal x2163 = (cj4 * r22);
                                                                                                    IkReal x2164 = ((1.0) * cj1);
                                                                                                    IkReal x2165 = (cj4 * r12);
                                                                                                    IkReal x2166 = (sj1 * sj4);
                                                                                                    IkReal x2167 = (cj5 * r10);
                                                                                                    IkReal x2168 = (r11 * sj5);
                                                                                                    IkReal x2169 = (cj1 * sj4);
                                                                                                    IkReal x2170 = (r21 * sj5);
                                                                                                    IkReal x2171 = (cj5 * r20);
                                                                                                    if (IKabs((((sj1 * x2165)) + (((-1.0) * x2163 * x2164)) + ((x2166 * x2167)) + (((-1.0) * x2166 * x2168)) + (((-1.0) * sj4 * x2164 * x2171)) + ((x2169 * x2170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj4 * x2164 * x2168)) + ((sj1 * x2163)) + (((-1.0) * x2166 * x2170)) + ((x2166 * x2171)) + ((x2167 * x2169)) + ((cj1 * x2165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1 * x2165)) + (((-1.0) * x2163 * x2164)) + ((x2166 * x2167)) + (((-1.0) * x2166 * x2168)) + (((-1.0) * sj4 * x2164 * x2171)) + ((x2169 * x2170)))) + IKsqr(((((-1.0) * sj4 * x2164 * x2168)) + ((sj1 * x2163)) + (((-1.0) * x2166 * x2170)) + ((x2166 * x2171)) + ((x2167 * x2169)) + ((cj1 * x2165)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2((((sj1 * x2165)) + (((-1.0) * x2163 * x2164)) + ((x2166 * x2167)) + (((-1.0) * x2166 * x2168)) + (((-1.0) * sj4 * x2164 * x2171)) + ((x2169 * x2170))), ((((-1.0) * sj4 * x2164 * x2168)) + ((sj1 * x2163)) + (((-1.0) * x2166 * x2170)) + ((x2166 * x2171)) + ((x2167 * x2169)) + ((cj1 * x2165))));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[6];
                                                                                                            IkReal x2172 = IKcos(j2);
                                                                                                            IkReal x2173 = IKsin(j2);
                                                                                                            IkReal x2174 = (sj4 * sj5);
                                                                                                            IkReal x2175 = ((1.0) * cj5);
                                                                                                            IkReal x2176 = (cj3 * cj4);
                                                                                                            IkReal x2177 = (cj5 * r11);
                                                                                                            IkReal x2178 = ((0.15) * sj5);
                                                                                                            IkReal x2179 = (cj3 * sj4);
                                                                                                            IkReal x2180 = ((1.0) * cj4);
                                                                                                            IkReal x2181 = (cj5 * r21);
                                                                                                            IkReal x2182 = (sj3 * sj5);
                                                                                                            IkReal x2183 = (cj1 * x2172);
                                                                                                            IkReal x2184 = (sj1 * x2173);
                                                                                                            IkReal x2185 = (sj5 * x2176);
                                                                                                            IkReal x2186 = (cj1 * x2173);
                                                                                                            IkReal x2187 = (sj1 * x2172);
                                                                                                            IkReal x2188 = (x2183 + x2184);
                                                                                                            evalcond[0] = (((r11 * x2174)) + x2188 + (((-1.0) * r10 * sj4 * x2175)) + (((-1.0) * r12 * x2180)));
                                                                                                            evalcond[1] = (((r21 * x2174)) + x2187 + (((-1.0) * x2186)) + (((-1.0) * r22 * x2180)) + (((-1.0) * r20 * sj4 * x2175)));
                                                                                                            evalcond[2] = ((((0.71) * cj1)) + (((-1.0) * r20 * x2178)) + (((-0.15) * x2181)) + (((0.54) * x2186)) + (((-1.0) * pz)) + (((-0.54) * x2187)));
                                                                                                            evalcond[3] = ((((-0.15) * x2177)) + (((-0.71) * sj1)) + (((-1.0) * py)) + (((-0.54) * x2184)) + (((-0.54) * x2183)) + (((-1.0) * r10 * x2178)));
                                                                                                            evalcond[4] = (((r22 * x2179)) + ((sj3 * x2181)) + x2188 + ((r20 * x2182)) + (((-1.0) * r20 * x2175 * x2176)) + ((r21 * x2185)));
                                                                                                            evalcond[5] = (x2186 + (((-1.0) * x2187)) + ((sj3 * x2177)) + ((r11 * x2185)) + (((-1.0) * r10 * x2175 * x2176)) + ((r12 * x2179)) + ((r10 * x2182)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                if (1)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    continue; // branch miss [j2]
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        {
                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                            bool j2valid[1] = {false};
                                                                            _nj2 = 1;
                                                                            IkReal x2189 = ((1.0) * sj1);
                                                                            IkReal x2190 = (sj1 * sj4);
                                                                            IkReal x2191 = (r11 * sj5);
                                                                            IkReal x2192 = ((1.0) * cj1);
                                                                            IkReal x2193 = (cj4 * r12);
                                                                            IkReal x2194 = (cj5 * r20 * sj0);
                                                                            IkReal x2195 = (cj5 * r10 * sj4);
                                                                            IkReal x2196 = (cj4 * r22 * sj0);
                                                                            IkReal x2197 = (r21 * sj0 * sj4 * sj5);
                                                                            CheckValue<IkReal> x2198 = IKPowWithIntegerCheck(IKsign(sj0), -1);
                                                                            if (!x2198.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(((((-1.0) * x2189 * x2195)) + (((-1.0) * x2189 * x2193)) + ((cj1 * x2197)) + (((-1.0) * x2192 * x2196)) + ((x2190 * x2191)) + (((-1.0) * sj4 * x2192 * x2194)))), IkReal(((((-1.0) * x2189 * x2197)) + (((-1.0) * x2192 * x2195)) + (((-1.0) * x2192 * x2193)) + ((sj1 * x2196)) + ((cj1 * sj4 * x2191)) + ((x2190 * x2194)))), IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x2199.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x2198.value))) + (x2199.value));
                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                            if (j2array[0] > IKPI)
                                                                            {
                                                                                j2array[0] -= IK2PI;
                                                                            }
                                                                            else if (j2array[0] < -IKPI)
                                                                            {
                                                                                j2array[0] += IK2PI;
                                                                            }
                                                                            j2valid[0] = true;
                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                            {
                                                                                if (!j2valid[ij2])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij2[0] = ij2;
                                                                                _ij2[1] = -1;
                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                {
                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j2valid[iij2] = false;
                                                                                        _ij2[1] = iij2;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j2 = j2array[ij2];
                                                                                cj2 = cj2array[ij2];
                                                                                sj2 = sj2array[ij2];
                                                                                {
                                                                                    IkReal evalcond[9];
                                                                                    IkReal x2200 = IKsin(j2);
                                                                                    IkReal x2201 = IKcos(j2);
                                                                                    IkReal x2202 = (cj3 * sj4);
                                                                                    IkReal x2203 = (cj3 * cj4);
                                                                                    IkReal x2204 = (r21 * sj5);
                                                                                    IkReal x2205 = ((1.0) * cj5);
                                                                                    IkReal x2206 = (sj4 * sj5);
                                                                                    IkReal x2207 = (cj5 * sj3);
                                                                                    IkReal x2208 = ((0.15) * cj5);
                                                                                    IkReal x2209 = ((1.0) * cj0);
                                                                                    IkReal x2210 = ((0.15) * sj5);
                                                                                    IkReal x2211 = ((0.54) * sj0);
                                                                                    IkReal x2212 = (sj3 * sj5);
                                                                                    IkReal x2213 = ((1.0) * cj4);
                                                                                    IkReal x2214 = ((0.71) * sj1);
                                                                                    IkReal x2215 = ((0.54) * cj0);
                                                                                    IkReal x2216 = (cj1 * x2201);
                                                                                    IkReal x2217 = (sj1 * x2200);
                                                                                    IkReal x2218 = (cj1 * x2200);
                                                                                    IkReal x2219 = (sj1 * x2201);
                                                                                    IkReal x2220 = ((1.0) * sj0 * x2200);
                                                                                    evalcond[0] = ((((-1.0) * x2218)) + x2219 + (((-1.0) * r20 * sj4 * x2205)) + (((-1.0) * r22 * x2213)) + ((sj4 * x2204)));
                                                                                    evalcond[1] = ((((0.71) * cj1)) + (((0.54) * x2218)) + (((-1.0) * pz)) + (((-0.54) * x2219)) + (((-1.0) * r20 * x2210)) + (((-1.0) * r21 * x2208)));
                                                                                    evalcond[2] = (((r01 * x2206)) + (((-1.0) * r00 * sj4 * x2205)) + (((-1.0) * x2209 * x2217)) + (((-1.0) * x2209 * x2216)) + (((-1.0) * r02 * x2213)));
                                                                                    evalcond[3] = ((((-1.0) * sj0 * x2217)) + (((-1.0) * sj0 * x2216)) + (((-1.0) * r10 * sj4 * x2205)) + ((r11 * x2206)) + (((-1.0) * r12 * x2213)));
                                                                                    evalcond[4] = ((((-1.0) * px)) + ((cj0 * x2214)) + ((x2215 * x2216)) + ((x2215 * x2217)) + (((-1.0) * r00 * x2210)) + (((-1.0) * r01 * x2208)));
                                                                                    evalcond[5] = ((((-1.0) * r10 * x2210)) + (((-1.0) * r11 * x2208)) + ((x2211 * x2216)) + ((x2211 * x2217)) + (((-1.0) * py)) + ((sj0 * x2214)));
                                                                                    evalcond[6] = (((r20 * x2212)) + x2217 + x2216 + ((x2203 * x2204)) + (((-1.0) * r20 * x2203 * x2205)) + ((r22 * x2202)) + ((r21 * x2207)));
                                                                                    evalcond[7] = (((r02 * x2202)) + ((r01 * x2207)) + ((r00 * x2212)) + ((cj0 * x2219)) + ((r01 * sj5 * x2203)) + (((-1.0) * r00 * x2203 * x2205)) + (((-1.0) * x2209 * x2218)));
                                                                                    evalcond[8] = ((((-1.0) * sj0 * x2218)) + ((r12 * x2202)) + ((r11 * x2207)) + ((sj0 * x2219)) + ((r10 * x2212)) + (((-1.0) * r10 * x2203 * x2205)) + ((r11 * sj5 * x2203)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 1;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                    bool j2valid[1] = {false};
                                                                    _nj2 = 1;
                                                                    IkReal x2221 = ((1.0) * cj0);
                                                                    IkReal x2222 = ((1.0) * sj1);
                                                                    IkReal x2223 = (cj5 * sj4);
                                                                    IkReal x2224 = (cj4 * r22);
                                                                    IkReal x2225 = (cj4 * r02);
                                                                    IkReal x2226 = (cj0 * sj1);
                                                                    IkReal x2227 = ((1.0) * cj1);
                                                                    IkReal x2228 = (sj1 * sj4 * sj5);
                                                                    IkReal x2229 = (cj1 * sj4 * sj5);
                                                                    CheckValue<IkReal> x2230 = IKatan2WithCheck(IkReal(((((-1.0) * x2222 * x2225)) + ((cj0 * r21 * x2229)) + (((-1.0) * cj1 * r20 * x2221 * x2223)) + (((-1.0) * cj1 * x2221 * x2224)) + ((r01 * x2228)) + (((-1.0) * r00 * x2222 * x2223)))), IkReal(((((-1.0) * x2225 * x2227)) + ((x2224 * x2226)) + (((-1.0) * r21 * x2221 * x2228)) + (((-1.0) * r00 * x2223 * x2227)) + ((r20 * x2223 * x2226)) + ((r01 * x2229)))), IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x2230.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    CheckValue<IkReal> x2231 = IKPowWithIntegerCheck(IKsign(cj0), -1);
                                                                    if (!x2231.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j2array[0] = ((-1.5707963267949) + (x2230.value) + (((1.5707963267949) * (x2231.value))));
                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                    if (j2array[0] > IKPI)
                                                                    {
                                                                        j2array[0] -= IK2PI;
                                                                    }
                                                                    else if (j2array[0] < -IKPI)
                                                                    {
                                                                        j2array[0] += IK2PI;
                                                                    }
                                                                    j2valid[0] = true;
                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                    {
                                                                        if (!j2valid[ij2])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij2[0] = ij2;
                                                                        _ij2[1] = -1;
                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                        {
                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j2valid[iij2] = false;
                                                                                _ij2[1] = iij2;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j2 = j2array[ij2];
                                                                        cj2 = cj2array[ij2];
                                                                        sj2 = sj2array[ij2];
                                                                        {
                                                                            IkReal evalcond[9];
                                                                            IkReal x2232 = IKsin(j2);
                                                                            IkReal x2233 = IKcos(j2);
                                                                            IkReal x2234 = (cj3 * sj4);
                                                                            IkReal x2235 = (cj3 * cj4);
                                                                            IkReal x2236 = (r21 * sj5);
                                                                            IkReal x2237 = ((1.0) * cj5);
                                                                            IkReal x2238 = (sj4 * sj5);
                                                                            IkReal x2239 = (cj5 * sj3);
                                                                            IkReal x2240 = ((0.15) * cj5);
                                                                            IkReal x2241 = ((1.0) * cj0);
                                                                            IkReal x2242 = ((0.15) * sj5);
                                                                            IkReal x2243 = ((0.54) * sj0);
                                                                            IkReal x2244 = (sj3 * sj5);
                                                                            IkReal x2245 = ((1.0) * cj4);
                                                                            IkReal x2246 = ((0.71) * sj1);
                                                                            IkReal x2247 = ((0.54) * cj0);
                                                                            IkReal x2248 = (cj1 * x2233);
                                                                            IkReal x2249 = (sj1 * x2232);
                                                                            IkReal x2250 = (cj1 * x2232);
                                                                            IkReal x2251 = (sj1 * x2233);
                                                                            IkReal x2252 = ((1.0) * sj0 * x2232);
                                                                            evalcond[0] = (((sj4 * x2236)) + x2251 + (((-1.0) * x2250)) + (((-1.0) * r22 * x2245)) + (((-1.0) * r20 * sj4 * x2237)));
                                                                            evalcond[1] = ((((-0.54) * x2251)) + (((0.71) * cj1)) + (((-1.0) * pz)) + (((-1.0) * r21 * x2240)) + (((-1.0) * r20 * x2242)) + (((0.54) * x2250)));
                                                                            evalcond[2] = ((((-1.0) * r00 * sj4 * x2237)) + (((-1.0) * r02 * x2245)) + (((-1.0) * x2241 * x2248)) + (((-1.0) * x2241 * x2249)) + ((r01 * x2238)));
                                                                            evalcond[3] = ((((-1.0) * r10 * sj4 * x2237)) + (((-1.0) * sj0 * x2249)) + (((-1.0) * sj0 * x2248)) + (((-1.0) * r12 * x2245)) + ((r11 * x2238)));
                                                                            evalcond[4] = (((x2247 * x2249)) + ((x2247 * x2248)) + (((-1.0) * r01 * x2240)) + (((-1.0) * r00 * x2242)) + (((-1.0) * px)) + ((cj0 * x2246)));
                                                                            evalcond[5] = (((x2243 * x2249)) + ((x2243 * x2248)) + (((-1.0) * r10 * x2242)) + ((sj0 * x2246)) + (((-1.0) * py)) + (((-1.0) * r11 * x2240)));
                                                                            evalcond[6] = (((x2235 * x2236)) + x2248 + x2249 + ((r22 * x2234)) + ((r21 * x2239)) + ((r20 * x2244)) + (((-1.0) * r20 * x2235 * x2237)));
                                                                            evalcond[7] = (((cj0 * x2251)) + ((r01 * sj5 * x2235)) + ((r02 * x2234)) + ((r00 * x2244)) + (((-1.0) * r00 * x2235 * x2237)) + (((-1.0) * x2241 * x2250)) + ((r01 * x2239)));
                                                                            evalcond[8] = ((((-1.0) * r10 * x2235 * x2237)) + ((r10 * x2244)) + ((r11 * sj5 * x2235)) + (((-1.0) * sj0 * x2250)) + ((sj0 * x2251)) + ((r11 * x2239)) + ((r12 * x2234)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        {
                            IkReal j3array[1], cj3array[1], sj3array[1];
                            bool j3valid[1] = {false};
                            _nj3 = 1;
                            IkReal x2253 = ((1.0) * sj4);
                            IkReal x2254 = (cj0 * cj5);
                            IkReal x2255 = ((1.0) * cj0 * sj5);
                            CheckValue<IkReal> x2256 = IKatan2WithCheck(IkReal(((((-1.0) * r20 * x2255)) + (((-1.0) * r21 * x2254)))), IkReal((((cj4 * r20 * x2254)) + (((-1.0) * cj0 * r22 * x2253)) + (((-1.0) * cj4 * r21 * x2255)))), IKFAST_ATAN2_MAGTHRESH);
                            if (!x2256.valid)
                            {
                                continue;
                            }
                            CheckValue<IkReal> x2257 = IKPowWithIntegerCheck(IKsign(((((-1.0) * cj4 * r02)) + (((-1.0) * cj5 * r00 * x2253)) + ((r01 * sj4 * sj5)))), -1);
                            if (!x2257.valid)
                            {
                                continue;
                            }
                            j3array[0] = ((-1.5707963267949) + (x2256.value) + (((1.5707963267949) * (x2257.value))));
                            sj3array[0] = IKsin(j3array[0]);
                            cj3array[0] = IKcos(j3array[0]);
                            if (j3array[0] > IKPI)
                            {
                                j3array[0] -= IK2PI;
                            }
                            else if (j3array[0] < -IKPI)
                            {
                                j3array[0] += IK2PI;
                            }
                            j3valid[0] = true;
                            for (int ij3 = 0; ij3 < 1; ++ij3)
                            {
                                if (!j3valid[ij3])
                                {
                                    continue;
                                }
                                _ij3[0] = ij3;
                                _ij3[1] = -1;
                                for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                                {
                                    if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                                    {
                                        j3valid[iij3] = false;
                                        _ij3[1] = iij3;
                                        break;
                                    }
                                }
                                j3 = j3array[ij3];
                                cj3 = cj3array[ij3];
                                sj3 = sj3array[ij3];
                                {
                                    IkReal evalcond[3];
                                    IkReal x2258 = IKsin(j3);
                                    IkReal x2259 = IKcos(j3);
                                    IkReal x2260 = ((1.0) * cj5);
                                    IkReal x2261 = (cj4 * x2258);
                                    IkReal x2262 = (sj4 * x2258);
                                    IkReal x2263 = ((1.0) * sj5 * x2259);
                                    evalcond[0] = ((((-1.0) * r21 * x2259 * x2260)) + ((r21 * sj5 * x2261)) + (((-1.0) * r20 * x2263)) + ((r22 * x2262)) + (((-1.0) * r20 * x2260 * x2261)));
                                    evalcond[1] = (cj0 + ((r11 * sj5 * x2261)) + (((-1.0) * r11 * x2259 * x2260)) + (((-1.0) * r10 * x2260 * x2261)) + ((r12 * x2262)) + (((-1.0) * r10 * x2263)));
                                    evalcond[2] = (((r01 * sj5 * x2261)) + (((-1.0) * sj0)) + (((-1.0) * r00 * x2263)) + (((-1.0) * r00 * x2260 * x2261)) + ((r02 * x2262)) + (((-1.0) * r01 * x2259 * x2260)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                    {
                                        continue;
                                    }
                                }

                                {
                                    IkReal j1eval[1];
                                    j1eval[0] = sj0;
                                    if (IKabs(j1eval[0]) < 0.0000010000000000)
                                    {
                                        {
                                            IkReal j1eval[1];
                                            j1eval[0] = cj0;
                                            if (IKabs(j1eval[0]) < 0.0000010000000000)
                                            {
                                                {
                                                    IkReal evalcond[1];
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                        {
                                                            bgotonextstatement = false;
                                                            {
                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1] = {false};
                                                                _nj1 = 1;
                                                                IkReal x2264 = ((0.76056338028169) * cj4);
                                                                IkReal x2265 = ((0.211267605633803) * sj5);
                                                                IkReal x2266 = ((0.211267605633803) * cj5);
                                                                IkReal x2267 = ((0.76056338028169) * sj4 * sj5);
                                                                IkReal x2268 = ((0.76056338028169) * cj5 * sj4);
                                                                if (IKabs((((r11 * x2266)) + ((r10 * x2265)) + ((r10 * x2268)) + (((1.40845070422535) * py)) + ((r12 * x2264)) + (((-1.0) * r11 * x2267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21 * x2266)) + ((r22 * x2264)) + (((-1.0) * r21 * x2267)) + (((1.40845070422535) * pz)) + ((r20 * x2268)) + ((r20 * x2265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11 * x2266)) + ((r10 * x2265)) + ((r10 * x2268)) + (((1.40845070422535) * py)) + ((r12 * x2264)) + (((-1.0) * r11 * x2267)))) + IKsqr((((r21 * x2266)) + ((r22 * x2264)) + (((-1.0) * r21 * x2267)) + (((1.40845070422535) * pz)) + ((r20 * x2268)) + ((r20 * x2265)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                j1array[0] = IKatan2((((r11 * x2266)) + ((r10 * x2265)) + ((r10 * x2268)) + (((1.40845070422535) * py)) + ((r12 * x2264)) + (((-1.0) * r11 * x2267))), (((r21 * x2266)) + ((r22 * x2264)) + (((-1.0) * r21 * x2267)) + (((1.40845070422535) * pz)) + ((r20 * x2268)) + ((r20 * x2265))));
                                                                sj1array[0] = IKsin(j1array[0]);
                                                                cj1array[0] = IKcos(j1array[0]);
                                                                if (j1array[0] > IKPI)
                                                                {
                                                                    j1array[0] -= IK2PI;
                                                                }
                                                                else if (j1array[0] < -IKPI)
                                                                {
                                                                    j1array[0] += IK2PI;
                                                                }
                                                                j1valid[0] = true;
                                                                for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                    if (!j1valid[ij1])
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij1[0] = ij1;
                                                                    _ij1[1] = -1;
                                                                    for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                    {
                                                                        if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                            j1valid[iij1] = false;
                                                                            _ij1[1] = iij1;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j1 = j1array[ij1];
                                                                    cj1 = cj1array[ij1];
                                                                    sj1 = sj1array[ij1];
                                                                    {
                                                                        IkReal evalcond[4];
                                                                        IkReal x2269 = ((1.0) * py);
                                                                        IkReal x2270 = ((0.54) * sj4);
                                                                        IkReal x2271 = (r11 * sj5);
                                                                        IkReal x2272 = (cj5 * r10);
                                                                        IkReal x2273 = (cj5 * r11);
                                                                        IkReal x2274 = ((0.54) * cj4);
                                                                        IkReal x2275 = ((0.15) * sj5);
                                                                        IkReal x2276 = (r21 * sj5);
                                                                        IkReal x2277 = ((0.54) * sj3);
                                                                        IkReal x2278 = (cj5 * r21);
                                                                        IkReal x2279 = (cj5 * r20);
                                                                        IkReal x2280 = ((0.71) * (IKsin(j1)));
                                                                        IkReal x2281 = (r10 * x2275);
                                                                        IkReal x2282 = ((0.15) * x2273);
                                                                        IkReal x2283 = ((0.71) * (IKcos(j1)));
                                                                        IkReal x2284 = ((0.15) * x2278);
                                                                        IkReal x2285 = (r20 * x2275);
                                                                        IkReal x2286 = (x2284 + x2285);
                                                                        IkReal x2287 = (x2281 + x2282 + x2269);
                                                                        evalcond[0] = (x2286 + ((x2270 * x2279)) + (((-1.0) * x2283)) + (((-1.0) * x2270 * x2276)) + ((r22 * x2274)) + pz);
                                                                        evalcond[1] = (x2280 + ((x2270 * x2271)) + (((-1.0) * x2287)) + (((-1.0) * x2270 * x2272)) + (((-1.0) * r12 * x2274)));
                                                                        evalcond[2] = ((((-1.0) * r20 * sj5 * x2277)) + x2280 + ((cj3 * x2274 * x2279)) + (((-1.0) * x2287)) + (((-1.0) * cj3 * x2274 * x2276)) + (((-1.0) * cj3 * r22 * x2270)) + (((-1.0) * x2277 * x2278)));
                                                                        evalcond[3] = (((x2273 * x2277)) + x2283 + ((r10 * sj5 * x2277)) + (((-1.0) * cj3 * x2272 * x2274)) + (((-1.0) * x2286)) + (((-1.0) * pz)) + ((cj3 * r12 * x2270)) + ((cj3 * x2271 * x2274)));
                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                        bool j2valid[1] = {false};
                                                                        _nj2 = 1;
                                                                        IkReal x2288 = (cj4 * r22);
                                                                        IkReal x2289 = ((1.0) * cj1);
                                                                        IkReal x2290 = (cj5 * sj4);
                                                                        IkReal x2291 = (cj4 * r12);
                                                                        IkReal x2292 = ((1.0) * sj1);
                                                                        IkReal x2293 = (r11 * sj4 * sj5);
                                                                        IkReal x2294 = (r21 * sj4 * sj5);
                                                                        if (IKabs(((((-1.0) * x2288 * x2289)) + ((sj1 * x2293)) + (((-1.0) * r10 * x2290 * x2292)) + (((-1.0) * x2291 * x2292)) + ((cj1 * x2294)) + (((-1.0) * r20 * x2289 * x2290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * x2289 * x2291)) + (((-1.0) * x2292 * x2294)) + ((sj1 * x2288)) + ((cj1 * x2293)) + ((r20 * sj1 * x2290)) + (((-1.0) * r10 * x2289 * x2290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x2288 * x2289)) + ((sj1 * x2293)) + (((-1.0) * r10 * x2290 * x2292)) + (((-1.0) * x2291 * x2292)) + ((cj1 * x2294)) + (((-1.0) * r20 * x2289 * x2290)))) + IKsqr(((((-1.0) * x2289 * x2291)) + (((-1.0) * x2292 * x2294)) + ((sj1 * x2288)) + ((cj1 * x2293)) + ((r20 * sj1 * x2290)) + (((-1.0) * r10 * x2289 * x2290)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                        j2array[0] = IKatan2(((((-1.0) * x2288 * x2289)) + ((sj1 * x2293)) + (((-1.0) * r10 * x2290 * x2292)) + (((-1.0) * x2291 * x2292)) + ((cj1 * x2294)) + (((-1.0) * r20 * x2289 * x2290))), ((((-1.0) * x2289 * x2291)) + (((-1.0) * x2292 * x2294)) + ((sj1 * x2288)) + ((cj1 * x2293)) + ((r20 * sj1 * x2290)) + (((-1.0) * r10 * x2289 * x2290))));
                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                        if (j2array[0] > IKPI)
                                                                        {
                                                                            j2array[0] -= IK2PI;
                                                                        }
                                                                        else if (j2array[0] < -IKPI)
                                                                        {
                                                                            j2array[0] += IK2PI;
                                                                        }
                                                                        j2valid[0] = true;
                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                        {
                                                                            if (!j2valid[ij2])
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij2[0] = ij2;
                                                                            _ij2[1] = -1;
                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                            {
                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                    j2valid[iij2] = false;
                                                                                    _ij2[1] = iij2;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            j2 = j2array[ij2];
                                                                            cj2 = cj2array[ij2];
                                                                            sj2 = sj2array[ij2];
                                                                            {
                                                                                IkReal evalcond[6];
                                                                                IkReal x2295 = IKsin(j2);
                                                                                IkReal x2296 = IKcos(j2);
                                                                                IkReal x2297 = (sj4 * sj5);
                                                                                IkReal x2298 = ((1.0) * cj5);
                                                                                IkReal x2299 = (cj3 * cj4);
                                                                                IkReal x2300 = (cj5 * r11);
                                                                                IkReal x2301 = ((0.15) * sj5);
                                                                                IkReal x2302 = (cj3 * sj4);
                                                                                IkReal x2303 = ((1.0) * cj4);
                                                                                IkReal x2304 = (cj5 * r21);
                                                                                IkReal x2305 = (sj3 * sj5);
                                                                                IkReal x2306 = (sj1 * x2296);
                                                                                IkReal x2307 = (cj1 * x2296);
                                                                                IkReal x2308 = (sj5 * x2299);
                                                                                IkReal x2309 = ((0.54) * x2295);
                                                                                IkReal x2310 = (sj1 * x2295);
                                                                                IkReal x2311 = ((1.0) * cj1 * x2295);
                                                                                evalcond[0] = ((((-1.0) * r22 * x2303)) + x2306 + ((r21 * x2297)) + (((-1.0) * r20 * sj4 * x2298)) + (((-1.0) * x2311)));
                                                                                evalcond[1] = ((((-1.0) * x2310)) + (((-1.0) * x2307)) + (((-1.0) * r10 * sj4 * x2298)) + (((-1.0) * r12 * x2303)) + ((r11 * x2297)));
                                                                                evalcond[2] = ((((0.71) * cj1)) + (((-1.0) * r20 * x2301)) + (((-0.54) * x2306)) + (((-1.0) * pz)) + ((cj1 * x2309)) + (((-0.15) * x2304)));
                                                                                evalcond[3] = (((sj1 * x2309)) + (((-1.0) * r10 * x2301)) + (((0.54) * x2307)) + (((-1.0) * py)) + (((-0.15) * x2300)) + (((0.71) * sj1)));
                                                                                evalcond[4] = (x2310 + x2307 + ((r20 * x2305)) + (((-1.0) * r20 * x2298 * x2299)) + ((sj3 * x2304)) + ((r22 * x2302)) + ((r21 * x2308)));
                                                                                evalcond[5] = (((r12 * x2302)) + ((r11 * x2308)) + ((r10 * x2305)) + x2306 + ((sj3 * x2300)) + (((-1.0) * r10 * x2298 * x2299)) + (((-1.0) * x2311)));
                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 1;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 1;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 1;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                        bool bgotonextstatement = true;
                                                        do
                                                        {
                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                            {
                                                                bgotonextstatement = false;
                                                                {
                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                    bool j1valid[1] = {false};
                                                                    _nj1 = 1;
                                                                    IkReal x2312 = ((0.76056338028169) * cj4);
                                                                    IkReal x2313 = ((0.211267605633803) * sj5);
                                                                    IkReal x2314 = ((0.211267605633803) * cj5);
                                                                    IkReal x2315 = ((0.76056338028169) * sj4 * sj5);
                                                                    IkReal x2316 = ((0.76056338028169) * cj5 * sj4);
                                                                    if (IKabs((((r11 * x2315)) + (((-1.0) * r10 * x2313)) + (((-1.0) * r10 * x2316)) + (((-1.40845070422535) * py)) + (((-1.0) * r11 * x2314)) + (((-1.0) * r12 * x2312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21 * x2314)) + ((r22 * x2312)) + (((1.40845070422535) * pz)) + ((r20 * x2316)) + ((r20 * x2313)) + (((-1.0) * r21 * x2315)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11 * x2315)) + (((-1.0) * r10 * x2313)) + (((-1.0) * r10 * x2316)) + (((-1.40845070422535) * py)) + (((-1.0) * r11 * x2314)) + (((-1.0) * r12 * x2312)))) + IKsqr((((r21 * x2314)) + ((r22 * x2312)) + (((1.40845070422535) * pz)) + ((r20 * x2316)) + ((r20 * x2313)) + (((-1.0) * r21 * x2315)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                    j1array[0] = IKatan2((((r11 * x2315)) + (((-1.0) * r10 * x2313)) + (((-1.0) * r10 * x2316)) + (((-1.40845070422535) * py)) + (((-1.0) * r11 * x2314)) + (((-1.0) * r12 * x2312))), (((r21 * x2314)) + ((r22 * x2312)) + (((1.40845070422535) * pz)) + ((r20 * x2316)) + ((r20 * x2313)) + (((-1.0) * r21 * x2315))));
                                                                    sj1array[0] = IKsin(j1array[0]);
                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                    if (j1array[0] > IKPI)
                                                                    {
                                                                        j1array[0] -= IK2PI;
                                                                    }
                                                                    else if (j1array[0] < -IKPI)
                                                                    {
                                                                        j1array[0] += IK2PI;
                                                                    }
                                                                    j1valid[0] = true;
                                                                    for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                    {
                                                                        if (!j1valid[ij1])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij1[0] = ij1;
                                                                        _ij1[1] = -1;
                                                                        for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                        {
                                                                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j1valid[iij1] = false;
                                                                                _ij1[1] = iij1;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j1 = j1array[ij1];
                                                                        cj1 = cj1array[ij1];
                                                                        sj1 = sj1array[ij1];
                                                                        {
                                                                            IkReal evalcond[4];
                                                                            IkReal x2317 = ((0.54) * sj4);
                                                                            IkReal x2318 = (r11 * sj5);
                                                                            IkReal x2319 = (cj5 * r10);
                                                                            IkReal x2320 = (cj5 * r11);
                                                                            IkReal x2321 = ((0.54) * cj4);
                                                                            IkReal x2322 = ((0.15) * sj5);
                                                                            IkReal x2323 = (r21 * sj5);
                                                                            IkReal x2324 = ((0.54) * sj3);
                                                                            IkReal x2325 = (cj5 * r21);
                                                                            IkReal x2326 = (cj5 * r20);
                                                                            IkReal x2327 = ((0.15) * x2325);
                                                                            IkReal x2328 = (r20 * x2322);
                                                                            IkReal x2329 = ((0.71) * (IKcos(j1)));
                                                                            IkReal x2330 = ((0.71) * (IKsin(j1)));
                                                                            IkReal x2331 = (r10 * x2322);
                                                                            IkReal x2332 = ((0.15) * x2320);
                                                                            IkReal x2333 = (x2327 + x2328 + pz);
                                                                            IkReal x2334 = (x2330 + x2331 + x2332);
                                                                            evalcond[0] = (((x2317 * x2326)) + x2333 + ((r22 * x2321)) + (((-1.0) * x2317 * x2323)) + (((-1.0) * x2329)));
                                                                            evalcond[1] = (((x2317 * x2319)) + x2334 + ((r12 * x2321)) + py + (((-1.0) * x2317 * x2318)));
                                                                            evalcond[2] = (((cj3 * x2318 * x2321)) + (((-1.0) * cj3 * x2319 * x2321)) + x2333 + ((cj3 * r12 * x2317)) + ((x2320 * x2324)) + ((r10 * sj5 * x2324)) + (((-1.0) * x2329)));
                                                                            evalcond[3] = ((((-1.0) * x2334)) + (((-1.0) * py)) + ((cj3 * x2321 * x2323)) + (((-1.0) * cj3 * x2321 * x2326)) + ((x2324 * x2325)) + ((cj3 * r22 * x2317)) + ((r20 * sj5 * x2324)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                            bool j2valid[1] = {false};
                                                                            _nj2 = 1;
                                                                            IkReal x2335 = (cj4 * r22);
                                                                            IkReal x2336 = ((1.0) * cj1);
                                                                            IkReal x2337 = (cj4 * r12);
                                                                            IkReal x2338 = (sj1 * sj4);
                                                                            IkReal x2339 = (cj5 * r10);
                                                                            IkReal x2340 = (r11 * sj5);
                                                                            IkReal x2341 = (cj1 * sj4);
                                                                            IkReal x2342 = (r21 * sj5);
                                                                            IkReal x2343 = (cj5 * r20);
                                                                            if (IKabs(((((-1.0) * sj4 * x2336 * x2343)) + ((x2341 * x2342)) + ((sj1 * x2337)) + (((-1.0) * x2335 * x2336)) + (((-1.0) * x2338 * x2340)) + ((x2338 * x2339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj4 * x2336 * x2340)) + ((cj1 * x2337)) + ((sj1 * x2335)) + ((x2338 * x2343)) + ((x2339 * x2341)) + (((-1.0) * x2338 * x2342)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * sj4 * x2336 * x2343)) + ((x2341 * x2342)) + ((sj1 * x2337)) + (((-1.0) * x2335 * x2336)) + (((-1.0) * x2338 * x2340)) + ((x2338 * x2339)))) + IKsqr(((((-1.0) * sj4 * x2336 * x2340)) + ((cj1 * x2337)) + ((sj1 * x2335)) + ((x2338 * x2343)) + ((x2339 * x2341)) + (((-1.0) * x2338 * x2342)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                continue;
                                                                            j2array[0] = IKatan2(((((-1.0) * sj4 * x2336 * x2343)) + ((x2341 * x2342)) + ((sj1 * x2337)) + (((-1.0) * x2335 * x2336)) + (((-1.0) * x2338 * x2340)) + ((x2338 * x2339))), ((((-1.0) * sj4 * x2336 * x2340)) + ((cj1 * x2337)) + ((sj1 * x2335)) + ((x2338 * x2343)) + ((x2339 * x2341)) + (((-1.0) * x2338 * x2342))));
                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                            if (j2array[0] > IKPI)
                                                                            {
                                                                                j2array[0] -= IK2PI;
                                                                            }
                                                                            else if (j2array[0] < -IKPI)
                                                                            {
                                                                                j2array[0] += IK2PI;
                                                                            }
                                                                            j2valid[0] = true;
                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                            {
                                                                                if (!j2valid[ij2])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij2[0] = ij2;
                                                                                _ij2[1] = -1;
                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                {
                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j2valid[iij2] = false;
                                                                                        _ij2[1] = iij2;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j2 = j2array[ij2];
                                                                                cj2 = cj2array[ij2];
                                                                                sj2 = sj2array[ij2];
                                                                                {
                                                                                    IkReal evalcond[6];
                                                                                    IkReal x2344 = IKcos(j2);
                                                                                    IkReal x2345 = IKsin(j2);
                                                                                    IkReal x2346 = (sj4 * sj5);
                                                                                    IkReal x2347 = ((1.0) * cj5);
                                                                                    IkReal x2348 = (cj3 * cj4);
                                                                                    IkReal x2349 = (cj5 * r11);
                                                                                    IkReal x2350 = ((0.15) * sj5);
                                                                                    IkReal x2351 = (cj3 * sj4);
                                                                                    IkReal x2352 = ((1.0) * cj4);
                                                                                    IkReal x2353 = (cj5 * r21);
                                                                                    IkReal x2354 = (sj3 * sj5);
                                                                                    IkReal x2355 = (cj1 * x2344);
                                                                                    IkReal x2356 = (sj1 * x2345);
                                                                                    IkReal x2357 = (sj5 * x2348);
                                                                                    IkReal x2358 = (cj1 * x2345);
                                                                                    IkReal x2359 = (sj1 * x2344);
                                                                                    IkReal x2360 = (x2356 + x2355);
                                                                                    evalcond[0] = (x2360 + ((r11 * x2346)) + (((-1.0) * r10 * sj4 * x2347)) + (((-1.0) * r12 * x2352)));
                                                                                    evalcond[1] = (x2359 + (((-1.0) * x2358)) + (((-1.0) * r22 * x2352)) + (((-1.0) * r20 * sj4 * x2347)) + ((r21 * x2346)));
                                                                                    evalcond[2] = ((((0.71) * cj1)) + (((-1.0) * r20 * x2350)) + (((-0.15) * x2353)) + (((-0.54) * x2359)) + (((-1.0) * pz)) + (((0.54) * x2358)));
                                                                                    evalcond[3] = ((((-0.15) * x2349)) + (((-0.54) * x2355)) + (((-0.54) * x2356)) + (((-0.71) * sj1)) + (((-1.0) * py)) + (((-1.0) * r10 * x2350)));
                                                                                    evalcond[4] = ((((-1.0) * r20 * x2347 * x2348)) + x2360 + ((r22 * x2351)) + ((r20 * x2354)) + ((sj3 * x2353)) + ((r21 * x2357)));
                                                                                    evalcond[5] = (((r10 * x2354)) + x2358 + (((-1.0) * x2359)) + ((r12 * x2351)) + ((r11 * x2357)) + (((-1.0) * r10 * x2347 * x2348)) + ((sj3 * x2349)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 1;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } while (0);
                                                        if (bgotonextstatement)
                                                        {
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                        bool j1valid[1] = {false};
                                                                        _nj1 = 1;
                                                                        IkReal x2361 = ((0.76056338028169) * cj4);
                                                                        IkReal x2362 = ((0.211267605633803) * sj5);
                                                                        IkReal x2363 = ((0.211267605633803) * cj5);
                                                                        IkReal x2364 = ((0.76056338028169) * cj5 * sj4);
                                                                        IkReal x2365 = ((0.76056338028169) * sj4 * sj5);
                                                                        if (IKabs((((r02 * x2361)) + (((-1.0) * r01 * x2365)) + (((1.40845070422535) * px)) + ((r01 * x2363)) + ((r00 * x2362)) + ((r00 * x2364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * x2364)) + ((r20 * x2362)) + (((-1.0) * r21 * x2365)) + ((r22 * x2361)) + (((1.40845070422535) * pz)) + ((r21 * x2363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02 * x2361)) + (((-1.0) * r01 * x2365)) + (((1.40845070422535) * px)) + ((r01 * x2363)) + ((r00 * x2362)) + ((r00 * x2364)))) + IKsqr((((r20 * x2364)) + ((r20 * x2362)) + (((-1.0) * r21 * x2365)) + ((r22 * x2361)) + (((1.40845070422535) * pz)) + ((r21 * x2363)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                        j1array[0] = IKatan2((((r02 * x2361)) + (((-1.0) * r01 * x2365)) + (((1.40845070422535) * px)) + ((r01 * x2363)) + ((r00 * x2362)) + ((r00 * x2364))), (((r20 * x2364)) + ((r20 * x2362)) + (((-1.0) * r21 * x2365)) + ((r22 * x2361)) + (((1.40845070422535) * pz)) + ((r21 * x2363))));
                                                                        sj1array[0] = IKsin(j1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        if (j1array[0] > IKPI)
                                                                        {
                                                                            j1array[0] -= IK2PI;
                                                                        }
                                                                        else if (j1array[0] < -IKPI)
                                                                        {
                                                                            j1array[0] += IK2PI;
                                                                        }
                                                                        j1valid[0] = true;
                                                                        for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                        {
                                                                            if (!j1valid[ij1])
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij1[0] = ij1;
                                                                            _ij1[1] = -1;
                                                                            for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                            {
                                                                                if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                    j1valid[iij1] = false;
                                                                                    _ij1[1] = iij1;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            j1 = j1array[ij1];
                                                                            cj1 = cj1array[ij1];
                                                                            sj1 = sj1array[ij1];
                                                                            {
                                                                                IkReal evalcond[4];
                                                                                IkReal x2366 = ((1.0) * px);
                                                                                IkReal x2367 = (cj5 * r00);
                                                                                IkReal x2368 = (r01 * sj5);
                                                                                IkReal x2369 = ((0.54) * sj4);
                                                                                IkReal x2370 = ((0.15) * sj5);
                                                                                IkReal x2371 = (r21 * sj5);
                                                                                IkReal x2372 = ((0.54) * cj4);
                                                                                IkReal x2373 = ((0.15) * cj5);
                                                                                IkReal x2374 = (cj5 * r20);
                                                                                IkReal x2375 = ((0.54) * sj3);
                                                                                IkReal x2376 = ((0.71) * (IKsin(j1)));
                                                                                IkReal x2377 = (r00 * x2370);
                                                                                IkReal x2378 = (r01 * x2373);
                                                                                IkReal x2379 = ((0.71) * (IKcos(j1)));
                                                                                IkReal x2380 = (r21 * x2373);
                                                                                IkReal x2381 = (r20 * x2370);
                                                                                IkReal x2382 = (cj3 * x2372);
                                                                                IkReal x2383 = (x2381 + x2380);
                                                                                IkReal x2384 = (x2378 + x2377 + x2366);
                                                                                evalcond[0] = (x2383 + (((-1.0) * x2379)) + ((r22 * x2372)) + (((-1.0) * x2369 * x2371)) + pz + ((x2369 * x2374)));
                                                                                evalcond[1] = ((((-1.0) * r02 * x2372)) + x2376 + (((-1.0) * x2384)) + (((-1.0) * x2367 * x2369)) + ((x2368 * x2369)));
                                                                                evalcond[2] = (x2376 + (((-1.0) * cj3 * r22 * x2369)) + (((-1.0) * x2384)) + ((x2374 * x2382)) + (((-1.0) * cj5 * r21 * x2375)) + (((-1.0) * r20 * sj5 * x2375)) + (((-1.0) * x2371 * x2382)));
                                                                                evalcond[3] = (((cj3 * r02 * x2369)) + x2379 + (((-1.0) * x2383)) + ((cj5 * r01 * x2375)) + (((-1.0) * pz)) + (((-1.0) * x2367 * x2382)) + ((r00 * sj5 * x2375)) + ((x2368 * x2382)));
                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                bool j2valid[1] = {false};
                                                                                _nj2 = 1;
                                                                                IkReal x2385 = (sj1 * sj4);
                                                                                IkReal x2386 = (r01 * sj5);
                                                                                IkReal x2387 = (cj4 * r22);
                                                                                IkReal x2388 = ((1.0) * cj1);
                                                                                IkReal x2389 = (cj5 * r00);
                                                                                IkReal x2390 = (cj1 * sj4);
                                                                                IkReal x2391 = (cj4 * r02);
                                                                                IkReal x2392 = (r21 * sj5);
                                                                                IkReal x2393 = (cj5 * r20);
                                                                                if (IKabs(((((-1.0) * sj1 * x2391)) + ((x2385 * x2386)) + (((-1.0) * sj4 * x2388 * x2393)) + ((x2390 * x2392)) + (((-1.0) * x2387 * x2388)) + (((-1.0) * x2385 * x2389)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2385 * x2393)) + (((-1.0) * sj4 * x2388 * x2389)) + (((-1.0) * x2388 * x2391)) + (((-1.0) * x2385 * x2392)) + ((x2386 * x2390)) + ((sj1 * x2387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * sj1 * x2391)) + ((x2385 * x2386)) + (((-1.0) * sj4 * x2388 * x2393)) + ((x2390 * x2392)) + (((-1.0) * x2387 * x2388)) + (((-1.0) * x2385 * x2389)))) + IKsqr((((x2385 * x2393)) + (((-1.0) * sj4 * x2388 * x2389)) + (((-1.0) * x2388 * x2391)) + (((-1.0) * x2385 * x2392)) + ((x2386 * x2390)) + ((sj1 * x2387)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j2array[0] = IKatan2(((((-1.0) * sj1 * x2391)) + ((x2385 * x2386)) + (((-1.0) * sj4 * x2388 * x2393)) + ((x2390 * x2392)) + (((-1.0) * x2387 * x2388)) + (((-1.0) * x2385 * x2389))), (((x2385 * x2393)) + (((-1.0) * sj4 * x2388 * x2389)) + (((-1.0) * x2388 * x2391)) + (((-1.0) * x2385 * x2392)) + ((x2386 * x2390)) + ((sj1 * x2387))));
                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                if (j2array[0] > IKPI)
                                                                                {
                                                                                    j2array[0] -= IK2PI;
                                                                                }
                                                                                else if (j2array[0] < -IKPI)
                                                                                {
                                                                                    j2array[0] += IK2PI;
                                                                                }
                                                                                j2valid[0] = true;
                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                {
                                                                                    if (!j2valid[ij2])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij2[0] = ij2;
                                                                                    _ij2[1] = -1;
                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                    {
                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j2valid[iij2] = false;
                                                                                            _ij2[1] = iij2;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j2 = j2array[ij2];
                                                                                    cj2 = cj2array[ij2];
                                                                                    sj2 = sj2array[ij2];
                                                                                    {
                                                                                        IkReal evalcond[6];
                                                                                        IkReal x2394 = IKsin(j2);
                                                                                        IkReal x2395 = IKcos(j2);
                                                                                        IkReal x2396 = (cj3 * sj4);
                                                                                        IkReal x2397 = (cj3 * cj4);
                                                                                        IkReal x2398 = (r21 * sj5);
                                                                                        IkReal x2399 = ((1.0) * cj5);
                                                                                        IkReal x2400 = (cj5 * r01);
                                                                                        IkReal x2401 = ((0.15) * sj5);
                                                                                        IkReal x2402 = (r01 * sj5);
                                                                                        IkReal x2403 = (sj3 * sj5);
                                                                                        IkReal x2404 = ((1.0) * cj4);
                                                                                        IkReal x2405 = (cj5 * r21);
                                                                                        IkReal x2406 = (sj1 * x2395);
                                                                                        IkReal x2407 = (cj1 * x2395);
                                                                                        IkReal x2408 = ((0.54) * x2394);
                                                                                        IkReal x2409 = (sj1 * x2394);
                                                                                        IkReal x2410 = ((1.0) * cj1 * x2394);
                                                                                        evalcond[0] = (((sj4 * x2398)) + x2406 + (((-1.0) * x2410)) + (((-1.0) * r22 * x2404)) + (((-1.0) * r20 * sj4 * x2399)));
                                                                                        evalcond[1] = ((((-1.0) * x2409)) + (((-1.0) * x2407)) + (((-1.0) * r00 * sj4 * x2399)) + (((-1.0) * r02 * x2404)) + ((sj4 * x2402)));
                                                                                        evalcond[2] = ((((0.71) * cj1)) + (((-0.54) * x2406)) + (((-0.15) * x2405)) + (((-1.0) * pz)) + ((cj1 * x2408)) + (((-1.0) * r20 * x2401)));
                                                                                        evalcond[3] = ((((-0.15) * x2400)) + (((-1.0) * r00 * x2401)) + (((-1.0) * px)) + (((0.71) * sj1)) + (((0.54) * x2407)) + ((sj1 * x2408)));
                                                                                        evalcond[4] = ((((-1.0) * r20 * x2397 * x2399)) + x2407 + x2409 + ((r20 * x2403)) + ((sj3 * x2405)) + ((r22 * x2396)) + ((x2397 * x2398)));
                                                                                        evalcond[5] = (x2406 + (((-1.0) * r00 * x2397 * x2399)) + ((r00 * x2403)) + ((r02 * x2396)) + ((sj3 * x2400)) + (((-1.0) * x2410)) + ((x2397 * x2402)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 1;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 1;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 1;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            } while (0);
                                                            if (bgotonextstatement)
                                                            {
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                    {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1] = {false};
                                                                            _nj1 = 1;
                                                                            IkReal x2411 = ((0.76056338028169) * cj4);
                                                                            IkReal x2412 = ((0.211267605633803) * sj5);
                                                                            IkReal x2413 = ((0.211267605633803) * cj5);
                                                                            IkReal x2414 = ((0.76056338028169) * cj5 * sj4);
                                                                            IkReal x2415 = ((0.76056338028169) * sj4 * sj5);
                                                                            if (IKabs(((((-1.0) * r00 * x2412)) + (((-1.0) * r00 * x2414)) + ((r01 * x2415)) + (((-1.0) * r02 * x2411)) + (((-1.40845070422535) * px)) + (((-1.0) * r01 * x2413)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22 * x2411)) + ((r21 * x2413)) + ((r20 * x2414)) + ((r20 * x2412)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x2415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r00 * x2412)) + (((-1.0) * r00 * x2414)) + ((r01 * x2415)) + (((-1.0) * r02 * x2411)) + (((-1.40845070422535) * px)) + (((-1.0) * r01 * x2413)))) + IKsqr((((r22 * x2411)) + ((r21 * x2413)) + ((r20 * x2414)) + ((r20 * x2412)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x2415)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                continue;
                                                                            j1array[0] = IKatan2(((((-1.0) * r00 * x2412)) + (((-1.0) * r00 * x2414)) + ((r01 * x2415)) + (((-1.0) * r02 * x2411)) + (((-1.40845070422535) * px)) + (((-1.0) * r01 * x2413))), (((r22 * x2411)) + ((r21 * x2413)) + ((r20 * x2414)) + ((r20 * x2412)) + (((1.40845070422535) * pz)) + (((-1.0) * r21 * x2415))));
                                                                            sj1array[0] = IKsin(j1array[0]);
                                                                            cj1array[0] = IKcos(j1array[0]);
                                                                            if (j1array[0] > IKPI)
                                                                            {
                                                                                j1array[0] -= IK2PI;
                                                                            }
                                                                            else if (j1array[0] < -IKPI)
                                                                            {
                                                                                j1array[0] += IK2PI;
                                                                            }
                                                                            j1valid[0] = true;
                                                                            for (int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                                if (!j1valid[ij1])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij1[0] = ij1;
                                                                                _ij1[1] = -1;
                                                                                for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                                                {
                                                                                    if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j1valid[iij1] = false;
                                                                                        _ij1[1] = iij1;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j1 = j1array[ij1];
                                                                                cj1 = cj1array[ij1];
                                                                                sj1 = sj1array[ij1];
                                                                                {
                                                                                    IkReal evalcond[4];
                                                                                    IkReal x2416 = (cj5 * r00);
                                                                                    IkReal x2417 = (r01 * sj5);
                                                                                    IkReal x2418 = ((0.54) * sj4);
                                                                                    IkReal x2419 = ((0.15) * sj5);
                                                                                    IkReal x2420 = (r21 * sj5);
                                                                                    IkReal x2421 = ((0.54) * cj4);
                                                                                    IkReal x2422 = ((0.15) * cj5);
                                                                                    IkReal x2423 = (cj5 * r20);
                                                                                    IkReal x2424 = ((0.54) * sj3);
                                                                                    IkReal x2425 = (r21 * x2422);
                                                                                    IkReal x2426 = (r20 * x2419);
                                                                                    IkReal x2427 = ((0.71) * (IKcos(j1)));
                                                                                    IkReal x2428 = (r00 * x2419);
                                                                                    IkReal x2429 = ((0.71) * (IKsin(j1)));
                                                                                    IkReal x2430 = (r01 * x2422);
                                                                                    IkReal x2431 = (cj3 * x2421);
                                                                                    IkReal x2432 = (x2425 + x2426 + pz);
                                                                                    IkReal x2433 = (x2430 + x2428 + x2429);
                                                                                    evalcond[0] = (((x2418 * x2423)) + ((r22 * x2421)) + x2432 + (((-1.0) * x2418 * x2420)) + (((-1.0) * x2427)));
                                                                                    evalcond[1] = (x2433 + (((-1.0) * x2417 * x2418)) + ((x2416 * x2418)) + px + ((r02 * x2421)));
                                                                                    evalcond[2] = ((((-1.0) * x2416 * x2431)) + x2432 + ((r00 * sj5 * x2424)) + ((x2417 * x2431)) + (((-1.0) * x2427)) + ((cj5 * r01 * x2424)) + ((cj3 * r02 * x2418)));
                                                                                    evalcond[3] = ((((-1.0) * x2433)) + ((cj3 * r22 * x2418)) + (((-1.0) * px)) + ((cj5 * r21 * x2424)) + (((-1.0) * x2423 * x2431)) + ((x2420 * x2431)) + ((r20 * sj5 * x2424)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    IkReal x2434 = (cj4 * r22);
                                                                                    IkReal x2435 = ((1.0) * cj1);
                                                                                    IkReal x2436 = (cj4 * r02);
                                                                                    IkReal x2437 = (sj4 * sj5);
                                                                                    IkReal x2438 = ((1.0) * sj1);
                                                                                    IkReal x2439 = (cj5 * sj4);
                                                                                    IkReal x2440 = (sj1 * x2439);
                                                                                    if (IKabs(((((-1.0) * r01 * x2437 * x2438)) + (((-1.0) * x2434 * x2435)) + ((r00 * x2440)) + ((cj1 * r21 * x2437)) + (((-1.0) * r20 * x2435 * x2439)) + ((sj1 * x2436)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1 * x2436)) + (((-1.0) * r01 * x2435 * x2437)) + (((-1.0) * r21 * x2437 * x2438)) + ((cj1 * r00 * x2439)) + ((sj1 * x2434)) + ((r20 * x2440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r01 * x2437 * x2438)) + (((-1.0) * x2434 * x2435)) + ((r00 * x2440)) + ((cj1 * r21 * x2437)) + (((-1.0) * r20 * x2435 * x2439)) + ((sj1 * x2436)))) + IKsqr((((cj1 * x2436)) + (((-1.0) * r01 * x2435 * x2437)) + (((-1.0) * r21 * x2437 * x2438)) + ((cj1 * r00 * x2439)) + ((sj1 * x2434)) + ((r20 * x2440)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j2array[0] = IKatan2(((((-1.0) * r01 * x2437 * x2438)) + (((-1.0) * x2434 * x2435)) + ((r00 * x2440)) + ((cj1 * r21 * x2437)) + (((-1.0) * r20 * x2435 * x2439)) + ((sj1 * x2436))), (((cj1 * x2436)) + (((-1.0) * r01 * x2435 * x2437)) + (((-1.0) * r21 * x2437 * x2438)) + ((cj1 * r00 * x2439)) + ((sj1 * x2434)) + ((r20 * x2440))));
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI)
                                                                                    {
                                                                                        j2array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j2array[0] < -IKPI)
                                                                                    {
                                                                                        j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                    {
                                                                                        if (!j2valid[ij2])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                        {
                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j2valid[iij2] = false;
                                                                                                _ij2[1] = iij2;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                            IkReal evalcond[6];
                                                                                            IkReal x2441 = IKcos(j2);
                                                                                            IkReal x2442 = IKsin(j2);
                                                                                            IkReal x2443 = (cj3 * sj4);
                                                                                            IkReal x2444 = (cj3 * cj4);
                                                                                            IkReal x2445 = (r21 * sj5);
                                                                                            IkReal x2446 = ((1.0) * cj5);
                                                                                            IkReal x2447 = (cj5 * r01);
                                                                                            IkReal x2448 = ((0.15) * sj5);
                                                                                            IkReal x2449 = (r01 * sj5);
                                                                                            IkReal x2450 = (sj3 * sj5);
                                                                                            IkReal x2451 = ((1.0) * cj4);
                                                                                            IkReal x2452 = (cj5 * r21);
                                                                                            IkReal x2453 = (cj1 * x2441);
                                                                                            IkReal x2454 = (sj1 * x2442);
                                                                                            IkReal x2455 = (cj1 * x2442);
                                                                                            IkReal x2456 = (sj1 * x2441);
                                                                                            IkReal x2457 = (x2454 + x2453);
                                                                                            evalcond[0] = (x2457 + ((sj4 * x2449)) + (((-1.0) * r02 * x2451)) + (((-1.0) * r00 * sj4 * x2446)));
                                                                                            evalcond[1] = (x2456 + (((-1.0) * r20 * sj4 * x2446)) + ((sj4 * x2445)) + (((-1.0) * x2455)) + (((-1.0) * r22 * x2451)));
                                                                                            evalcond[2] = ((((0.71) * cj1)) + (((-1.0) * r20 * x2448)) + (((0.54) * x2455)) + (((-1.0) * pz)) + (((-0.54) * x2456)) + (((-0.15) * x2452)));
                                                                                            evalcond[3] = ((((-0.71) * sj1)) + (((-1.0) * px)) + (((-0.54) * x2453)) + (((-0.54) * x2454)) + (((-1.0) * r00 * x2448)) + (((-0.15) * x2447)));
                                                                                            evalcond[4] = (x2457 + ((sj3 * x2452)) + ((r22 * x2443)) + ((x2444 * x2445)) + ((r20 * x2450)) + (((-1.0) * r20 * x2444 * x2446)));
                                                                                            evalcond[5] = ((((-1.0) * r00 * x2444 * x2446)) + ((sj3 * x2447)) + ((r02 * x2443)) + x2455 + ((r00 * x2450)) + (((-1.0) * x2456)) + ((x2444 * x2449)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        if (1)
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            continue; // branch miss [j1, j2]
                                                                        }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                {
                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1] = {false};
                                                    _nj1 = 1;
                                                    IkReal x2458 = (cj0 * r01);
                                                    IkReal x2459 = (sj4 * sj5);
                                                    IkReal x2460 = ((0.54) * cj0);
                                                    IkReal x2461 = (cj5 * sj4);
                                                    CheckValue<IkReal> x2462 = IKPowWithIntegerCheck(cj0, -2);
                                                    if (!x2462.valid)
                                                    {
                                                        continue;
                                                    }
                                                    if (IKabs(((-1.40845070422535) * (x2462.value) * (((((0.54) * x2458 * x2459)) + (((-1.0) * r00 * x2460 * x2461)) + (((-0.15) * cj0 * r00 * sj5)) + (((-1.0) * cj4 * r02 * x2460)) + (((-0.15) * cj5 * x2458)) + (((-1.0) * cj0 * px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.76056338028169) * r20 * x2461)) + (((0.211267605633803) * r20 * sj5)) + (((1.40845070422535) * pz)) + (((-0.76056338028169) * r21 * x2459)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535) * (x2462.value) * (((((0.54) * x2458 * x2459)) + (((-1.0) * r00 * x2460 * x2461)) + (((-0.15) * cj0 * r00 * sj5)) + (((-1.0) * cj4 * r02 * x2460)) + (((-0.15) * cj5 * x2458)) + (((-1.0) * cj0 * px)))))) + IKsqr(((((0.76056338028169) * r20 * x2461)) + (((0.211267605633803) * r20 * sj5)) + (((1.40845070422535) * pz)) + (((-0.76056338028169) * r21 * x2459)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                        continue;
                                                    j1array[0] = IKatan2(((-1.40845070422535) * (x2462.value) * (((((0.54) * x2458 * x2459)) + (((-1.0) * r00 * x2460 * x2461)) + (((-0.15) * cj0 * r00 * sj5)) + (((-1.0) * cj4 * r02 * x2460)) + (((-0.15) * cj5 * x2458)) + (((-1.0) * cj0 * px))))), ((((0.76056338028169) * r20 * x2461)) + (((0.211267605633803) * r20 * sj5)) + (((1.40845070422535) * pz)) + (((-0.76056338028169) * r21 * x2459)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21))));
                                                    sj1array[0] = IKsin(j1array[0]);
                                                    cj1array[0] = IKcos(j1array[0]);
                                                    if (j1array[0] > IKPI)
                                                    {
                                                        j1array[0] -= IK2PI;
                                                    }
                                                    else if (j1array[0] < -IKPI)
                                                    {
                                                        j1array[0] += IK2PI;
                                                    }
                                                    j1valid[0] = true;
                                                    for (int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                        if (!j1valid[ij1])
                                                        {
                                                            continue;
                                                        }
                                                        _ij1[0] = ij1;
                                                        _ij1[1] = -1;
                                                        for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                        {
                                                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                            {
                                                                j1valid[iij1] = false;
                                                                _ij1[1] = iij1;
                                                                break;
                                                            }
                                                        }
                                                        j1 = j1array[ij1];
                                                        cj1 = cj1array[ij1];
                                                        sj1 = sj1array[ij1];
                                                        {
                                                            IkReal evalcond[9];
                                                            IkReal x2463 = IKsin(j1);
                                                            IkReal x2464 = IKcos(j1);
                                                            IkReal x2465 = ((0.54) * cj4);
                                                            IkReal x2466 = (cj5 * r00);
                                                            IkReal x2467 = ((1.0) * py);
                                                            IkReal x2468 = ((0.15) * sj0);
                                                            IkReal x2469 = (r10 * sj5);
                                                            IkReal x2470 = ((1.0) * px);
                                                            IkReal x2471 = (cj0 * cj5);
                                                            IkReal x2472 = ((0.15) * r01);
                                                            IkReal x2473 = (cj5 * r21);
                                                            IkReal x2474 = ((0.54) * sj4);
                                                            IkReal x2475 = (cj3 * sj5);
                                                            IkReal x2476 = ((0.15) * r11);
                                                            IkReal x2477 = (r00 * sj5);
                                                            IkReal x2478 = (r01 * sj5);
                                                            IkReal x2479 = ((0.54) * sj3);
                                                            IkReal x2480 = (r20 * sj5);
                                                            IkReal x2481 = (r11 * sj5);
                                                            IkReal x2482 = (cj5 * r11);
                                                            IkReal x2483 = (cj5 * r10);
                                                            IkReal x2484 = (cj3 * r22);
                                                            IkReal x2485 = ((0.15) * cj0);
                                                            IkReal x2486 = (cj5 * r20);
                                                            IkReal x2487 = ((1.0) * pz);
                                                            IkReal x2488 = (cj5 * r01);
                                                            IkReal x2489 = ((0.71) * x2463);
                                                            IkReal x2490 = ((0.71) * x2464);
                                                            IkReal x2491 = (cj0 * sj0 * x2489);
                                                            evalcond[0] = ((((0.15) * x2473)) + (((-1.0) * x2490)) + ((x2474 * x2486)) + (((-1.0) * r21 * sj5 * x2474)) + pz + ((r22 * x2465)) + (((0.15) * x2480)));
                                                            evalcond[1] = ((((-1.0) * r12 * sj0 * x2465)) + ((sj0 * x2474 * x2481)) + (((-1.0) * x2468 * x2482)) + (((-1.0) * x2468 * x2469)) + (((-1.0) * sj0 * x2474 * x2483)) + ((x2489 * (sj0 * sj0))) + (((-1.0) * sj0 * x2467)));
                                                            evalcond[2] = ((((-1.0) * cj0 * r02 * x2465)) + (((-1.0) * cj0 * x2470)) + (((-1.0) * x2477 * x2485)) + ((x2489 * (cj0 * cj0))) + ((cj0 * x2474 * x2478)) + (((-1.0) * x2471 * x2472)) + (((-1.0) * cj0 * x2466 * x2474)));
                                                            evalcond[3] = (((cj3 * r12 * x2474)) + ((r11 * x2465 * x2475)) + (((-1.0) * x2468 * x2480)) + (((-1.0) * sj0 * x2487)) + (((-1.0) * cj3 * x2465 * x2483)) + (((-1.0) * x2468 * x2473)) + ((x2469 * x2479)) + ((x2479 * x2482)) + ((sj0 * x2490)));
                                                            evalcond[4] = (((cj3 * r02 * x2474)) + (((-1.0) * cj0 * x2487)) + (((-1.0) * cj3 * x2465 * x2466)) + ((r01 * x2465 * x2475)) + (((-0.15) * r21 * x2471)) + (((-1.0) * x2480 * x2485)) + ((x2477 * x2479)) + ((cj0 * x2490)) + ((x2479 * x2488)));
                                                            evalcond[5] = (((cj3 * sj0 * x2465 * x2486)) + ((sj0 * x2489)) + (((-1.0) * sj0 * x2473 * x2479)) + (((-1.0) * sj0 * x2474 * x2484)) + (((-1.0) * cj5 * x2476)) + (((-1.0) * r21 * sj0 * x2465 * x2475)) + (((-1.0) * x2467)) + (((-0.15) * x2469)) + (((-1.0) * sj0 * x2479 * x2480)));
                                                            evalcond[6] = ((((-0.15) * x2477)) + (((-1.0) * cj0 * x2474 * x2484)) + (((-1.0) * cj0 * x2479 * x2480)) + (((-1.0) * r21 * x2471 * x2479)) + (((-1.0) * x2470)) + (((-1.0) * cj5 * x2472)) + ((cj3 * r20 * x2465 * x2471)) + ((cj0 * x2489)) + (((-1.0) * cj0 * r21 * x2465 * x2475)));
                                                            evalcond[7] = (x2491 + (((-1.0) * x2468 * x2488)) + ((cj0 * x2474 * x2481)) + (((-1.0) * sj0 * x2470)) + (((-1.0) * x2468 * x2477)) + (((-1.0) * cj0 * r12 * x2465)) + (((-1.0) * r10 * x2471 * x2474)));
                                                            evalcond[8] = (x2491 + (((-1.0) * cj0 * x2467)) + (((-1.0) * x2469 * x2485)) + (((-1.0) * x2471 * x2476)) + ((sj0 * x2474 * x2478)) + (((-1.0) * sj0 * x2466 * x2474)) + (((-1.0) * r02 * sj0 * x2465)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                            {
                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j2eval[2];
                                                            j2eval[0] = cj0;
                                                            j2eval[1] = IKsign(cj0);
                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                            {
                                                                {
                                                                    IkReal j2eval[2];
                                                                    j2eval[0] = sj0;
                                                                    j2eval[1] = IKsign(sj0);
                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                    {
                                                                        {
                                                                            IkReal evalcond[1];
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                        bool j2valid[1] = {false};
                                                                                        _nj2 = 1;
                                                                                        IkReal x2492 = (sj1 * sj4);
                                                                                        IkReal x2493 = (r01 * sj5);
                                                                                        IkReal x2494 = (cj4 * r22);
                                                                                        IkReal x2495 = ((1.0) * cj1);
                                                                                        IkReal x2496 = (cj5 * r00);
                                                                                        IkReal x2497 = (cj1 * sj4);
                                                                                        IkReal x2498 = (cj4 * r02);
                                                                                        IkReal x2499 = (r21 * sj5);
                                                                                        IkReal x2500 = (cj5 * r20);
                                                                                        if (IKabs((((x2492 * x2493)) + (((-1.0) * x2492 * x2496)) + (((-1.0) * sj4 * x2495 * x2500)) + ((x2497 * x2499)) + (((-1.0) * x2494 * x2495)) + (((-1.0) * sj1 * x2498)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1 * x2494)) + (((-1.0) * x2492 * x2499)) + (((-1.0) * x2495 * x2498)) + ((x2492 * x2500)) + ((x2493 * x2497)) + (((-1.0) * sj4 * x2495 * x2496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2492 * x2493)) + (((-1.0) * x2492 * x2496)) + (((-1.0) * sj4 * x2495 * x2500)) + ((x2497 * x2499)) + (((-1.0) * x2494 * x2495)) + (((-1.0) * sj1 * x2498)))) + IKsqr((((sj1 * x2494)) + (((-1.0) * x2492 * x2499)) + (((-1.0) * x2495 * x2498)) + ((x2492 * x2500)) + ((x2493 * x2497)) + (((-1.0) * sj4 * x2495 * x2496)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j2array[0] = IKatan2((((x2492 * x2493)) + (((-1.0) * x2492 * x2496)) + (((-1.0) * sj4 * x2495 * x2500)) + ((x2497 * x2499)) + (((-1.0) * x2494 * x2495)) + (((-1.0) * sj1 * x2498))), (((sj1 * x2494)) + (((-1.0) * x2492 * x2499)) + (((-1.0) * x2495 * x2498)) + ((x2492 * x2500)) + ((x2493 * x2497)) + (((-1.0) * sj4 * x2495 * x2496))));
                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                        if (j2array[0] > IKPI)
                                                                                        {
                                                                                            j2array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j2array[0] < -IKPI)
                                                                                        {
                                                                                            j2array[0] += IK2PI;
                                                                                        }
                                                                                        j2valid[0] = true;
                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                        {
                                                                                            if (!j2valid[ij2])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij2[0] = ij2;
                                                                                            _ij2[1] = -1;
                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                            {
                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j2valid[iij2] = false;
                                                                                                    _ij2[1] = iij2;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j2 = j2array[ij2];
                                                                                            cj2 = cj2array[ij2];
                                                                                            sj2 = sj2array[ij2];
                                                                                            {
                                                                                                IkReal evalcond[6];
                                                                                                IkReal x2501 = IKsin(j2);
                                                                                                IkReal x2502 = IKcos(j2);
                                                                                                IkReal x2503 = (cj3 * sj4);
                                                                                                IkReal x2504 = (cj3 * cj4);
                                                                                                IkReal x2505 = (r21 * sj5);
                                                                                                IkReal x2506 = ((1.0) * cj5);
                                                                                                IkReal x2507 = (cj5 * r01);
                                                                                                IkReal x2508 = ((0.15) * sj5);
                                                                                                IkReal x2509 = (r01 * sj5);
                                                                                                IkReal x2510 = (sj3 * sj5);
                                                                                                IkReal x2511 = ((1.0) * cj4);
                                                                                                IkReal x2512 = (cj5 * r21);
                                                                                                IkReal x2513 = (sj1 * x2502);
                                                                                                IkReal x2514 = (cj1 * x2502);
                                                                                                IkReal x2515 = ((0.54) * x2501);
                                                                                                IkReal x2516 = (sj1 * x2501);
                                                                                                IkReal x2517 = ((1.0) * cj1 * x2501);
                                                                                                evalcond[0] = (x2513 + (((-1.0) * x2517)) + ((sj4 * x2505)) + (((-1.0) * r22 * x2511)) + (((-1.0) * r20 * sj4 * x2506)));
                                                                                                evalcond[1] = (((sj4 * x2509)) + (((-1.0) * r00 * sj4 * x2506)) + (((-1.0) * x2516)) + (((-1.0) * x2514)) + (((-1.0) * r02 * x2511)));
                                                                                                evalcond[2] = ((((0.71) * cj1)) + ((cj1 * x2515)) + (((-0.15) * x2512)) + (((-1.0) * pz)) + (((-0.54) * x2513)) + (((-1.0) * r20 * x2508)));
                                                                                                evalcond[3] = ((((-1.0) * r00 * x2508)) + ((sj1 * x2515)) + (((-1.0) * px)) + (((-0.15) * x2507)) + (((0.71) * sj1)) + (((0.54) * x2514)));
                                                                                                evalcond[4] = (((x2504 * x2505)) + x2514 + x2516 + ((r22 * x2503)) + (((-1.0) * r20 * x2504 * x2506)) + ((sj3 * x2512)) + ((r20 * x2510)));
                                                                                                evalcond[5] = (((x2504 * x2509)) + x2513 + (((-1.0) * x2517)) + (((-1.0) * r00 * x2504 * x2506)) + ((r02 * x2503)) + ((sj3 * x2507)) + ((r00 * x2510)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            IkReal x2518 = (cj4 * r22);
                                                                                            IkReal x2519 = ((1.0) * cj1);
                                                                                            IkReal x2520 = (cj4 * r02);
                                                                                            IkReal x2521 = (sj4 * sj5);
                                                                                            IkReal x2522 = ((1.0) * sj1);
                                                                                            IkReal x2523 = (cj5 * sj4);
                                                                                            IkReal x2524 = (sj1 * x2523);
                                                                                            if (IKabs((((cj1 * r21 * x2521)) + (((-1.0) * r20 * x2519 * x2523)) + (((-1.0) * r01 * x2521 * x2522)) + ((r00 * x2524)) + ((sj1 * x2520)) + (((-1.0) * x2518 * x2519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1 * x2520)) + (((-1.0) * r01 * x2519 * x2521)) + ((cj1 * r00 * x2523)) + ((sj1 * x2518)) + (((-1.0) * r21 * x2521 * x2522)) + ((r20 * x2524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1 * r21 * x2521)) + (((-1.0) * r20 * x2519 * x2523)) + (((-1.0) * r01 * x2521 * x2522)) + ((r00 * x2524)) + ((sj1 * x2520)) + (((-1.0) * x2518 * x2519)))) + IKsqr((((cj1 * x2520)) + (((-1.0) * r01 * x2519 * x2521)) + ((cj1 * r00 * x2523)) + ((sj1 * x2518)) + (((-1.0) * r21 * x2521 * x2522)) + ((r20 * x2524)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j2array[0] = IKatan2((((cj1 * r21 * x2521)) + (((-1.0) * r20 * x2519 * x2523)) + (((-1.0) * r01 * x2521 * x2522)) + ((r00 * x2524)) + ((sj1 * x2520)) + (((-1.0) * x2518 * x2519))), (((cj1 * x2520)) + (((-1.0) * r01 * x2519 * x2521)) + ((cj1 * r00 * x2523)) + ((sj1 * x2518)) + (((-1.0) * r21 * x2521 * x2522)) + ((r20 * x2524))));
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[6];
                                                                                                    IkReal x2525 = IKcos(j2);
                                                                                                    IkReal x2526 = IKsin(j2);
                                                                                                    IkReal x2527 = (cj3 * sj4);
                                                                                                    IkReal x2528 = (cj3 * cj4);
                                                                                                    IkReal x2529 = (r21 * sj5);
                                                                                                    IkReal x2530 = ((1.0) * cj5);
                                                                                                    IkReal x2531 = (cj5 * r01);
                                                                                                    IkReal x2532 = ((0.15) * sj5);
                                                                                                    IkReal x2533 = (r01 * sj5);
                                                                                                    IkReal x2534 = (sj3 * sj5);
                                                                                                    IkReal x2535 = ((1.0) * cj4);
                                                                                                    IkReal x2536 = (cj5 * r21);
                                                                                                    IkReal x2537 = (cj1 * x2525);
                                                                                                    IkReal x2538 = (sj1 * x2526);
                                                                                                    IkReal x2539 = (cj1 * x2526);
                                                                                                    IkReal x2540 = (sj1 * x2525);
                                                                                                    IkReal x2541 = (x2538 + x2537);
                                                                                                    evalcond[0] = (x2541 + (((-1.0) * r02 * x2535)) + (((-1.0) * r00 * sj4 * x2530)) + ((sj4 * x2533)));
                                                                                                    evalcond[1] = (((sj4 * x2529)) + x2540 + (((-1.0) * r20 * sj4 * x2530)) + (((-1.0) * r22 * x2535)) + (((-1.0) * x2539)));
                                                                                                    evalcond[2] = ((((-1.0) * r20 * x2532)) + (((0.71) * cj1)) + (((-0.15) * x2536)) + (((-1.0) * pz)) + (((0.54) * x2539)) + (((-0.54) * x2540)));
                                                                                                    evalcond[3] = ((((-1.0) * r00 * x2532)) + (((-0.54) * x2538)) + (((-0.54) * x2537)) + (((-0.15) * x2531)) + (((-0.71) * sj1)) + (((-1.0) * px)));
                                                                                                    evalcond[4] = (((sj3 * x2536)) + ((r22 * x2527)) + x2541 + (((-1.0) * r20 * x2528 * x2530)) + ((r20 * x2534)) + ((x2528 * x2529)));
                                                                                                    evalcond[5] = (((sj3 * x2531)) + ((r02 * x2527)) + x2539 + (((-1.0) * x2540)) + (((-1.0) * r00 * x2528 * x2530)) + ((r00 * x2534)) + ((x2528 * x2533)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                IkReal x2542 = (cj4 * r22);
                                                                                                IkReal x2543 = ((1.0) * cj1);
                                                                                                IkReal x2544 = (cj5 * sj4);
                                                                                                IkReal x2545 = (cj4 * r12);
                                                                                                IkReal x2546 = ((1.0) * sj1);
                                                                                                IkReal x2547 = (r11 * sj4 * sj5);
                                                                                                IkReal x2548 = (r21 * sj4 * sj5);
                                                                                                if (IKabs(((((-1.0) * x2542 * x2543)) + ((cj1 * x2548)) + (((-1.0) * r10 * x2544 * x2546)) + (((-1.0) * r20 * x2543 * x2544)) + (((-1.0) * x2545 * x2546)) + ((sj1 * x2547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20 * sj1 * x2544)) + (((-1.0) * x2543 * x2545)) + ((cj1 * x2547)) + (((-1.0) * r10 * x2543 * x2544)) + ((sj1 * x2542)) + (((-1.0) * x2546 * x2548)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x2542 * x2543)) + ((cj1 * x2548)) + (((-1.0) * r10 * x2544 * x2546)) + (((-1.0) * r20 * x2543 * x2544)) + (((-1.0) * x2545 * x2546)) + ((sj1 * x2547)))) + IKsqr((((r20 * sj1 * x2544)) + (((-1.0) * x2543 * x2545)) + ((cj1 * x2547)) + (((-1.0) * r10 * x2543 * x2544)) + ((sj1 * x2542)) + (((-1.0) * x2546 * x2548)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j2array[0] = IKatan2(((((-1.0) * x2542 * x2543)) + ((cj1 * x2548)) + (((-1.0) * r10 * x2544 * x2546)) + (((-1.0) * r20 * x2543 * x2544)) + (((-1.0) * x2545 * x2546)) + ((sj1 * x2547))), (((r20 * sj1 * x2544)) + (((-1.0) * x2543 * x2545)) + ((cj1 * x2547)) + (((-1.0) * r10 * x2543 * x2544)) + ((sj1 * x2542)) + (((-1.0) * x2546 * x2548))));
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[6];
                                                                                                        IkReal x2549 = IKsin(j2);
                                                                                                        IkReal x2550 = IKcos(j2);
                                                                                                        IkReal x2551 = (sj4 * sj5);
                                                                                                        IkReal x2552 = ((1.0) * cj5);
                                                                                                        IkReal x2553 = (cj3 * cj4);
                                                                                                        IkReal x2554 = (cj5 * r11);
                                                                                                        IkReal x2555 = ((0.15) * sj5);
                                                                                                        IkReal x2556 = (cj3 * sj4);
                                                                                                        IkReal x2557 = ((1.0) * cj4);
                                                                                                        IkReal x2558 = (cj5 * r21);
                                                                                                        IkReal x2559 = (sj3 * sj5);
                                                                                                        IkReal x2560 = (sj1 * x2550);
                                                                                                        IkReal x2561 = (cj1 * x2550);
                                                                                                        IkReal x2562 = (sj5 * x2553);
                                                                                                        IkReal x2563 = ((0.54) * x2549);
                                                                                                        IkReal x2564 = (sj1 * x2549);
                                                                                                        IkReal x2565 = ((1.0) * cj1 * x2549);
                                                                                                        evalcond[0] = ((((-1.0) * r20 * sj4 * x2552)) + x2560 + (((-1.0) * x2565)) + ((r21 * x2551)) + (((-1.0) * r22 * x2557)));
                                                                                                        evalcond[1] = ((((-1.0) * r10 * sj4 * x2552)) + (((-1.0) * x2564)) + (((-1.0) * x2561)) + (((-1.0) * r12 * x2557)) + ((r11 * x2551)));
                                                                                                        evalcond[2] = (((cj1 * x2563)) + (((0.71) * cj1)) + (((-0.54) * x2560)) + (((-1.0) * pz)) + (((-1.0) * r20 * x2555)) + (((-0.15) * x2558)));
                                                                                                        evalcond[3] = ((((0.54) * x2561)) + (((-1.0) * py)) + (((-0.15) * x2554)) + ((sj1 * x2563)) + (((0.71) * sj1)) + (((-1.0) * r10 * x2555)));
                                                                                                        evalcond[4] = (x2561 + x2564 + ((r22 * x2556)) + ((sj3 * x2558)) + (((-1.0) * r20 * x2552 * x2553)) + ((r20 * x2559)) + ((r21 * x2562)));
                                                                                                        evalcond[5] = (x2560 + (((-1.0) * r10 * x2552 * x2553)) + ((r12 * x2556)) + (((-1.0) * x2565)) + ((sj3 * x2554)) + ((r11 * x2562)) + ((r10 * x2559)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    IkReal x2566 = (cj4 * r22);
                                                                                                    IkReal x2567 = ((1.0) * cj1);
                                                                                                    IkReal x2568 = (cj4 * r12);
                                                                                                    IkReal x2569 = (sj1 * sj4);
                                                                                                    IkReal x2570 = (cj5 * r10);
                                                                                                    IkReal x2571 = (r11 * sj5);
                                                                                                    IkReal x2572 = (cj1 * sj4);
                                                                                                    IkReal x2573 = (r21 * sj5);
                                                                                                    IkReal x2574 = (cj5 * r20);
                                                                                                    if (IKabs(((((-1.0) * x2566 * x2567)) + (((-1.0) * x2569 * x2571)) + ((x2572 * x2573)) + ((sj1 * x2568)) + ((x2569 * x2570)) + (((-1.0) * sj4 * x2567 * x2574)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1 * x2568)) + (((-1.0) * x2569 * x2573)) + ((sj1 * x2566)) + ((x2569 * x2574)) + (((-1.0) * sj4 * x2567 * x2571)) + ((x2570 * x2572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x2566 * x2567)) + (((-1.0) * x2569 * x2571)) + ((x2572 * x2573)) + ((sj1 * x2568)) + ((x2569 * x2570)) + (((-1.0) * sj4 * x2567 * x2574)))) + IKsqr((((cj1 * x2568)) + (((-1.0) * x2569 * x2573)) + ((sj1 * x2566)) + ((x2569 * x2574)) + (((-1.0) * sj4 * x2567 * x2571)) + ((x2570 * x2572)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2(((((-1.0) * x2566 * x2567)) + (((-1.0) * x2569 * x2571)) + ((x2572 * x2573)) + ((sj1 * x2568)) + ((x2569 * x2570)) + (((-1.0) * sj4 * x2567 * x2574))), (((cj1 * x2568)) + (((-1.0) * x2569 * x2573)) + ((sj1 * x2566)) + ((x2569 * x2574)) + (((-1.0) * sj4 * x2567 * x2571)) + ((x2570 * x2572))));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[6];
                                                                                                            IkReal x2575 = IKcos(j2);
                                                                                                            IkReal x2576 = IKsin(j2);
                                                                                                            IkReal x2577 = (sj4 * sj5);
                                                                                                            IkReal x2578 = ((1.0) * cj5);
                                                                                                            IkReal x2579 = (cj3 * cj4);
                                                                                                            IkReal x2580 = (cj5 * r11);
                                                                                                            IkReal x2581 = ((0.15) * sj5);
                                                                                                            IkReal x2582 = (cj3 * sj4);
                                                                                                            IkReal x2583 = ((1.0) * cj4);
                                                                                                            IkReal x2584 = (cj5 * r21);
                                                                                                            IkReal x2585 = (sj3 * sj5);
                                                                                                            IkReal x2586 = (cj1 * x2575);
                                                                                                            IkReal x2587 = (sj1 * x2576);
                                                                                                            IkReal x2588 = (sj5 * x2579);
                                                                                                            IkReal x2589 = (cj1 * x2576);
                                                                                                            IkReal x2590 = (sj1 * x2575);
                                                                                                            IkReal x2591 = (x2587 + x2586);
                                                                                                            evalcond[0] = (x2591 + ((r11 * x2577)) + (((-1.0) * r10 * sj4 * x2578)) + (((-1.0) * r12 * x2583)));
                                                                                                            evalcond[1] = (((r21 * x2577)) + x2590 + (((-1.0) * x2589)) + (((-1.0) * r20 * sj4 * x2578)) + (((-1.0) * r22 * x2583)));
                                                                                                            evalcond[2] = ((((0.71) * cj1)) + (((-0.15) * x2584)) + (((0.54) * x2589)) + (((-1.0) * r20 * x2581)) + (((-0.54) * x2590)) + (((-1.0) * pz)));
                                                                                                            evalcond[3] = ((((-0.15) * x2580)) + (((-0.54) * x2587)) + (((-0.54) * x2586)) + (((-0.71) * sj1)) + (((-1.0) * py)) + (((-1.0) * r10 * x2581)));
                                                                                                            evalcond[4] = (((r22 * x2582)) + x2591 + ((sj3 * x2584)) + ((r20 * x2585)) + (((-1.0) * r20 * x2578 * x2579)) + ((r21 * x2588)));
                                                                                                            evalcond[5] = (x2589 + (((-1.0) * x2590)) + ((sj3 * x2580)) + ((r12 * x2582)) + ((r10 * x2585)) + ((r11 * x2588)) + (((-1.0) * r10 * x2578 * x2579)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                if (1)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    continue; // branch miss [j2]
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        {
                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                            bool j2valid[1] = {false};
                                                                            _nj2 = 1;
                                                                            IkReal x2592 = ((1.0) * sj1);
                                                                            IkReal x2593 = (sj1 * sj4);
                                                                            IkReal x2594 = (r11 * sj5);
                                                                            IkReal x2595 = ((1.0) * cj1);
                                                                            IkReal x2596 = (cj4 * r12);
                                                                            IkReal x2597 = (cj5 * r20 * sj0);
                                                                            IkReal x2598 = (cj5 * r10 * sj4);
                                                                            IkReal x2599 = (cj4 * r22 * sj0);
                                                                            IkReal x2600 = (r21 * sj0 * sj4 * sj5);
                                                                            CheckValue<IkReal> x2601 = IKatan2WithCheck(IkReal((((cj1 * x2600)) + (((-1.0) * x2595 * x2599)) + ((x2593 * x2594)) + (((-1.0) * sj4 * x2595 * x2597)) + (((-1.0) * x2592 * x2596)) + (((-1.0) * x2592 * x2598)))), IkReal(((((-1.0) * x2595 * x2596)) + (((-1.0) * x2595 * x2598)) + (((-1.0) * x2592 * x2600)) + ((x2593 * x2597)) + ((sj1 * x2599)) + ((cj1 * sj4 * x2594)))), IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x2601.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x2602 = IKPowWithIntegerCheck(IKsign(sj0), -1);
                                                                            if (!x2602.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            j2array[0] = ((-1.5707963267949) + (x2601.value) + (((1.5707963267949) * (x2602.value))));
                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                            if (j2array[0] > IKPI)
                                                                            {
                                                                                j2array[0] -= IK2PI;
                                                                            }
                                                                            else if (j2array[0] < -IKPI)
                                                                            {
                                                                                j2array[0] += IK2PI;
                                                                            }
                                                                            j2valid[0] = true;
                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                            {
                                                                                if (!j2valid[ij2])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij2[0] = ij2;
                                                                                _ij2[1] = -1;
                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                {
                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j2valid[iij2] = false;
                                                                                        _ij2[1] = iij2;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j2 = j2array[ij2];
                                                                                cj2 = cj2array[ij2];
                                                                                sj2 = sj2array[ij2];
                                                                                {
                                                                                    IkReal evalcond[9];
                                                                                    IkReal x2603 = IKsin(j2);
                                                                                    IkReal x2604 = IKcos(j2);
                                                                                    IkReal x2605 = (cj3 * sj4);
                                                                                    IkReal x2606 = (cj3 * cj4);
                                                                                    IkReal x2607 = (r21 * sj5);
                                                                                    IkReal x2608 = ((1.0) * cj5);
                                                                                    IkReal x2609 = (sj4 * sj5);
                                                                                    IkReal x2610 = (cj5 * sj3);
                                                                                    IkReal x2611 = ((0.15) * cj5);
                                                                                    IkReal x2612 = ((1.0) * cj0);
                                                                                    IkReal x2613 = ((0.15) * sj5);
                                                                                    IkReal x2614 = ((0.54) * sj0);
                                                                                    IkReal x2615 = (sj3 * sj5);
                                                                                    IkReal x2616 = ((1.0) * cj4);
                                                                                    IkReal x2617 = ((0.71) * sj1);
                                                                                    IkReal x2618 = ((0.54) * cj0);
                                                                                    IkReal x2619 = (cj1 * x2604);
                                                                                    IkReal x2620 = (sj1 * x2603);
                                                                                    IkReal x2621 = (cj1 * x2603);
                                                                                    IkReal x2622 = (sj1 * x2604);
                                                                                    IkReal x2623 = ((1.0) * sj0 * x2603);
                                                                                    evalcond[0] = ((((-1.0) * x2621)) + (((-1.0) * r22 * x2616)) + ((sj4 * x2607)) + (((-1.0) * r20 * sj4 * x2608)) + x2622);
                                                                                    evalcond[1] = ((((-1.0) * r21 * x2611)) + (((0.71) * cj1)) + (((0.54) * x2621)) + (((-1.0) * pz)) + (((-0.54) * x2622)) + (((-1.0) * r20 * x2613)));
                                                                                    evalcond[2] = ((((-1.0) * r00 * sj4 * x2608)) + (((-1.0) * x2612 * x2620)) + (((-1.0) * x2612 * x2619)) + (((-1.0) * r02 * x2616)) + ((r01 * x2609)));
                                                                                    evalcond[3] = ((((-1.0) * r12 * x2616)) + (((-1.0) * r10 * sj4 * x2608)) + ((r11 * x2609)) + (((-1.0) * sj0 * x2619)) + (((-1.0) * sj0 * x2620)));
                                                                                    evalcond[4] = ((((-1.0) * r00 * x2613)) + (((-1.0) * r01 * x2611)) + (((-1.0) * px)) + ((x2618 * x2620)) + ((x2618 * x2619)) + ((cj0 * x2617)));
                                                                                    evalcond[5] = (((x2614 * x2620)) + (((-1.0) * r11 * x2611)) + ((x2614 * x2619)) + (((-1.0) * py)) + (((-1.0) * r10 * x2613)) + ((sj0 * x2617)));
                                                                                    evalcond[6] = (((r20 * x2615)) + (((-1.0) * r20 * x2606 * x2608)) + ((x2606 * x2607)) + ((r22 * x2605)) + ((r21 * x2610)) + x2619 + x2620);
                                                                                    evalcond[7] = (((r00 * x2615)) + ((r01 * x2610)) + ((r01 * sj5 * x2606)) + (((-1.0) * r00 * x2606 * x2608)) + (((-1.0) * x2612 * x2621)) + ((r02 * x2605)) + ((cj0 * x2622)));
                                                                                    evalcond[8] = (((r11 * sj5 * x2606)) + ((r12 * x2605)) + ((r11 * x2610)) + ((r10 * x2615)) + (((-1.0) * r10 * x2606 * x2608)) + ((sj0 * x2622)) + (((-1.0) * sj0 * x2621)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 1;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                    bool j2valid[1] = {false};
                                                                    _nj2 = 1;
                                                                    IkReal x2624 = ((1.0) * cj0);
                                                                    IkReal x2625 = ((1.0) * sj1);
                                                                    IkReal x2626 = (cj5 * sj4);
                                                                    IkReal x2627 = (cj4 * r22);
                                                                    IkReal x2628 = (cj4 * r02);
                                                                    IkReal x2629 = (cj0 * sj1);
                                                                    IkReal x2630 = ((1.0) * cj1);
                                                                    IkReal x2631 = (sj1 * sj4 * sj5);
                                                                    IkReal x2632 = (cj1 * sj4 * sj5);
                                                                    CheckValue<IkReal> x2633 = IKatan2WithCheck(IkReal(((((-1.0) * r00 * x2625 * x2626)) + (((-1.0) * x2625 * x2628)) + (((-1.0) * cj1 * r20 * x2624 * x2626)) + ((cj0 * r21 * x2632)) + ((r01 * x2631)) + (((-1.0) * cj1 * x2624 * x2627)))), IkReal(((((-1.0) * x2628 * x2630)) + ((x2627 * x2629)) + (((-1.0) * r21 * x2624 * x2631)) + ((r01 * x2632)) + ((r20 * x2626 * x2629)) + (((-1.0) * r00 * x2626 * x2630)))), IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x2633.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    CheckValue<IkReal> x2634 = IKPowWithIntegerCheck(IKsign(cj0), -1);
                                                                    if (!x2634.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j2array[0] = ((-1.5707963267949) + (x2633.value) + (((1.5707963267949) * (x2634.value))));
                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                    if (j2array[0] > IKPI)
                                                                    {
                                                                        j2array[0] -= IK2PI;
                                                                    }
                                                                    else if (j2array[0] < -IKPI)
                                                                    {
                                                                        j2array[0] += IK2PI;
                                                                    }
                                                                    j2valid[0] = true;
                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                    {
                                                                        if (!j2valid[ij2])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij2[0] = ij2;
                                                                        _ij2[1] = -1;
                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                        {
                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j2valid[iij2] = false;
                                                                                _ij2[1] = iij2;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j2 = j2array[ij2];
                                                                        cj2 = cj2array[ij2];
                                                                        sj2 = sj2array[ij2];
                                                                        {
                                                                            IkReal evalcond[9];
                                                                            IkReal x2635 = IKsin(j2);
                                                                            IkReal x2636 = IKcos(j2);
                                                                            IkReal x2637 = (cj3 * sj4);
                                                                            IkReal x2638 = (cj3 * cj4);
                                                                            IkReal x2639 = (r21 * sj5);
                                                                            IkReal x2640 = ((1.0) * cj5);
                                                                            IkReal x2641 = (sj4 * sj5);
                                                                            IkReal x2642 = (cj5 * sj3);
                                                                            IkReal x2643 = ((0.15) * cj5);
                                                                            IkReal x2644 = ((1.0) * cj0);
                                                                            IkReal x2645 = ((0.15) * sj5);
                                                                            IkReal x2646 = ((0.54) * sj0);
                                                                            IkReal x2647 = (sj3 * sj5);
                                                                            IkReal x2648 = ((1.0) * cj4);
                                                                            IkReal x2649 = ((0.71) * sj1);
                                                                            IkReal x2650 = ((0.54) * cj0);
                                                                            IkReal x2651 = (cj1 * x2636);
                                                                            IkReal x2652 = (sj1 * x2635);
                                                                            IkReal x2653 = (cj1 * x2635);
                                                                            IkReal x2654 = (sj1 * x2636);
                                                                            IkReal x2655 = ((1.0) * sj0 * x2635);
                                                                            evalcond[0] = (((sj4 * x2639)) + (((-1.0) * r22 * x2648)) + (((-1.0) * r20 * sj4 * x2640)) + (((-1.0) * x2653)) + x2654);
                                                                            evalcond[1] = ((((0.71) * cj1)) + (((-0.54) * x2654)) + (((-1.0) * r20 * x2645)) + (((-1.0) * pz)) + (((-1.0) * r21 * x2643)) + (((0.54) * x2653)));
                                                                            evalcond[2] = ((((-1.0) * x2644 * x2652)) + (((-1.0) * x2644 * x2651)) + (((-1.0) * r02 * x2648)) + (((-1.0) * r00 * sj4 * x2640)) + ((r01 * x2641)));
                                                                            evalcond[3] = ((((-1.0) * r10 * sj4 * x2640)) + (((-1.0) * sj0 * x2652)) + (((-1.0) * sj0 * x2651)) + ((r11 * x2641)) + (((-1.0) * r12 * x2648)));
                                                                            evalcond[4] = ((((-1.0) * r00 * x2645)) + (((-1.0) * r01 * x2643)) + (((-1.0) * px)) + ((cj0 * x2649)) + ((x2650 * x2651)) + ((x2650 * x2652)));
                                                                            evalcond[5] = (((sj0 * x2649)) + (((-1.0) * r11 * x2643)) + (((-1.0) * py)) + ((x2646 * x2652)) + ((x2646 * x2651)) + (((-1.0) * r10 * x2645)));
                                                                            evalcond[6] = (((r21 * x2642)) + ((r22 * x2637)) + (((-1.0) * r20 * x2638 * x2640)) + ((x2638 * x2639)) + x2652 + x2651 + ((r20 * x2647)));
                                                                            evalcond[7] = ((((-1.0) * x2644 * x2653)) + ((cj0 * x2654)) + ((r00 * x2647)) + ((r01 * sj5 * x2638)) + ((r01 * x2642)) + (((-1.0) * r00 * x2638 * x2640)) + ((r02 * x2637)));
                                                                            evalcond[8] = ((((-1.0) * sj0 * x2653)) + ((sj0 * x2654)) + (((-1.0) * r10 * x2638 * x2640)) + ((r11 * x2642)) + ((r10 * x2647)) + ((r12 * x2637)) + ((r11 * sj5 * x2638)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        {
                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                            bool j1valid[1] = {false};
                                            _nj1 = 1;
                                            IkReal x2656 = ((0.15) * sj0);
                                            IkReal x2657 = ((0.76056338028169) * sj4);
                                            IkReal x2658 = ((0.54) * sj0 * sj4);
                                            CheckValue<IkReal> x2659 = IKPowWithIntegerCheck(sj0, -2);
                                            if (!x2659.valid)
                                            {
                                                continue;
                                            }
                                            if (IKabs(((-1.40845070422535) * (x2659.value) * (((((-0.54) * cj4 * r12 * sj0)) + (((-1.0) * r10 * sj5 * x2656)) + ((r11 * sj5 * x2658)) + (((-1.0) * cj5 * r10 * x2658)) + (((-1.0) * cj5 * r11 * x2656)) + (((-1.0) * py * sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * r21 * sj5 * x2657)) + (((0.211267605633803) * r20 * sj5)) + ((cj5 * r20 * x2657)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535) * (x2659.value) * (((((-0.54) * cj4 * r12 * sj0)) + (((-1.0) * r10 * sj5 * x2656)) + ((r11 * sj5 * x2658)) + (((-1.0) * cj5 * r10 * x2658)) + (((-1.0) * cj5 * r11 * x2656)) + (((-1.0) * py * sj0)))))) + IKsqr(((((-1.0) * r21 * sj5 * x2657)) + (((0.211267605633803) * r20 * sj5)) + ((cj5 * r20 * x2657)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                continue;
                                            j1array[0] = IKatan2(((-1.40845070422535) * (x2659.value) * (((((-0.54) * cj4 * r12 * sj0)) + (((-1.0) * r10 * sj5 * x2656)) + ((r11 * sj5 * x2658)) + (((-1.0) * cj5 * r10 * x2658)) + (((-1.0) * cj5 * r11 * x2656)) + (((-1.0) * py * sj0))))), ((((-1.0) * r21 * sj5 * x2657)) + (((0.211267605633803) * r20 * sj5)) + ((cj5 * r20 * x2657)) + (((1.40845070422535) * pz)) + (((0.76056338028169) * cj4 * r22)) + (((0.211267605633803) * cj5 * r21))));
                                            sj1array[0] = IKsin(j1array[0]);
                                            cj1array[0] = IKcos(j1array[0]);
                                            if (j1array[0] > IKPI)
                                            {
                                                j1array[0] -= IK2PI;
                                            }
                                            else if (j1array[0] < -IKPI)
                                            {
                                                j1array[0] += IK2PI;
                                            }
                                            j1valid[0] = true;
                                            for (int ij1 = 0; ij1 < 1; ++ij1)
                                            {
                                                if (!j1valid[ij1])
                                                {
                                                    continue;
                                                }
                                                _ij1[0] = ij1;
                                                _ij1[1] = -1;
                                                for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                                                {
                                                    if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                                                    {
                                                        j1valid[iij1] = false;
                                                        _ij1[1] = iij1;
                                                        break;
                                                    }
                                                }
                                                j1 = j1array[ij1];
                                                cj1 = cj1array[ij1];
                                                sj1 = sj1array[ij1];
                                                {
                                                    IkReal evalcond[9];
                                                    IkReal x2660 = IKsin(j1);
                                                    IkReal x2661 = IKcos(j1);
                                                    IkReal x2662 = ((0.54) * cj4);
                                                    IkReal x2663 = (cj5 * r00);
                                                    IkReal x2664 = ((1.0) * py);
                                                    IkReal x2665 = ((0.15) * sj0);
                                                    IkReal x2666 = (r10 * sj5);
                                                    IkReal x2667 = ((1.0) * px);
                                                    IkReal x2668 = (cj0 * cj5);
                                                    IkReal x2669 = ((0.15) * r01);
                                                    IkReal x2670 = (cj5 * r21);
                                                    IkReal x2671 = ((0.54) * sj4);
                                                    IkReal x2672 = (cj3 * sj5);
                                                    IkReal x2673 = ((0.15) * r11);
                                                    IkReal x2674 = (r00 * sj5);
                                                    IkReal x2675 = (r01 * sj5);
                                                    IkReal x2676 = ((0.54) * sj3);
                                                    IkReal x2677 = (r20 * sj5);
                                                    IkReal x2678 = (r11 * sj5);
                                                    IkReal x2679 = (cj5 * r11);
                                                    IkReal x2680 = (cj5 * r10);
                                                    IkReal x2681 = (cj3 * r22);
                                                    IkReal x2682 = ((0.15) * cj0);
                                                    IkReal x2683 = (cj5 * r20);
                                                    IkReal x2684 = ((1.0) * pz);
                                                    IkReal x2685 = (cj5 * r01);
                                                    IkReal x2686 = ((0.71) * x2660);
                                                    IkReal x2687 = ((0.71) * x2661);
                                                    IkReal x2688 = (cj0 * sj0 * x2686);
                                                    evalcond[0] = ((((-1.0) * r21 * sj5 * x2671)) + ((x2671 * x2683)) + ((r22 * x2662)) + (((-1.0) * x2687)) + pz + (((0.15) * x2670)) + (((0.15) * x2677)));
                                                    evalcond[1] = ((((-1.0) * sj0 * x2671 * x2680)) + (((-1.0) * sj0 * x2664)) + (((-1.0) * x2665 * x2679)) + ((x2686 * (sj0 * sj0))) + (((-1.0) * x2665 * x2666)) + ((sj0 * x2671 * x2678)) + (((-1.0) * r12 * sj0 * x2662)));
                                                    evalcond[2] = ((((-1.0) * cj0 * x2667)) + ((x2686 * (cj0 * cj0))) + ((cj0 * x2671 * x2675)) + (((-1.0) * cj0 * x2663 * x2671)) + (((-1.0) * cj0 * r02 * x2662)) + (((-1.0) * x2674 * x2682)) + (((-1.0) * x2668 * x2669)));
                                                    evalcond[3] = (((cj3 * r12 * x2671)) + ((sj0 * x2687)) + ((x2666 * x2676)) + (((-1.0) * x2665 * x2670)) + (((-1.0) * x2665 * x2677)) + ((r11 * x2662 * x2672)) + (((-1.0) * sj0 * x2684)) + (((-1.0) * cj3 * x2662 * x2680)) + ((x2676 * x2679)));
                                                    evalcond[4] = (((r01 * x2662 * x2672)) + ((cj0 * x2687)) + (((-0.15) * r21 * x2668)) + (((-1.0) * cj0 * x2684)) + (((-1.0) * cj3 * x2662 * x2663)) + ((x2676 * x2685)) + (((-1.0) * x2677 * x2682)) + ((x2674 * x2676)) + ((cj3 * r02 * x2671)));
                                                    evalcond[5] = ((((-1.0) * sj0 * x2671 * x2681)) + (((-1.0) * sj0 * x2676 * x2677)) + (((-1.0) * sj0 * x2670 * x2676)) + ((sj0 * x2686)) + (((-1.0) * cj5 * x2673)) + (((-1.0) * r21 * sj0 * x2662 * x2672)) + (((-1.0) * x2664)) + (((-0.15) * x2666)) + ((cj3 * sj0 * x2662 * x2683)));
                                                    evalcond[6] = ((((-1.0) * cj0 * r21 * x2662 * x2672)) + ((cj0 * x2686)) + ((cj3 * r20 * x2662 * x2668)) + (((-1.0) * cj0 * x2676 * x2677)) + (((-1.0) * x2667)) + (((-1.0) * cj5 * x2669)) + (((-0.15) * x2674)) + (((-1.0) * cj0 * x2671 * x2681)) + (((-1.0) * r21 * x2668 * x2676)));
                                                    evalcond[7] = ((((-1.0) * sj0 * x2667)) + ((cj0 * x2671 * x2678)) + (((-1.0) * x2665 * x2674)) + (((-1.0) * cj0 * r12 * x2662)) + (((-1.0) * r10 * x2668 * x2671)) + (((-1.0) * x2665 * x2685)) + x2688);
                                                    evalcond[8] = ((((-1.0) * cj0 * x2664)) + (((-1.0) * r02 * sj0 * x2662)) + (((-1.0) * x2666 * x2682)) + ((sj0 * x2671 * x2675)) + (((-1.0) * sj0 * x2663 * x2671)) + (((-1.0) * x2668 * x2673)) + x2688);
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                        continue;
                                                    }
                                                }

                                                {
                                                    IkReal j2eval[2];
                                                    j2eval[0] = cj0;
                                                    j2eval[1] = IKsign(cj0);
                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                    {
                                                        {
                                                            IkReal j2eval[2];
                                                            j2eval[0] = sj0;
                                                            j2eval[1] = IKsign(sj0);
                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                bool j2valid[1] = {false};
                                                                                _nj2 = 1;
                                                                                IkReal x2689 = (sj1 * sj4);
                                                                                IkReal x2690 = (r01 * sj5);
                                                                                IkReal x2691 = (cj4 * r22);
                                                                                IkReal x2692 = ((1.0) * cj1);
                                                                                IkReal x2693 = (cj5 * r00);
                                                                                IkReal x2694 = (cj1 * sj4);
                                                                                IkReal x2695 = (cj4 * r02);
                                                                                IkReal x2696 = (r21 * sj5);
                                                                                IkReal x2697 = (cj5 * r20);
                                                                                if (IKabs(((((-1.0) * x2691 * x2692)) + (((-1.0) * sj1 * x2695)) + (((-1.0) * x2689 * x2693)) + (((-1.0) * sj4 * x2692 * x2697)) + ((x2689 * x2690)) + ((x2694 * x2696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * x2692 * x2695)) + (((-1.0) * x2689 * x2696)) + (((-1.0) * sj4 * x2692 * x2693)) + ((x2689 * x2697)) + ((sj1 * x2691)) + ((x2690 * x2694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * x2691 * x2692)) + (((-1.0) * sj1 * x2695)) + (((-1.0) * x2689 * x2693)) + (((-1.0) * sj4 * x2692 * x2697)) + ((x2689 * x2690)) + ((x2694 * x2696)))) + IKsqr(((((-1.0) * x2692 * x2695)) + (((-1.0) * x2689 * x2696)) + (((-1.0) * sj4 * x2692 * x2693)) + ((x2689 * x2697)) + ((sj1 * x2691)) + ((x2690 * x2694)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j2array[0] = IKatan2(((((-1.0) * x2691 * x2692)) + (((-1.0) * sj1 * x2695)) + (((-1.0) * x2689 * x2693)) + (((-1.0) * sj4 * x2692 * x2697)) + ((x2689 * x2690)) + ((x2694 * x2696))), ((((-1.0) * x2692 * x2695)) + (((-1.0) * x2689 * x2696)) + (((-1.0) * sj4 * x2692 * x2693)) + ((x2689 * x2697)) + ((sj1 * x2691)) + ((x2690 * x2694))));
                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                if (j2array[0] > IKPI)
                                                                                {
                                                                                    j2array[0] -= IK2PI;
                                                                                }
                                                                                else if (j2array[0] < -IKPI)
                                                                                {
                                                                                    j2array[0] += IK2PI;
                                                                                }
                                                                                j2valid[0] = true;
                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                {
                                                                                    if (!j2valid[ij2])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij2[0] = ij2;
                                                                                    _ij2[1] = -1;
                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                    {
                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j2valid[iij2] = false;
                                                                                            _ij2[1] = iij2;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j2 = j2array[ij2];
                                                                                    cj2 = cj2array[ij2];
                                                                                    sj2 = sj2array[ij2];
                                                                                    {
                                                                                        IkReal evalcond[6];
                                                                                        IkReal x2698 = IKsin(j2);
                                                                                        IkReal x2699 = IKcos(j2);
                                                                                        IkReal x2700 = (cj3 * sj4);
                                                                                        IkReal x2701 = (cj3 * cj4);
                                                                                        IkReal x2702 = (r21 * sj5);
                                                                                        IkReal x2703 = ((1.0) * cj5);
                                                                                        IkReal x2704 = (cj5 * r01);
                                                                                        IkReal x2705 = ((0.15) * sj5);
                                                                                        IkReal x2706 = (r01 * sj5);
                                                                                        IkReal x2707 = (sj3 * sj5);
                                                                                        IkReal x2708 = ((1.0) * cj4);
                                                                                        IkReal x2709 = (cj5 * r21);
                                                                                        IkReal x2710 = (sj1 * x2699);
                                                                                        IkReal x2711 = (cj1 * x2699);
                                                                                        IkReal x2712 = ((0.54) * x2698);
                                                                                        IkReal x2713 = (sj1 * x2698);
                                                                                        IkReal x2714 = ((1.0) * cj1 * x2698);
                                                                                        evalcond[0] = (x2710 + (((-1.0) * r22 * x2708)) + (((-1.0) * x2714)) + (((-1.0) * r20 * sj4 * x2703)) + ((sj4 * x2702)));
                                                                                        evalcond[1] = ((((-1.0) * r00 * sj4 * x2703)) + (((-1.0) * x2713)) + (((-1.0) * x2711)) + (((-1.0) * r02 * x2708)) + ((sj4 * x2706)));
                                                                                        evalcond[2] = ((((0.71) * cj1)) + (((-0.54) * x2710)) + (((-1.0) * pz)) + (((-1.0) * r20 * x2705)) + (((-0.15) * x2709)) + ((cj1 * x2712)));
                                                                                        evalcond[3] = ((((-1.0) * r00 * x2705)) + ((sj1 * x2712)) + (((-1.0) * px)) + (((0.54) * x2711)) + (((-0.15) * x2704)) + (((0.71) * sj1)));
                                                                                        evalcond[4] = (x2713 + x2711 + ((r22 * x2700)) + ((r20 * x2707)) + (((-1.0) * r20 * x2701 * x2703)) + ((sj3 * x2709)) + ((x2701 * x2702)));
                                                                                        evalcond[5] = (x2710 + ((r00 * x2707)) + (((-1.0) * x2714)) + (((-1.0) * r00 * x2701 * x2703)) + ((sj3 * x2704)) + ((x2701 * x2706)) + ((r02 * x2700)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 1;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 1;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 1;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    IkReal x2715 = (cj4 * r22);
                                                                                    IkReal x2716 = ((1.0) * cj1);
                                                                                    IkReal x2717 = (cj4 * r02);
                                                                                    IkReal x2718 = (sj4 * sj5);
                                                                                    IkReal x2719 = ((1.0) * sj1);
                                                                                    IkReal x2720 = (cj5 * sj4);
                                                                                    IkReal x2721 = (sj1 * x2720);
                                                                                    if (IKabs(((((-1.0) * r01 * x2718 * x2719)) + ((sj1 * x2717)) + (((-1.0) * r20 * x2716 * x2720)) + (((-1.0) * x2715 * x2716)) + ((r00 * x2721)) + ((cj1 * r21 * x2718)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1 * x2715)) + (((-1.0) * r01 * x2716 * x2718)) + ((cj1 * r00 * x2720)) + ((r20 * x2721)) + (((-1.0) * r21 * x2718 * x2719)) + ((cj1 * x2717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r01 * x2718 * x2719)) + ((sj1 * x2717)) + (((-1.0) * r20 * x2716 * x2720)) + (((-1.0) * x2715 * x2716)) + ((r00 * x2721)) + ((cj1 * r21 * x2718)))) + IKsqr((((sj1 * x2715)) + (((-1.0) * r01 * x2716 * x2718)) + ((cj1 * r00 * x2720)) + ((r20 * x2721)) + (((-1.0) * r21 * x2718 * x2719)) + ((cj1 * x2717)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j2array[0] = IKatan2(((((-1.0) * r01 * x2718 * x2719)) + ((sj1 * x2717)) + (((-1.0) * r20 * x2716 * x2720)) + (((-1.0) * x2715 * x2716)) + ((r00 * x2721)) + ((cj1 * r21 * x2718))), (((sj1 * x2715)) + (((-1.0) * r01 * x2716 * x2718)) + ((cj1 * r00 * x2720)) + ((r20 * x2721)) + (((-1.0) * r21 * x2718 * x2719)) + ((cj1 * x2717))));
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI)
                                                                                    {
                                                                                        j2array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j2array[0] < -IKPI)
                                                                                    {
                                                                                        j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                    {
                                                                                        if (!j2valid[ij2])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                        {
                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j2valid[iij2] = false;
                                                                                                _ij2[1] = iij2;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                            IkReal evalcond[6];
                                                                                            IkReal x2722 = IKcos(j2);
                                                                                            IkReal x2723 = IKsin(j2);
                                                                                            IkReal x2724 = (cj3 * sj4);
                                                                                            IkReal x2725 = (cj3 * cj4);
                                                                                            IkReal x2726 = (r21 * sj5);
                                                                                            IkReal x2727 = ((1.0) * cj5);
                                                                                            IkReal x2728 = (cj5 * r01);
                                                                                            IkReal x2729 = ((0.15) * sj5);
                                                                                            IkReal x2730 = (r01 * sj5);
                                                                                            IkReal x2731 = (sj3 * sj5);
                                                                                            IkReal x2732 = ((1.0) * cj4);
                                                                                            IkReal x2733 = (cj5 * r21);
                                                                                            IkReal x2734 = (cj1 * x2722);
                                                                                            IkReal x2735 = (sj1 * x2723);
                                                                                            IkReal x2736 = (cj1 * x2723);
                                                                                            IkReal x2737 = (sj1 * x2722);
                                                                                            IkReal x2738 = (x2734 + x2735);
                                                                                            evalcond[0] = (x2738 + (((-1.0) * r00 * sj4 * x2727)) + (((-1.0) * r02 * x2732)) + ((sj4 * x2730)));
                                                                                            evalcond[1] = (x2737 + (((-1.0) * x2736)) + ((sj4 * x2726)) + (((-1.0) * r22 * x2732)) + (((-1.0) * r20 * sj4 * x2727)));
                                                                                            evalcond[2] = ((((0.71) * cj1)) + (((-0.15) * x2733)) + (((-1.0) * pz)) + (((-0.54) * x2737)) + (((0.54) * x2736)) + (((-1.0) * r20 * x2729)));
                                                                                            evalcond[3] = ((((-1.0) * r00 * x2729)) + (((-0.15) * x2728)) + (((-0.71) * sj1)) + (((-1.0) * px)) + (((-0.54) * x2735)) + (((-0.54) * x2734)));
                                                                                            evalcond[4] = (x2738 + ((r22 * x2724)) + ((sj3 * x2733)) + ((x2725 * x2726)) + (((-1.0) * r20 * x2725 * x2727)) + ((r20 * x2731)));
                                                                                            evalcond[5] = (x2736 + ((r02 * x2724)) + ((x2725 * x2730)) + (((-1.0) * x2737)) + ((r00 * x2731)) + (((-1.0) * r00 * x2725 * x2727)) + ((sj3 * x2728)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                        bool j2valid[1] = {false};
                                                                                        _nj2 = 1;
                                                                                        IkReal x2739 = (cj4 * r22);
                                                                                        IkReal x2740 = ((1.0) * cj1);
                                                                                        IkReal x2741 = (cj5 * sj4);
                                                                                        IkReal x2742 = (cj4 * r12);
                                                                                        IkReal x2743 = ((1.0) * sj1);
                                                                                        IkReal x2744 = (r11 * sj4 * sj5);
                                                                                        IkReal x2745 = (r21 * sj4 * sj5);
                                                                                        if (IKabs(((((-1.0) * r10 * x2741 * x2743)) + (((-1.0) * x2739 * x2740)) + ((sj1 * x2744)) + (((-1.0) * r20 * x2740 * x2741)) + ((cj1 * x2745)) + (((-1.0) * x2742 * x2743)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * x2743 * x2745)) + (((-1.0) * r10 * x2740 * x2741)) + ((r20 * sj1 * x2741)) + (((-1.0) * x2740 * x2742)) + ((sj1 * x2739)) + ((cj1 * x2744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * r10 * x2741 * x2743)) + (((-1.0) * x2739 * x2740)) + ((sj1 * x2744)) + (((-1.0) * r20 * x2740 * x2741)) + ((cj1 * x2745)) + (((-1.0) * x2742 * x2743)))) + IKsqr(((((-1.0) * x2743 * x2745)) + (((-1.0) * r10 * x2740 * x2741)) + ((r20 * sj1 * x2741)) + (((-1.0) * x2740 * x2742)) + ((sj1 * x2739)) + ((cj1 * x2744)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j2array[0] = IKatan2(((((-1.0) * r10 * x2741 * x2743)) + (((-1.0) * x2739 * x2740)) + ((sj1 * x2744)) + (((-1.0) * r20 * x2740 * x2741)) + ((cj1 * x2745)) + (((-1.0) * x2742 * x2743))), ((((-1.0) * x2743 * x2745)) + (((-1.0) * r10 * x2740 * x2741)) + ((r20 * sj1 * x2741)) + (((-1.0) * x2740 * x2742)) + ((sj1 * x2739)) + ((cj1 * x2744))));
                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                        if (j2array[0] > IKPI)
                                                                                        {
                                                                                            j2array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j2array[0] < -IKPI)
                                                                                        {
                                                                                            j2array[0] += IK2PI;
                                                                                        }
                                                                                        j2valid[0] = true;
                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                        {
                                                                                            if (!j2valid[ij2])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij2[0] = ij2;
                                                                                            _ij2[1] = -1;
                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                            {
                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j2valid[iij2] = false;
                                                                                                    _ij2[1] = iij2;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j2 = j2array[ij2];
                                                                                            cj2 = cj2array[ij2];
                                                                                            sj2 = sj2array[ij2];
                                                                                            {
                                                                                                IkReal evalcond[6];
                                                                                                IkReal x2746 = IKsin(j2);
                                                                                                IkReal x2747 = IKcos(j2);
                                                                                                IkReal x2748 = (sj4 * sj5);
                                                                                                IkReal x2749 = ((1.0) * cj5);
                                                                                                IkReal x2750 = (cj3 * cj4);
                                                                                                IkReal x2751 = (cj5 * r11);
                                                                                                IkReal x2752 = ((0.15) * sj5);
                                                                                                IkReal x2753 = (cj3 * sj4);
                                                                                                IkReal x2754 = ((1.0) * cj4);
                                                                                                IkReal x2755 = (cj5 * r21);
                                                                                                IkReal x2756 = (sj3 * sj5);
                                                                                                IkReal x2757 = (sj1 * x2747);
                                                                                                IkReal x2758 = (cj1 * x2747);
                                                                                                IkReal x2759 = (sj5 * x2750);
                                                                                                IkReal x2760 = ((0.54) * x2746);
                                                                                                IkReal x2761 = (sj1 * x2746);
                                                                                                IkReal x2762 = ((1.0) * cj1 * x2746);
                                                                                                evalcond[0] = (x2757 + (((-1.0) * r22 * x2754)) + ((r21 * x2748)) + (((-1.0) * x2762)) + (((-1.0) * r20 * sj4 * x2749)));
                                                                                                evalcond[1] = ((((-1.0) * r10 * sj4 * x2749)) + (((-1.0) * x2761)) + ((r11 * x2748)) + (((-1.0) * r12 * x2754)) + (((-1.0) * x2758)));
                                                                                                evalcond[2] = (((cj1 * x2760)) + (((0.71) * cj1)) + (((-0.54) * x2757)) + (((-0.15) * x2755)) + (((-1.0) * pz)) + (((-1.0) * r20 * x2752)));
                                                                                                evalcond[3] = (((sj1 * x2760)) + (((-0.15) * x2751)) + (((-1.0) * r10 * x2752)) + (((-1.0) * py)) + (((0.71) * sj1)) + (((0.54) * x2758)));
                                                                                                evalcond[4] = (x2758 + x2761 + ((r22 * x2753)) + ((sj3 * x2755)) + (((-1.0) * r20 * x2749 * x2750)) + ((r21 * x2759)) + ((r20 * x2756)));
                                                                                                evalcond[5] = (x2757 + ((r11 * x2759)) + ((sj3 * x2751)) + ((r12 * x2753)) + ((r10 * x2756)) + (((-1.0) * x2762)) + (((-1.0) * r10 * x2749 * x2750)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            IkReal x2763 = (cj4 * r22);
                                                                                            IkReal x2764 = ((1.0) * cj1);
                                                                                            IkReal x2765 = (cj4 * r12);
                                                                                            IkReal x2766 = (sj1 * sj4);
                                                                                            IkReal x2767 = (cj5 * r10);
                                                                                            IkReal x2768 = (r11 * sj5);
                                                                                            IkReal x2769 = (cj1 * sj4);
                                                                                            IkReal x2770 = (r21 * sj5);
                                                                                            IkReal x2771 = (cj5 * r20);
                                                                                            if (IKabs((((x2769 * x2770)) + ((sj1 * x2765)) + (((-1.0) * x2766 * x2768)) + (((-1.0) * sj4 * x2764 * x2771)) + ((x2766 * x2767)) + (((-1.0) * x2763 * x2764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1 * x2765)) + ((sj1 * x2763)) + ((x2766 * x2771)) + (((-1.0) * x2766 * x2770)) + ((x2767 * x2769)) + (((-1.0) * sj4 * x2764 * x2768)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2769 * x2770)) + ((sj1 * x2765)) + (((-1.0) * x2766 * x2768)) + (((-1.0) * sj4 * x2764 * x2771)) + ((x2766 * x2767)) + (((-1.0) * x2763 * x2764)))) + IKsqr((((cj1 * x2765)) + ((sj1 * x2763)) + ((x2766 * x2771)) + (((-1.0) * x2766 * x2770)) + ((x2767 * x2769)) + (((-1.0) * sj4 * x2764 * x2768)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j2array[0] = IKatan2((((x2769 * x2770)) + ((sj1 * x2765)) + (((-1.0) * x2766 * x2768)) + (((-1.0) * sj4 * x2764 * x2771)) + ((x2766 * x2767)) + (((-1.0) * x2763 * x2764))), (((cj1 * x2765)) + ((sj1 * x2763)) + ((x2766 * x2771)) + (((-1.0) * x2766 * x2770)) + ((x2767 * x2769)) + (((-1.0) * sj4 * x2764 * x2768))));
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[6];
                                                                                                    IkReal x2772 = IKcos(j2);
                                                                                                    IkReal x2773 = IKsin(j2);
                                                                                                    IkReal x2774 = (sj4 * sj5);
                                                                                                    IkReal x2775 = ((1.0) * cj5);
                                                                                                    IkReal x2776 = (cj3 * cj4);
                                                                                                    IkReal x2777 = (cj5 * r11);
                                                                                                    IkReal x2778 = ((0.15) * sj5);
                                                                                                    IkReal x2779 = (cj3 * sj4);
                                                                                                    IkReal x2780 = ((1.0) * cj4);
                                                                                                    IkReal x2781 = (cj5 * r21);
                                                                                                    IkReal x2782 = (sj3 * sj5);
                                                                                                    IkReal x2783 = (cj1 * x2772);
                                                                                                    IkReal x2784 = (sj1 * x2773);
                                                                                                    IkReal x2785 = (sj5 * x2776);
                                                                                                    IkReal x2786 = (cj1 * x2773);
                                                                                                    IkReal x2787 = (sj1 * x2772);
                                                                                                    IkReal x2788 = (x2784 + x2783);
                                                                                                    evalcond[0] = ((((-1.0) * r12 * x2780)) + x2788 + ((r11 * x2774)) + (((-1.0) * r10 * sj4 * x2775)));
                                                                                                    evalcond[1] = (x2787 + (((-1.0) * r20 * sj4 * x2775)) + (((-1.0) * r22 * x2780)) + ((r21 * x2774)) + (((-1.0) * x2786)));
                                                                                                    evalcond[2] = ((((-0.15) * x2781)) + (((0.71) * cj1)) + (((-0.54) * x2787)) + (((-1.0) * pz)) + (((0.54) * x2786)) + (((-1.0) * r20 * x2778)));
                                                                                                    evalcond[3] = ((((-1.0) * r10 * x2778)) + (((-0.54) * x2784)) + (((-0.54) * x2783)) + (((-0.71) * sj1)) + (((-0.15) * x2777)) + (((-1.0) * py)));
                                                                                                    evalcond[4] = (x2788 + ((r21 * x2785)) + ((r22 * x2779)) + ((sj3 * x2781)) + (((-1.0) * r20 * x2775 * x2776)) + ((r20 * x2782)));
                                                                                                    evalcond[5] = (x2786 + ((r11 * x2785)) + (((-1.0) * x2787)) + ((r10 * x2782)) + ((sj3 * x2777)) + ((r12 * x2779)) + (((-1.0) * r10 * x2775 * x2776)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        if (1)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            continue; // branch miss [j2]
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                    bool j2valid[1] = {false};
                                                                    _nj2 = 1;
                                                                    IkReal x2789 = ((1.0) * sj1);
                                                                    IkReal x2790 = (sj1 * sj4);
                                                                    IkReal x2791 = (r11 * sj5);
                                                                    IkReal x2792 = ((1.0) * cj1);
                                                                    IkReal x2793 = (cj4 * r12);
                                                                    IkReal x2794 = (cj5 * r20 * sj0);
                                                                    IkReal x2795 = (cj5 * r10 * sj4);
                                                                    IkReal x2796 = (cj4 * r22 * sj0);
                                                                    IkReal x2797 = (r21 * sj0 * sj4 * sj5);
                                                                    CheckValue<IkReal> x2798 = IKPowWithIntegerCheck(IKsign(sj0), -1);
                                                                    if (!x2798.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    CheckValue<IkReal> x2799 = IKatan2WithCheck(IkReal(((((-1.0) * x2789 * x2793)) + (((-1.0) * x2789 * x2795)) + ((cj1 * x2797)) + ((x2790 * x2791)) + (((-1.0) * sj4 * x2792 * x2794)) + (((-1.0) * x2792 * x2796)))), IkReal((((cj1 * sj4 * x2791)) + (((-1.0) * x2789 * x2797)) + ((x2790 * x2794)) + ((sj1 * x2796)) + (((-1.0) * x2792 * x2793)) + (((-1.0) * x2792 * x2795)))), IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x2799.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x2798.value))) + (x2799.value));
                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                    if (j2array[0] > IKPI)
                                                                    {
                                                                        j2array[0] -= IK2PI;
                                                                    }
                                                                    else if (j2array[0] < -IKPI)
                                                                    {
                                                                        j2array[0] += IK2PI;
                                                                    }
                                                                    j2valid[0] = true;
                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                    {
                                                                        if (!j2valid[ij2])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij2[0] = ij2;
                                                                        _ij2[1] = -1;
                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                        {
                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j2valid[iij2] = false;
                                                                                _ij2[1] = iij2;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j2 = j2array[ij2];
                                                                        cj2 = cj2array[ij2];
                                                                        sj2 = sj2array[ij2];
                                                                        {
                                                                            IkReal evalcond[9];
                                                                            IkReal x2800 = IKsin(j2);
                                                                            IkReal x2801 = IKcos(j2);
                                                                            IkReal x2802 = (cj3 * sj4);
                                                                            IkReal x2803 = (cj3 * cj4);
                                                                            IkReal x2804 = (r21 * sj5);
                                                                            IkReal x2805 = ((1.0) * cj5);
                                                                            IkReal x2806 = (sj4 * sj5);
                                                                            IkReal x2807 = (cj5 * sj3);
                                                                            IkReal x2808 = ((0.15) * cj5);
                                                                            IkReal x2809 = ((1.0) * cj0);
                                                                            IkReal x2810 = ((0.15) * sj5);
                                                                            IkReal x2811 = ((0.54) * sj0);
                                                                            IkReal x2812 = (sj3 * sj5);
                                                                            IkReal x2813 = ((1.0) * cj4);
                                                                            IkReal x2814 = ((0.71) * sj1);
                                                                            IkReal x2815 = ((0.54) * cj0);
                                                                            IkReal x2816 = (cj1 * x2801);
                                                                            IkReal x2817 = (sj1 * x2800);
                                                                            IkReal x2818 = (cj1 * x2800);
                                                                            IkReal x2819 = (sj1 * x2801);
                                                                            IkReal x2820 = ((1.0) * sj0 * x2800);
                                                                            evalcond[0] = (((sj4 * x2804)) + (((-1.0) * x2818)) + (((-1.0) * r22 * x2813)) + (((-1.0) * r20 * sj4 * x2805)) + x2819);
                                                                            evalcond[1] = ((((0.71) * cj1)) + (((-1.0) * r21 * x2808)) + (((-1.0) * pz)) + (((-1.0) * r20 * x2810)) + (((0.54) * x2818)) + (((-0.54) * x2819)));
                                                                            evalcond[2] = ((((-1.0) * r02 * x2813)) + (((-1.0) * x2809 * x2817)) + (((-1.0) * x2809 * x2816)) + ((r01 * x2806)) + (((-1.0) * r00 * sj4 * x2805)));
                                                                            evalcond[3] = ((((-1.0) * r12 * x2813)) + (((-1.0) * r10 * sj4 * x2805)) + (((-1.0) * sj0 * x2817)) + (((-1.0) * sj0 * x2816)) + ((r11 * x2806)));
                                                                            evalcond[4] = ((((-1.0) * r01 * x2808)) + (((-1.0) * px)) + ((x2815 * x2816)) + ((x2815 * x2817)) + (((-1.0) * r00 * x2810)) + ((cj0 * x2814)));
                                                                            evalcond[5] = ((((-1.0) * py)) + (((-1.0) * r11 * x2808)) + ((sj0 * x2814)) + ((x2811 * x2817)) + ((x2811 * x2816)) + (((-1.0) * r10 * x2810)));
                                                                            evalcond[6] = ((((-1.0) * r20 * x2803 * x2805)) + ((x2803 * x2804)) + ((r21 * x2807)) + x2817 + x2816 + ((r20 * x2812)) + ((r22 * x2802)));
                                                                            evalcond[7] = (((r00 * x2812)) + (((-1.0) * x2809 * x2818)) + ((r02 * x2802)) + ((r01 * sj5 * x2803)) + (((-1.0) * r00 * x2803 * x2805)) + ((cj0 * x2819)) + ((r01 * x2807)));
                                                                            evalcond[8] = (((r12 * x2802)) + ((r10 * x2812)) + (((-1.0) * r10 * x2803 * x2805)) + ((r11 * sj5 * x2803)) + ((sj0 * x2819)) + (((-1.0) * sj0 * x2818)) + ((r11 * x2807)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                            bool j2valid[1] = {false};
                                                            _nj2 = 1;
                                                            IkReal x2821 = ((1.0) * cj0);
                                                            IkReal x2822 = ((1.0) * sj1);
                                                            IkReal x2823 = (cj5 * sj4);
                                                            IkReal x2824 = (cj4 * r22);
                                                            IkReal x2825 = (cj4 * r02);
                                                            IkReal x2826 = (cj0 * sj1);
                                                            IkReal x2827 = ((1.0) * cj1);
                                                            IkReal x2828 = (sj1 * sj4 * sj5);
                                                            IkReal x2829 = (cj1 * sj4 * sj5);
                                                            CheckValue<IkReal> x2830 = IKatan2WithCheck(IkReal(((((-1.0) * cj1 * r20 * x2821 * x2823)) + (((-1.0) * r00 * x2822 * x2823)) + ((cj0 * r21 * x2829)) + (((-1.0) * x2822 * x2825)) + ((r01 * x2828)) + (((-1.0) * cj1 * x2821 * x2824)))), IkReal((((x2824 * x2826)) + (((-1.0) * r00 * x2823 * x2827)) + ((r01 * x2829)) + (((-1.0) * r21 * x2821 * x2828)) + (((-1.0) * x2825 * x2827)) + ((r20 * x2823 * x2826)))), IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x2830.valid)
                                                            {
                                                                continue;
                                                            }
                                                            CheckValue<IkReal> x2831 = IKPowWithIntegerCheck(IKsign(cj0), -1);
                                                            if (!x2831.valid)
                                                            {
                                                                continue;
                                                            }
                                                            j2array[0] = ((-1.5707963267949) + (x2830.value) + (((1.5707963267949) * (x2831.value))));
                                                            sj2array[0] = IKsin(j2array[0]);
                                                            cj2array[0] = IKcos(j2array[0]);
                                                            if (j2array[0] > IKPI)
                                                            {
                                                                j2array[0] -= IK2PI;
                                                            }
                                                            else if (j2array[0] < -IKPI)
                                                            {
                                                                j2array[0] += IK2PI;
                                                            }
                                                            j2valid[0] = true;
                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                            {
                                                                if (!j2valid[ij2])
                                                                {
                                                                    continue;
                                                                }
                                                                _ij2[0] = ij2;
                                                                _ij2[1] = -1;
                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                {
                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                        j2valid[iij2] = false;
                                                                        _ij2[1] = iij2;
                                                                        break;
                                                                    }
                                                                }
                                                                j2 = j2array[ij2];
                                                                cj2 = cj2array[ij2];
                                                                sj2 = sj2array[ij2];
                                                                {
                                                                    IkReal evalcond[9];
                                                                    IkReal x2832 = IKsin(j2);
                                                                    IkReal x2833 = IKcos(j2);
                                                                    IkReal x2834 = (cj3 * sj4);
                                                                    IkReal x2835 = (cj3 * cj4);
                                                                    IkReal x2836 = (r21 * sj5);
                                                                    IkReal x2837 = ((1.0) * cj5);
                                                                    IkReal x2838 = (sj4 * sj5);
                                                                    IkReal x2839 = (cj5 * sj3);
                                                                    IkReal x2840 = ((0.15) * cj5);
                                                                    IkReal x2841 = ((1.0) * cj0);
                                                                    IkReal x2842 = ((0.15) * sj5);
                                                                    IkReal x2843 = ((0.54) * sj0);
                                                                    IkReal x2844 = (sj3 * sj5);
                                                                    IkReal x2845 = ((1.0) * cj4);
                                                                    IkReal x2846 = ((0.71) * sj1);
                                                                    IkReal x2847 = ((0.54) * cj0);
                                                                    IkReal x2848 = (cj1 * x2833);
                                                                    IkReal x2849 = (sj1 * x2832);
                                                                    IkReal x2850 = (cj1 * x2832);
                                                                    IkReal x2851 = (sj1 * x2833);
                                                                    IkReal x2852 = ((1.0) * sj0 * x2832);
                                                                    evalcond[0] = (((sj4 * x2836)) + (((-1.0) * r20 * sj4 * x2837)) + (((-1.0) * r22 * x2845)) + (((-1.0) * x2850)) + x2851);
                                                                    evalcond[1] = ((((0.71) * cj1)) + (((-1.0) * r20 * x2842)) + (((-1.0) * r21 * x2840)) + (((-1.0) * pz)) + (((-0.54) * x2851)) + (((0.54) * x2850)));
                                                                    evalcond[2] = ((((-1.0) * r02 * x2845)) + (((-1.0) * x2841 * x2848)) + (((-1.0) * x2841 * x2849)) + ((r01 * x2838)) + (((-1.0) * r00 * sj4 * x2837)));
                                                                    evalcond[3] = ((((-1.0) * r12 * x2845)) + (((-1.0) * r10 * sj4 * x2837)) + (((-1.0) * sj0 * x2849)) + (((-1.0) * sj0 * x2848)) + ((r11 * x2838)));
                                                                    evalcond[4] = (((x2847 * x2849)) + ((x2847 * x2848)) + (((-1.0) * r00 * x2842)) + (((-1.0) * r01 * x2840)) + (((-1.0) * px)) + ((cj0 * x2846)));
                                                                    evalcond[5] = (((sj0 * x2846)) + (((-1.0) * r11 * x2840)) + ((x2843 * x2848)) + ((x2843 * x2849)) + (((-1.0) * py)) + (((-1.0) * r10 * x2842)));
                                                                    evalcond[6] = ((((-1.0) * r20 * x2835 * x2837)) + ((r20 * x2844)) + ((r22 * x2834)) + ((x2835 * x2836)) + x2848 + x2849 + ((r21 * x2839)));
                                                                    evalcond[7] = (((r01 * sj5 * x2835)) + ((r02 * x2834)) + ((cj0 * x2851)) + (((-1.0) * x2841 * x2850)) + (((-1.0) * r00 * x2835 * x2837)) + ((r00 * x2844)) + ((r01 * x2839)));
                                                                    evalcond[8] = (((r12 * x2834)) + ((sj0 * x2851)) + ((r11 * sj5 * x2835)) + (((-1.0) * sj0 * x2850)) + ((r11 * x2839)) + (((-1.0) * r10 * x2835 * x2837)) + ((r10 * x2844)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(6);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };

    /// solves the inverse kinematics equations.
    /// \param pfree is an array specifying the free joints of the chain.
    IKFAST_API bool ComputeIk(const IkReal *eetrans, const IkReal *eerot, const IkReal *pfree, IkSolutionListBase<IkReal> &solutions)
    {
        IKSolver solver;
        return solver.ComputeIk(eetrans, eerot, pfree, solutions);
    }

    IKFAST_API bool ComputeIk2(const IkReal *eetrans, const IkReal *eerot, const IkReal *pfree, IkSolutionListBase<IkReal> &solutions, void *pOpenRAVEManip)
    {
        IKSolver solver;
        return solver.ComputeIk(eetrans, eerot, pfree, solutions);
    }

    IKFAST_API const char *GetKinematicsHash() { return "<robot:GenericRobot - FANUC_CRX_10iA_L (b0b07c567d8f67101d2712e3ce3fde97)>"; }

    IKFAST_API const char *GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif

int main(int argc, char **argv)
{
    if (argc != 6 + 1)
    {
        printf("\nUsage: ./ikcrx.out q1, q2, q3, q4, q5, q6 \n\n");
        return 1;
    }

    IkReal j[6];
    printf("Seed joint is: ");
    for (int i = 0; i < 6; ++i)
    {
        j[i] = atof(argv[i + 1]);
        printf("%.5f, ", j[i]);
    }
    printf("\n");

    IkReal eerot[9], eetrans[3];

    ComputeFk(j, eetrans, eerot);
    printf("FK result is: \n");
    for (int i = 0; i < 3; ++i)
    {
        printf("%.5f, ", eetrans[i]);
    }
    printf("\n\n");
    for (int i = 0; i < 9; ++i)
    {
        printf("%.5f, ", eerot[i]);
        if (i % 3 == 2)
        {
            printf("\n");
        }
    }
    printf("\n");

    IkSolutionList<IkReal> solutions;
    bool bSuccess = ComputeIk(eetrans, eerot, NULL, solutions);

    if (!bSuccess)
    {
        fprintf(stderr, "Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for (std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal> &sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0], vsolfree.size() > 0 ? &vsolfree[0] : NULL);
        for (std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.5f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
